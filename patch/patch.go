// Code generated by webidlgenerator. DO NOT EDIT.

// +build !js

package patch

import js "github.com/gowebapi/webapi/core/failjs"

// using following types:

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// interface: FormData
type FormData struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *FormData) JSValue() js.Value {
	return _this.Value_JS
}

// FormDataFromJS is casting a js.Value into FormData.
func FormDataFromJS(input js.Value) *FormData {
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &FormData{}
	ret.Value_JS = input
	return ret
}

// interface: MediaSource
type MediaSource struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *MediaSource) JSValue() js.Value {
	return _this.Value_JS
}

// MediaSourceFromJS is casting a js.Value into MediaSource.
func MediaSourceFromJS(input js.Value) *MediaSource {
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaSource{}
	ret.Value_JS = input
	return ret
}

// interface: MediaStream
type MediaStream struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *MediaStream) JSValue() js.Value {
	return _this.Value_JS
}

// MediaStreamFromJS is casting a js.Value into MediaStream.
func MediaStreamFromJS(input js.Value) *MediaStream {
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaStream{}
	ret.Value_JS = input
	return ret
}

// interface: RequestCredentials
type RequestCredentials struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *RequestCredentials) JSValue() js.Value {
	return _this.Value_JS
}

// RequestCredentialsFromJS is casting a js.Value into RequestCredentials.
func RequestCredentialsFromJS(input js.Value) *RequestCredentials {
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &RequestCredentials{}
	ret.Value_JS = input
	return ret
}

// interface: ServiceWorker
type ServiceWorker struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *ServiceWorker) JSValue() js.Value {
	return _this.Value_JS
}

// ServiceWorkerFromJS is casting a js.Value into ServiceWorker.
func ServiceWorkerFromJS(input js.Value) *ServiceWorker {
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &ServiceWorker{}
	ret.Value_JS = input
	return ret
}

// interface: SVGScriptElement
type SVGScriptElement struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGScriptElement) JSValue() js.Value {
	return _this.Value_JS
}

// SVGScriptElementFromJS is casting a js.Value into SVGScriptElement.
func SVGScriptElementFromJS(input js.Value) *SVGScriptElement {
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGScriptElement{}
	ret.Value_JS = input
	return ret
}

// interface: SVGImageElement
type SVGImageElement struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGImageElement) JSValue() js.Value {
	return _this.Value_JS
}

// SVGImageElementFromJS is casting a js.Value into SVGImageElement.
func SVGImageElementFromJS(input js.Value) *SVGImageElement {
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGImageElement{}
	ret.Value_JS = input
	return ret
}

// interface: Uint8ClampedArray
type Uint8ClampedArray struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *Uint8ClampedArray) JSValue() js.Value {
	return _this.Value_JS
}

// Uint8ClampedArrayFromJS is casting a js.Value into Uint8ClampedArray.
func Uint8ClampedArrayFromJS(input js.Value) *Uint8ClampedArray {
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Uint8ClampedArray{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLRenderingContext
type WebGLRenderingContext struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *WebGLRenderingContext) JSValue() js.Value {
	return _this.Value_JS
}

// WebGLRenderingContextFromJS is casting a js.Value into WebGLRenderingContext.
func WebGLRenderingContextFromJS(input js.Value) *WebGLRenderingContext {
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLRenderingContext{}
	ret.Value_JS = input
	return ret
}

// interface: WebGL2RenderingContext
type WebGL2RenderingContext struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *WebGL2RenderingContext) JSValue() js.Value {
	return _this.Value_JS
}

// WebGL2RenderingContextFromJS is casting a js.Value into WebGL2RenderingContext.
func WebGL2RenderingContextFromJS(input js.Value) *WebGL2RenderingContext {
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGL2RenderingContext{}
	ret.Value_JS = input
	return ret
}

// interface: ByteString
type ByteString struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *ByteString) JSValue() js.Value {
	return _this.Value_JS
}

// ByteStringFromJS is casting a js.Value into ByteString.
func ByteStringFromJS(input js.Value) *ByteString {
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &ByteString{}
	ret.Value_JS = input
	return ret
}

// interface: MouseEvent
type MouseEvent struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *MouseEvent) JSValue() js.Value {
	return _this.Value_JS
}

// MouseEventFromJS is casting a js.Value into MouseEvent.
func MouseEventFromJS(input js.Value) *MouseEvent {
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MouseEvent{}
	ret.Value_JS = input
	return ret
}
