// Code generated by webidl-bind. DO NOT EDIT.

// +build !js

package patch

import js "github.com/gowebapi/webapi/core/js"

// using following types:

// source idl files:
// patch.idl

// transform files:
// patch.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// class: ByteString
type ByteString struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *ByteString) JSValue() js.Value {
	return _this.Value_JS
}

// ByteStringFromJS is casting a js.Wrapper into ByteString.
func ByteStringFromJS(value js.Wrapper) *ByteString {
	input := value.JSValue()
	if typ := input.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ByteString{}
	ret.Value_JS = input
	return ret
}

// class: OverconstrainedError
type OverconstrainedError struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *OverconstrainedError) JSValue() js.Value {
	return _this.Value_JS
}

// OverconstrainedErrorFromJS is casting a js.Wrapper into OverconstrainedError.
func OverconstrainedErrorFromJS(value js.Wrapper) *OverconstrainedError {
	input := value.JSValue()
	if typ := input.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &OverconstrainedError{}
	ret.Value_JS = input
	return ret
}

// class: ReadableStream
type ReadableStream struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *ReadableStream) JSValue() js.Value {
	return _this.Value_JS
}

// ReadableStreamFromJS is casting a js.Wrapper into ReadableStream.
func ReadableStreamFromJS(value js.Wrapper) *ReadableStream {
	input := value.JSValue()
	if typ := input.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ReadableStream{}
	ret.Value_JS = input
	return ret
}

// class: Uint8ClampedArray
type Uint8ClampedArray struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *Uint8ClampedArray) JSValue() js.Value {
	return _this.Value_JS
}

// Uint8ClampedArrayFromJS is casting a js.Wrapper into Uint8ClampedArray.
func Uint8ClampedArrayFromJS(value js.Wrapper) *Uint8ClampedArray {
	input := value.JSValue()
	if typ := input.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Uint8ClampedArray{}
	ret.Value_JS = input
	return ret
}
