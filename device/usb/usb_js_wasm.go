// Code generated by webidl-bind. DO NOT EDIT.

package usb

import "syscall/js"

import (
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/dom/permissions"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// javascript.DataView
// javascript.FrozenArray
// javascript.Promise
// permissions.PermissionStatus

// source idl files:
// webusb.idl

// transform files:
// webusb.go.md

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: USBDirection
type USBDirection int

const (
	InUSBDirection USBDirection = iota
	OutUSBDirection
)

var uSBDirectionToWasmTable = []string{
	"in", "out",
}

var uSBDirectionFromWasmTable = map[string]USBDirection{
	"in": InUSBDirection, "out": OutUSBDirection,
}

// JSValue is converting this enum into a java object
func (this *USBDirection) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this USBDirection) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(uSBDirectionToWasmTable) {
		return uSBDirectionToWasmTable[idx]
	}
	panic("unknown input value")
}

// USBDirectionFromJS is converting a javascript value into
// a USBDirection enum value.
func USBDirectionFromJS(value js.Value) USBDirection {
	key := value.String()
	conv, ok := uSBDirectionFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: USBEndpointType
type USBEndpointType int

const (
	BulkUSBEndpointType USBEndpointType = iota
	InterruptUSBEndpointType
	IsochronousUSBEndpointType
)

var uSBEndpointTypeToWasmTable = []string{
	"bulk", "interrupt", "isochronous",
}

var uSBEndpointTypeFromWasmTable = map[string]USBEndpointType{
	"bulk": BulkUSBEndpointType, "interrupt": InterruptUSBEndpointType, "isochronous": IsochronousUSBEndpointType,
}

// JSValue is converting this enum into a java object
func (this *USBEndpointType) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this USBEndpointType) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(uSBEndpointTypeToWasmTable) {
		return uSBEndpointTypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// USBEndpointTypeFromJS is converting a javascript value into
// a USBEndpointType enum value.
func USBEndpointTypeFromJS(value js.Value) USBEndpointType {
	key := value.String()
	conv, ok := uSBEndpointTypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: USBRecipient
type USBRecipient int

const (
	DeviceUSBRecipient USBRecipient = iota
	InterfaceUSBRecipient
	EndpointUSBRecipient
	OtherUSBRecipient
)

var uSBRecipientToWasmTable = []string{
	"device", "interface", "endpoint", "other",
}

var uSBRecipientFromWasmTable = map[string]USBRecipient{
	"device": DeviceUSBRecipient, "interface": InterfaceUSBRecipient, "endpoint": EndpointUSBRecipient, "other": OtherUSBRecipient,
}

// JSValue is converting this enum into a java object
func (this *USBRecipient) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this USBRecipient) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(uSBRecipientToWasmTable) {
		return uSBRecipientToWasmTable[idx]
	}
	panic("unknown input value")
}

// USBRecipientFromJS is converting a javascript value into
// a USBRecipient enum value.
func USBRecipientFromJS(value js.Value) USBRecipient {
	key := value.String()
	conv, ok := uSBRecipientFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: USBRequestType
type USBRequestType int

const (
	StandardUSBRequestType USBRequestType = iota
	ClassUSBRequestType
	VendorUSBRequestType
)

var uSBRequestTypeToWasmTable = []string{
	"standard", "class", "vendor",
}

var uSBRequestTypeFromWasmTable = map[string]USBRequestType{
	"standard": StandardUSBRequestType, "class": ClassUSBRequestType, "vendor": VendorUSBRequestType,
}

// JSValue is converting this enum into a java object
func (this *USBRequestType) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this USBRequestType) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(uSBRequestTypeToWasmTable) {
		return uSBRequestTypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// USBRequestTypeFromJS is converting a javascript value into
// a USBRequestType enum value.
func USBRequestTypeFromJS(value js.Value) USBRequestType {
	key := value.String()
	conv, ok := uSBRequestTypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: USBTransferStatus
type USBTransferStatus int

const (
	OkUSBTransferStatus USBTransferStatus = iota
	StallUSBTransferStatus
	BabbleUSBTransferStatus
)

var uSBTransferStatusToWasmTable = []string{
	"ok", "stall", "babble",
}

var uSBTransferStatusFromWasmTable = map[string]USBTransferStatus{
	"ok": OkUSBTransferStatus, "stall": StallUSBTransferStatus, "babble": BabbleUSBTransferStatus,
}

// JSValue is converting this enum into a java object
func (this *USBTransferStatus) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this USBTransferStatus) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(uSBTransferStatusToWasmTable) {
		return uSBTransferStatusToWasmTable[idx]
	}
	panic("unknown input value")
}

// USBTransferStatusFromJS is converting a javascript value into
// a USBTransferStatus enum value.
func USBTransferStatusFromJS(value js.Value) USBTransferStatus {
	key := value.String()
	conv, ok := uSBTransferStatusFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// dictionary: USBConnectionEventInit
type USBConnectionEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Device     *USBDevice
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *USBConnectionEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Device.JSValue()
	out.Set("device", value3)
	return out
}

// USBConnectionEventInitFromJS is allocating a new
// USBConnectionEventInit object and copy all values from
// input javascript object
func USBConnectionEventInitFromJS(value js.Wrapper) *USBConnectionEventInit {
	input := value.JSValue()
	var out USBConnectionEventInit
	var (
		value0 bool       // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool       // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool       // javascript: boolean {composed Composed composed}
		value3 *USBDevice // javascript: USBDevice {device Device device}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = USBDeviceFromJS(input.Get("device"))
	out.Device = value3
	return &out
}

// dictionary: USBControlTransferParameters
type USBControlTransferParameters struct {
	RequestType USBRequestType
	Recipient   USBRecipient
	Request     int
	Value       int
	Index       int
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *USBControlTransferParameters) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.RequestType.JSValue()
	out.Set("requestType", value0)
	value1 := _this.Recipient.JSValue()
	out.Set("recipient", value1)
	value2 := _this.Request
	out.Set("request", value2)
	value3 := _this.Value
	out.Set("value", value3)
	value4 := _this.Index
	out.Set("index", value4)
	return out
}

// USBControlTransferParametersFromJS is allocating a new
// USBControlTransferParameters object and copy all values from
// input javascript object
func USBControlTransferParametersFromJS(value js.Wrapper) *USBControlTransferParameters {
	input := value.JSValue()
	var out USBControlTransferParameters
	var (
		value0 USBRequestType // javascript: USBRequestType {requestType RequestType requestType}
		value1 USBRecipient   // javascript: USBRecipient {recipient Recipient recipient}
		value2 int            // javascript: octet {request Request request}
		value3 int            // javascript: unsigned short {value Value value}
		value4 int            // javascript: unsigned short {index Index index}
	)
	value0 = USBRequestTypeFromJS(input.Get("requestType"))
	out.RequestType = value0
	value1 = USBRecipientFromJS(input.Get("recipient"))
	out.Recipient = value1
	value2 = (input.Get("request")).Int()
	out.Request = value2
	value3 = (input.Get("value")).Int()
	out.Value = value3
	value4 = (input.Get("index")).Int()
	out.Index = value4
	return &out
}

// dictionary: USBDeviceFilter
type USBDeviceFilter struct {
	VendorId     int
	ProductId    int
	ClassCode    int
	SubclassCode int
	ProtocolCode int
	SerialNumber string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *USBDeviceFilter) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.VendorId
	out.Set("vendorId", value0)
	value1 := _this.ProductId
	out.Set("productId", value1)
	value2 := _this.ClassCode
	out.Set("classCode", value2)
	value3 := _this.SubclassCode
	out.Set("subclassCode", value3)
	value4 := _this.ProtocolCode
	out.Set("protocolCode", value4)
	value5 := _this.SerialNumber
	out.Set("serialNumber", value5)
	return out
}

// USBDeviceFilterFromJS is allocating a new
// USBDeviceFilter object and copy all values from
// input javascript object
func USBDeviceFilterFromJS(value js.Wrapper) *USBDeviceFilter {
	input := value.JSValue()
	var out USBDeviceFilter
	var (
		value0 int    // javascript: unsigned short {vendorId VendorId vendorId}
		value1 int    // javascript: unsigned short {productId ProductId productId}
		value2 int    // javascript: octet {classCode ClassCode classCode}
		value3 int    // javascript: octet {subclassCode SubclassCode subclassCode}
		value4 int    // javascript: octet {protocolCode ProtocolCode protocolCode}
		value5 string // javascript: DOMString {serialNumber SerialNumber serialNumber}
	)
	value0 = (input.Get("vendorId")).Int()
	out.VendorId = value0
	value1 = (input.Get("productId")).Int()
	out.ProductId = value1
	value2 = (input.Get("classCode")).Int()
	out.ClassCode = value2
	value3 = (input.Get("subclassCode")).Int()
	out.SubclassCode = value3
	value4 = (input.Get("protocolCode")).Int()
	out.ProtocolCode = value4
	value5 = (input.Get("serialNumber")).String()
	out.SerialNumber = value5
	return &out
}

// dictionary: USBDeviceRequestOptions
type USBDeviceRequestOptions struct {
	Filters []*USBDeviceFilter
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *USBDeviceRequestOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.Filters))
	for __idx0, __seq_in0 := range _this.Filters {
		__seq_out0 := __seq_in0.JSValue()
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("filters", value0)
	return out
}

// USBDeviceRequestOptionsFromJS is allocating a new
// USBDeviceRequestOptions object and copy all values from
// input javascript object
func USBDeviceRequestOptionsFromJS(value js.Wrapper) *USBDeviceRequestOptions {
	input := value.JSValue()
	var out USBDeviceRequestOptions
	var (
		value0 []*USBDeviceFilter // javascript: sequence<USBDeviceFilter> {filters Filters filters}
	)
	__length0 := input.Get("filters").Length()
	__array0 := make([]*USBDeviceFilter, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *USBDeviceFilter
		__seq_in0 := input.Get("filters").Index(__idx0)
		__seq_out0 = USBDeviceFilterFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.Filters = value0
	return &out
}

// interface: USB
type USB struct {
	domcore.EventTarget
}

// USBFromJS is casting a js.Wrapper into USB.
func USBFromJS(value js.Wrapper) *USB {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &USB{}
	ret.Value_JS = input
	return ret
}

// Onconnect returning attribute 'onconnect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *USB) Onconnect() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onconnect")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnconnect setting attribute 'onconnect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *USB) SetOnconnect(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onconnect", input)
}

// Ondisconnect returning attribute 'ondisconnect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *USB) Ondisconnect() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondisconnect")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndisconnect setting attribute 'ondisconnect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *USB) SetOndisconnect(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ondisconnect", input)
}

func (_this *USB) GetDevices() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getDevices", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *USB) RequestDevice(options *USBDeviceRequestOptions) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := options.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("requestDevice", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

// interface: USBAlternateInterface
type USBAlternateInterface struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *USBAlternateInterface) JSValue() js.Value {
	return _this.Value_JS
}

// USBAlternateInterfaceFromJS is casting a js.Wrapper into USBAlternateInterface.
func USBAlternateInterfaceFromJS(value js.Wrapper) *USBAlternateInterface {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &USBAlternateInterface{}
	ret.Value_JS = input
	return ret
}

func NewUSBAlternateInterface(deviceInterface *USBInterface, alternateSetting int) (_result *USBAlternateInterface) {
	_klass := js.Global().Get("USBAlternateInterface")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := deviceInterface.JSValue()
	_args[0] = _p0
	_end++
	_p1 := alternateSetting
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *USBAlternateInterface // javascript: USBAlternateInterface _what_return_name
	)
	_converted = USBAlternateInterfaceFromJS(_returned)
	_result = _converted
	return
}

// AlternateSetting returning attribute 'alternateSetting' with
// type int (idl: octet).
func (_this *USBAlternateInterface) AlternateSetting() int {
	var ret int
	value := _this.Value_JS.Get("alternateSetting")
	ret = (value).Int()
	return ret
}

// InterfaceClass returning attribute 'interfaceClass' with
// type int (idl: octet).
func (_this *USBAlternateInterface) InterfaceClass() int {
	var ret int
	value := _this.Value_JS.Get("interfaceClass")
	ret = (value).Int()
	return ret
}

// InterfaceSubclass returning attribute 'interfaceSubclass' with
// type int (idl: octet).
func (_this *USBAlternateInterface) InterfaceSubclass() int {
	var ret int
	value := _this.Value_JS.Get("interfaceSubclass")
	ret = (value).Int()
	return ret
}

// InterfaceProtocol returning attribute 'interfaceProtocol' with
// type int (idl: octet).
func (_this *USBAlternateInterface) InterfaceProtocol() int {
	var ret int
	value := _this.Value_JS.Get("interfaceProtocol")
	ret = (value).Int()
	return ret
}

// InterfaceName returning attribute 'interfaceName' with
// type string (idl: DOMString).
func (_this *USBAlternateInterface) InterfaceName() *string {
	var ret *string
	value := _this.Value_JS.Get("interfaceName")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// Endpoints returning attribute 'endpoints' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *USBAlternateInterface) Endpoints() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("endpoints")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// interface: USBConfiguration
type USBConfiguration struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *USBConfiguration) JSValue() js.Value {
	return _this.Value_JS
}

// USBConfigurationFromJS is casting a js.Wrapper into USBConfiguration.
func USBConfigurationFromJS(value js.Wrapper) *USBConfiguration {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &USBConfiguration{}
	ret.Value_JS = input
	return ret
}

func NewUSBConfiguration(device *USBDevice, configurationValue int) (_result *USBConfiguration) {
	_klass := js.Global().Get("USBConfiguration")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := device.JSValue()
	_args[0] = _p0
	_end++
	_p1 := configurationValue
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *USBConfiguration // javascript: USBConfiguration _what_return_name
	)
	_converted = USBConfigurationFromJS(_returned)
	_result = _converted
	return
}

// ConfigurationValue returning attribute 'configurationValue' with
// type int (idl: octet).
func (_this *USBConfiguration) ConfigurationValue() int {
	var ret int
	value := _this.Value_JS.Get("configurationValue")
	ret = (value).Int()
	return ret
}

// ConfigurationName returning attribute 'configurationName' with
// type string (idl: DOMString).
func (_this *USBConfiguration) ConfigurationName() *string {
	var ret *string
	value := _this.Value_JS.Get("configurationName")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// Interfaces returning attribute 'interfaces' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *USBConfiguration) Interfaces() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("interfaces")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// interface: USBConnectionEvent
type USBConnectionEvent struct {
	domcore.Event
}

// USBConnectionEventFromJS is casting a js.Wrapper into USBConnectionEvent.
func USBConnectionEventFromJS(value js.Wrapper) *USBConnectionEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &USBConnectionEvent{}
	ret.Value_JS = input
	return ret
}

func NewUSBConnectionEvent(_type string, eventInitDict *USBConnectionEventInit) (_result *USBConnectionEvent) {
	_klass := js.Global().Get("USBConnectionEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_p1 := eventInitDict.JSValue()
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *USBConnectionEvent // javascript: USBConnectionEvent _what_return_name
	)
	_converted = USBConnectionEventFromJS(_returned)
	_result = _converted
	return
}

// Device returning attribute 'device' with
// type USBDevice (idl: USBDevice).
func (_this *USBConnectionEvent) Device() *USBDevice {
	var ret *USBDevice
	value := _this.Value_JS.Get("device")
	ret = USBDeviceFromJS(value)
	return ret
}

// interface: USBDevice
type USBDevice struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *USBDevice) JSValue() js.Value {
	return _this.Value_JS
}

// USBDeviceFromJS is casting a js.Wrapper into USBDevice.
func USBDeviceFromJS(value js.Wrapper) *USBDevice {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &USBDevice{}
	ret.Value_JS = input
	return ret
}

// UsbVersionMajor returning attribute 'usbVersionMajor' with
// type int (idl: octet).
func (_this *USBDevice) UsbVersionMajor() int {
	var ret int
	value := _this.Value_JS.Get("usbVersionMajor")
	ret = (value).Int()
	return ret
}

// UsbVersionMinor returning attribute 'usbVersionMinor' with
// type int (idl: octet).
func (_this *USBDevice) UsbVersionMinor() int {
	var ret int
	value := _this.Value_JS.Get("usbVersionMinor")
	ret = (value).Int()
	return ret
}

// UsbVersionSubminor returning attribute 'usbVersionSubminor' with
// type int (idl: octet).
func (_this *USBDevice) UsbVersionSubminor() int {
	var ret int
	value := _this.Value_JS.Get("usbVersionSubminor")
	ret = (value).Int()
	return ret
}

// DeviceClass returning attribute 'deviceClass' with
// type int (idl: octet).
func (_this *USBDevice) DeviceClass() int {
	var ret int
	value := _this.Value_JS.Get("deviceClass")
	ret = (value).Int()
	return ret
}

// DeviceSubclass returning attribute 'deviceSubclass' with
// type int (idl: octet).
func (_this *USBDevice) DeviceSubclass() int {
	var ret int
	value := _this.Value_JS.Get("deviceSubclass")
	ret = (value).Int()
	return ret
}

// DeviceProtocol returning attribute 'deviceProtocol' with
// type int (idl: octet).
func (_this *USBDevice) DeviceProtocol() int {
	var ret int
	value := _this.Value_JS.Get("deviceProtocol")
	ret = (value).Int()
	return ret
}

// VendorId returning attribute 'vendorId' with
// type int (idl: unsigned short).
func (_this *USBDevice) VendorId() int {
	var ret int
	value := _this.Value_JS.Get("vendorId")
	ret = (value).Int()
	return ret
}

// ProductId returning attribute 'productId' with
// type int (idl: unsigned short).
func (_this *USBDevice) ProductId() int {
	var ret int
	value := _this.Value_JS.Get("productId")
	ret = (value).Int()
	return ret
}

// DeviceVersionMajor returning attribute 'deviceVersionMajor' with
// type int (idl: octet).
func (_this *USBDevice) DeviceVersionMajor() int {
	var ret int
	value := _this.Value_JS.Get("deviceVersionMajor")
	ret = (value).Int()
	return ret
}

// DeviceVersionMinor returning attribute 'deviceVersionMinor' with
// type int (idl: octet).
func (_this *USBDevice) DeviceVersionMinor() int {
	var ret int
	value := _this.Value_JS.Get("deviceVersionMinor")
	ret = (value).Int()
	return ret
}

// DeviceVersionSubminor returning attribute 'deviceVersionSubminor' with
// type int (idl: octet).
func (_this *USBDevice) DeviceVersionSubminor() int {
	var ret int
	value := _this.Value_JS.Get("deviceVersionSubminor")
	ret = (value).Int()
	return ret
}

// ManufacturerName returning attribute 'manufacturerName' with
// type string (idl: DOMString).
func (_this *USBDevice) ManufacturerName() *string {
	var ret *string
	value := _this.Value_JS.Get("manufacturerName")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// ProductName returning attribute 'productName' with
// type string (idl: DOMString).
func (_this *USBDevice) ProductName() *string {
	var ret *string
	value := _this.Value_JS.Get("productName")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SerialNumber returning attribute 'serialNumber' with
// type string (idl: DOMString).
func (_this *USBDevice) SerialNumber() *string {
	var ret *string
	value := _this.Value_JS.Get("serialNumber")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// Configuration returning attribute 'configuration' with
// type USBConfiguration (idl: USBConfiguration).
func (_this *USBDevice) Configuration() *USBConfiguration {
	var ret *USBConfiguration
	value := _this.Value_JS.Get("configuration")
	if value.Type() != js.TypeNull {
		ret = USBConfigurationFromJS(value)
	}
	return ret
}

// Configurations returning attribute 'configurations' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *USBDevice) Configurations() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("configurations")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// Opened returning attribute 'opened' with
// type bool (idl: boolean).
func (_this *USBDevice) Opened() bool {
	var ret bool
	value := _this.Value_JS.Get("opened")
	ret = (value).Bool()
	return ret
}

func (_this *USBDevice) Open() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("open", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *USBDevice) Close() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("close", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *USBDevice) SelectConfiguration(configurationValue int) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := configurationValue
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("selectConfiguration", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *USBDevice) ClaimInterface(interfaceNumber int) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := interfaceNumber
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("claimInterface", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *USBDevice) ReleaseInterface(interfaceNumber int) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := interfaceNumber
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("releaseInterface", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *USBDevice) SelectAlternateInterface(interfaceNumber int, alternateSetting int) (_result *javascript.Promise) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := interfaceNumber
	_args[0] = _p0
	_end++
	_p1 := alternateSetting
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("selectAlternateInterface", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *USBDevice) ControlTransferIn(setup *USBControlTransferParameters, length int) (_result *javascript.Promise) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := setup.JSValue()
	_args[0] = _p0
	_end++
	_p1 := length
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("controlTransferIn", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *USBDevice) ControlTransferOut(setup *USBControlTransferParameters, data *Union) (_result *javascript.Promise) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := setup.JSValue()
	_args[0] = _p0
	_end++
	if data != nil {
		_p1 := data.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("controlTransferOut", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *USBDevice) ClearHalt(direction USBDirection, endpointNumber int) (_result *javascript.Promise) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := direction.JSValue()
	_args[0] = _p0
	_end++
	_p1 := endpointNumber
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("clearHalt", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *USBDevice) TransferIn(endpointNumber int, length uint) (_result *javascript.Promise) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := endpointNumber
	_args[0] = _p0
	_end++
	_p1 := length
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("transferIn", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *USBDevice) TransferOut(endpointNumber int, data *Union) (_result *javascript.Promise) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := endpointNumber
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("transferOut", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *USBDevice) IsochronousTransferIn(endpointNumber int, packetLengths []uint) (_result *javascript.Promise) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := endpointNumber
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(packetLengths))
	for __idx1, __seq_in1 := range packetLengths {
		__seq_out1 := __seq_in1
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("isochronousTransferIn", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *USBDevice) IsochronousTransferOut(endpointNumber int, data *Union, packetLengths []uint) (_result *javascript.Promise) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := endpointNumber
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	_p2 := js.Global().Get("Array").New(len(packetLengths))
	for __idx2, __seq_in2 := range packetLengths {
		__seq_out2 := __seq_in2
		_p2.SetIndex(__idx2, __seq_out2)
	}
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("isochronousTransferOut", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *USBDevice) Reset() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("reset", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

// interface: USBEndpoint
type USBEndpoint struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *USBEndpoint) JSValue() js.Value {
	return _this.Value_JS
}

// USBEndpointFromJS is casting a js.Wrapper into USBEndpoint.
func USBEndpointFromJS(value js.Wrapper) *USBEndpoint {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &USBEndpoint{}
	ret.Value_JS = input
	return ret
}

func NewUSBEndpoint(alternate *USBAlternateInterface, endpointNumber int, direction USBDirection) (_result *USBEndpoint) {
	_klass := js.Global().Get("USBEndpoint")
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := alternate.JSValue()
	_args[0] = _p0
	_end++
	_p1 := endpointNumber
	_args[1] = _p1
	_end++
	_p2 := direction.JSValue()
	_args[2] = _p2
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *USBEndpoint // javascript: USBEndpoint _what_return_name
	)
	_converted = USBEndpointFromJS(_returned)
	_result = _converted
	return
}

// EndpointNumber returning attribute 'endpointNumber' with
// type int (idl: octet).
func (_this *USBEndpoint) EndpointNumber() int {
	var ret int
	value := _this.Value_JS.Get("endpointNumber")
	ret = (value).Int()
	return ret
}

// Direction returning attribute 'direction' with
// type USBDirection (idl: USBDirection).
func (_this *USBEndpoint) Direction() USBDirection {
	var ret USBDirection
	value := _this.Value_JS.Get("direction")
	ret = USBDirectionFromJS(value)
	return ret
}

// Type returning attribute 'type' with
// type USBEndpointType (idl: USBEndpointType).
func (_this *USBEndpoint) Type() USBEndpointType {
	var ret USBEndpointType
	value := _this.Value_JS.Get("type")
	ret = USBEndpointTypeFromJS(value)
	return ret
}

// PacketSize returning attribute 'packetSize' with
// type uint (idl: unsigned long).
func (_this *USBEndpoint) PacketSize() uint {
	var ret uint
	value := _this.Value_JS.Get("packetSize")
	ret = (uint)((value).Int())
	return ret
}

// interface: USBInTransferResult
type USBInTransferResult struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *USBInTransferResult) JSValue() js.Value {
	return _this.Value_JS
}

// USBInTransferResultFromJS is casting a js.Wrapper into USBInTransferResult.
func USBInTransferResultFromJS(value js.Wrapper) *USBInTransferResult {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &USBInTransferResult{}
	ret.Value_JS = input
	return ret
}

func NewUSBInTransferResult(status USBTransferStatus, data *javascript.DataView) (_result *USBInTransferResult) {
	_klass := js.Global().Get("USBInTransferResult")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := status.JSValue()
	_args[0] = _p0
	_end++
	if data != nil {
		_p1 := data.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *USBInTransferResult // javascript: USBInTransferResult _what_return_name
	)
	_converted = USBInTransferResultFromJS(_returned)
	_result = _converted
	return
}

// Data returning attribute 'data' with
// type javascript.DataView (idl: DataView).
func (_this *USBInTransferResult) Data() *javascript.DataView {
	var ret *javascript.DataView
	value := _this.Value_JS.Get("data")
	if value.Type() != js.TypeNull {
		ret = javascript.DataViewFromJS(value)
	}
	return ret
}

// Status returning attribute 'status' with
// type USBTransferStatus (idl: USBTransferStatus).
func (_this *USBInTransferResult) Status() USBTransferStatus {
	var ret USBTransferStatus
	value := _this.Value_JS.Get("status")
	ret = USBTransferStatusFromJS(value)
	return ret
}

// interface: USBInterface
type USBInterface struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *USBInterface) JSValue() js.Value {
	return _this.Value_JS
}

// USBInterfaceFromJS is casting a js.Wrapper into USBInterface.
func USBInterfaceFromJS(value js.Wrapper) *USBInterface {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &USBInterface{}
	ret.Value_JS = input
	return ret
}

func NewUSBInterface(configuration *USBConfiguration, interfaceNumber int) (_result *USBInterface) {
	_klass := js.Global().Get("USBInterface")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := configuration.JSValue()
	_args[0] = _p0
	_end++
	_p1 := interfaceNumber
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *USBInterface // javascript: USBInterface _what_return_name
	)
	_converted = USBInterfaceFromJS(_returned)
	_result = _converted
	return
}

// InterfaceNumber returning attribute 'interfaceNumber' with
// type int (idl: octet).
func (_this *USBInterface) InterfaceNumber() int {
	var ret int
	value := _this.Value_JS.Get("interfaceNumber")
	ret = (value).Int()
	return ret
}

// Alternate returning attribute 'alternate' with
// type USBAlternateInterface (idl: USBAlternateInterface).
func (_this *USBInterface) Alternate() *USBAlternateInterface {
	var ret *USBAlternateInterface
	value := _this.Value_JS.Get("alternate")
	ret = USBAlternateInterfaceFromJS(value)
	return ret
}

// Alternates returning attribute 'alternates' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *USBInterface) Alternates() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("alternates")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// Claimed returning attribute 'claimed' with
// type bool (idl: boolean).
func (_this *USBInterface) Claimed() bool {
	var ret bool
	value := _this.Value_JS.Get("claimed")
	ret = (value).Bool()
	return ret
}

// interface: USBIsochronousInTransferPacket
type USBIsochronousInTransferPacket struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *USBIsochronousInTransferPacket) JSValue() js.Value {
	return _this.Value_JS
}

// USBIsochronousInTransferPacketFromJS is casting a js.Wrapper into USBIsochronousInTransferPacket.
func USBIsochronousInTransferPacketFromJS(value js.Wrapper) *USBIsochronousInTransferPacket {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &USBIsochronousInTransferPacket{}
	ret.Value_JS = input
	return ret
}

func NewUSBIsochronousInTransferPacket(status USBTransferStatus, data *javascript.DataView) (_result *USBIsochronousInTransferPacket) {
	_klass := js.Global().Get("USBIsochronousInTransferPacket")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := status.JSValue()
	_args[0] = _p0
	_end++
	if data != nil {
		_p1 := data.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *USBIsochronousInTransferPacket // javascript: USBIsochronousInTransferPacket _what_return_name
	)
	_converted = USBIsochronousInTransferPacketFromJS(_returned)
	_result = _converted
	return
}

// Data returning attribute 'data' with
// type javascript.DataView (idl: DataView).
func (_this *USBIsochronousInTransferPacket) Data() *javascript.DataView {
	var ret *javascript.DataView
	value := _this.Value_JS.Get("data")
	if value.Type() != js.TypeNull {
		ret = javascript.DataViewFromJS(value)
	}
	return ret
}

// Status returning attribute 'status' with
// type USBTransferStatus (idl: USBTransferStatus).
func (_this *USBIsochronousInTransferPacket) Status() USBTransferStatus {
	var ret USBTransferStatus
	value := _this.Value_JS.Get("status")
	ret = USBTransferStatusFromJS(value)
	return ret
}

// interface: USBIsochronousInTransferResult
type USBIsochronousInTransferResult struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *USBIsochronousInTransferResult) JSValue() js.Value {
	return _this.Value_JS
}

// USBIsochronousInTransferResultFromJS is casting a js.Wrapper into USBIsochronousInTransferResult.
func USBIsochronousInTransferResultFromJS(value js.Wrapper) *USBIsochronousInTransferResult {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &USBIsochronousInTransferResult{}
	ret.Value_JS = input
	return ret
}

func NewUSBIsochronousInTransferResult(packets []*USBIsochronousInTransferPacket, data *javascript.DataView) (_result *USBIsochronousInTransferResult) {
	_klass := js.Global().Get("USBIsochronousInTransferResult")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := js.Global().Get("Array").New(len(packets))
	for __idx0, __seq_in0 := range packets {
		__seq_out0 := __seq_in0.JSValue()
		_p0.SetIndex(__idx0, __seq_out0)
	}
	_args[0] = _p0
	_end++
	if data != nil {
		_p1 := data.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *USBIsochronousInTransferResult // javascript: USBIsochronousInTransferResult _what_return_name
	)
	_converted = USBIsochronousInTransferResultFromJS(_returned)
	_result = _converted
	return
}

// Data returning attribute 'data' with
// type javascript.DataView (idl: DataView).
func (_this *USBIsochronousInTransferResult) Data() *javascript.DataView {
	var ret *javascript.DataView
	value := _this.Value_JS.Get("data")
	if value.Type() != js.TypeNull {
		ret = javascript.DataViewFromJS(value)
	}
	return ret
}

// Packets returning attribute 'packets' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *USBIsochronousInTransferResult) Packets() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("packets")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// interface: USBIsochronousOutTransferPacket
type USBIsochronousOutTransferPacket struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *USBIsochronousOutTransferPacket) JSValue() js.Value {
	return _this.Value_JS
}

// USBIsochronousOutTransferPacketFromJS is casting a js.Wrapper into USBIsochronousOutTransferPacket.
func USBIsochronousOutTransferPacketFromJS(value js.Wrapper) *USBIsochronousOutTransferPacket {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &USBIsochronousOutTransferPacket{}
	ret.Value_JS = input
	return ret
}

func NewUSBIsochronousOutTransferPacket(status USBTransferStatus, bytesWritten *uint) (_result *USBIsochronousOutTransferPacket) {
	_klass := js.Global().Get("USBIsochronousOutTransferPacket")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := status.JSValue()
	_args[0] = _p0
	_end++
	if bytesWritten != nil {
		_p1 := bytesWritten
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *USBIsochronousOutTransferPacket // javascript: USBIsochronousOutTransferPacket _what_return_name
	)
	_converted = USBIsochronousOutTransferPacketFromJS(_returned)
	_result = _converted
	return
}

// BytesWritten returning attribute 'bytesWritten' with
// type uint (idl: unsigned long).
func (_this *USBIsochronousOutTransferPacket) BytesWritten() uint {
	var ret uint
	value := _this.Value_JS.Get("bytesWritten")
	ret = (uint)((value).Int())
	return ret
}

// Status returning attribute 'status' with
// type USBTransferStatus (idl: USBTransferStatus).
func (_this *USBIsochronousOutTransferPacket) Status() USBTransferStatus {
	var ret USBTransferStatus
	value := _this.Value_JS.Get("status")
	ret = USBTransferStatusFromJS(value)
	return ret
}

// interface: USBIsochronousOutTransferResult
type USBIsochronousOutTransferResult struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *USBIsochronousOutTransferResult) JSValue() js.Value {
	return _this.Value_JS
}

// USBIsochronousOutTransferResultFromJS is casting a js.Wrapper into USBIsochronousOutTransferResult.
func USBIsochronousOutTransferResultFromJS(value js.Wrapper) *USBIsochronousOutTransferResult {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &USBIsochronousOutTransferResult{}
	ret.Value_JS = input
	return ret
}

func NewUSBIsochronousOutTransferResult(packets []*USBIsochronousOutTransferPacket) (_result *USBIsochronousOutTransferResult) {
	_klass := js.Global().Get("USBIsochronousOutTransferResult")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := js.Global().Get("Array").New(len(packets))
	for __idx0, __seq_in0 := range packets {
		__seq_out0 := __seq_in0.JSValue()
		_p0.SetIndex(__idx0, __seq_out0)
	}
	_args[0] = _p0
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *USBIsochronousOutTransferResult // javascript: USBIsochronousOutTransferResult _what_return_name
	)
	_converted = USBIsochronousOutTransferResultFromJS(_returned)
	_result = _converted
	return
}

// Packets returning attribute 'packets' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *USBIsochronousOutTransferResult) Packets() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("packets")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// interface: USBOutTransferResult
type USBOutTransferResult struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *USBOutTransferResult) JSValue() js.Value {
	return _this.Value_JS
}

// USBOutTransferResultFromJS is casting a js.Wrapper into USBOutTransferResult.
func USBOutTransferResultFromJS(value js.Wrapper) *USBOutTransferResult {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &USBOutTransferResult{}
	ret.Value_JS = input
	return ret
}

func NewUSBOutTransferResult(status USBTransferStatus, bytesWritten *uint) (_result *USBOutTransferResult) {
	_klass := js.Global().Get("USBOutTransferResult")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := status.JSValue()
	_args[0] = _p0
	_end++
	if bytesWritten != nil {
		_p1 := bytesWritten
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *USBOutTransferResult // javascript: USBOutTransferResult _what_return_name
	)
	_converted = USBOutTransferResultFromJS(_returned)
	_result = _converted
	return
}

// BytesWritten returning attribute 'bytesWritten' with
// type uint (idl: unsigned long).
func (_this *USBOutTransferResult) BytesWritten() uint {
	var ret uint
	value := _this.Value_JS.Get("bytesWritten")
	ret = (uint)((value).Int())
	return ret
}

// Status returning attribute 'status' with
// type USBTransferStatus (idl: USBTransferStatus).
func (_this *USBOutTransferResult) Status() USBTransferStatus {
	var ret USBTransferStatus
	value := _this.Value_JS.Get("status")
	ret = USBTransferStatusFromJS(value)
	return ret
}

// interface: USBPermissionResult
type USBPermissionResult struct {
	permissions.PermissionStatus
}

// USBPermissionResultFromJS is casting a js.Wrapper into USBPermissionResult.
func USBPermissionResultFromJS(value js.Wrapper) *USBPermissionResult {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &USBPermissionResult{}
	ret.Value_JS = input
	return ret
}

// Devices returning attribute 'devices' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *USBPermissionResult) Devices() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("devices")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// SetDevices setting attribute 'devices' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *USBPermissionResult) SetDevices(value *javascript.FrozenArray) {
	input := value.JSValue()
	_this.Value_JS.Set("devices", input)
}
