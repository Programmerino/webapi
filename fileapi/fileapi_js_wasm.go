// Code generated by webidl-bind. DO NOT EDIT.

package fileapi

import "syscall/js"

import (
	"github.com/gowebapi/webapi/file"
)

// using following types:
// file.Blob

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// callback: BlobCallback
type BlobCallbackFunc func(blob *file.Blob)

// BlobCallback is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type BlobCallback js.Func

func BlobCallbackToJS(callback BlobCallbackFunc) *BlobCallback {
	if callback == nil {
		return nil
	}
	ret := BlobCallback(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *file.Blob // javascript: Blob blob
		)
		if args[0].Type() != js.TypeNull {
			_p0 = file.BlobFromJS(args[0])
		}
		callback(_p0)
		// returning no return value
		return nil
	}))
	return &ret
}

func BlobCallbackFromJS(_value js.Value) BlobCallbackFunc {
	return func(blob *file.Blob) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := blob.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}
