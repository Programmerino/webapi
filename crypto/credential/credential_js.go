// Code generated by webidl-bind. DO NOT EDIT.

package credential

import "syscall/js"

import (
	"github.com/Programmerino/webapi/crypto/authentication"
	"github.com/Programmerino/webapi/dom/domcore"
	"github.com/Programmerino/webapi/javascript"
)

// using following types:
// authentication.AttestationConveyancePreference
// authentication.AuthenticationExtensionsClientInputs
// authentication.AuthenticationExtensionsClientOutputs
// authentication.Response
// authentication.SelectionCriteria
// authentication.Transport
// authentication.UserVerificationRequirement
// domcore.AbortSignal
// javascript.ArrayBuffer
// javascript.PromiseBool
// javascript.PromiseFinally
// javascript.PromiseVoid

// source idl files:
// credential-management.idl
// promises.idl
// webauthn.idl

// transform files:
// credential-management.go.md
// promises.go.md
// webauthn.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: CredentialMediationRequirement
type CredentialMediationRequirement int

const (
	SilentCredentialMediationRequirement CredentialMediationRequirement = iota
	OptionalCredentialMediationRequirement
	RequiredCredentialMediationRequirement
)

var credentialMediationRequirementToWasmTable = []string{
	"silent", "optional", "required",
}

var credentialMediationRequirementFromWasmTable = map[string]CredentialMediationRequirement{
	"silent": SilentCredentialMediationRequirement, "optional": OptionalCredentialMediationRequirement, "required": RequiredCredentialMediationRequirement,
}

// JSValue is converting this enum into a javascript object
func (this *CredentialMediationRequirement) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this CredentialMediationRequirement) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(credentialMediationRequirementToWasmTable) {
		return credentialMediationRequirementToWasmTable[idx]
	}
	panic("unknown input value")
}

// CredentialMediationRequirementFromJS is converting a javascript value into
// a CredentialMediationRequirement enum value.
func CredentialMediationRequirementFromJS(value js.Value) CredentialMediationRequirement {
	key := value.String()
	conv, ok := credentialMediationRequirementFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: PublicKeyCredentialType
type PublicKeyCredentialType int

const (
	PublicKeyPublicKeyCredentialType PublicKeyCredentialType = iota
)

var publicKeyCredentialTypeToWasmTable = []string{
	"public-key",
}

var publicKeyCredentialTypeFromWasmTable = map[string]PublicKeyCredentialType{
	"public-key": PublicKeyPublicKeyCredentialType,
}

// JSValue is converting this enum into a javascript object
func (this *PublicKeyCredentialType) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this PublicKeyCredentialType) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(publicKeyCredentialTypeToWasmTable) {
		return publicKeyCredentialTypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// PublicKeyCredentialTypeFromJS is converting a javascript value into
// a PublicKeyCredentialType enum value.
func PublicKeyCredentialTypeFromJS(value js.Value) PublicKeyCredentialType {
	key := value.String()
	conv, ok := publicKeyCredentialTypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// callback: PromiseTemplateOnFulfilled
type PromiseCredentialOnFulfilledFunc func(value *Credential)

// PromiseCredentialOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseCredentialOnFulfilled js.Func

func PromiseCredentialOnFulfilledToJS(callback PromiseCredentialOnFulfilledFunc) *PromiseCredentialOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseCredentialOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *Credential // javascript: Credential value
		)
		_p0 = CredentialFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseCredentialOnFulfilledFromJS(_value js.Value) PromiseCredentialOnFulfilledFunc {
	return func(value *Credential) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseCredentialOnRejectedFunc func(reason js.Value)

// PromiseCredentialOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseCredentialOnRejected js.Func

func PromiseCredentialOnRejectedToJS(callback PromiseCredentialOnRejectedFunc) *PromiseCredentialOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseCredentialOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseCredentialOnRejectedFromJS(_value js.Value) PromiseCredentialOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseNilCredentialOnFulfilledFunc func(value *Credential)

// PromiseNilCredentialOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseNilCredentialOnFulfilled js.Func

func PromiseNilCredentialOnFulfilledToJS(callback PromiseNilCredentialOnFulfilledFunc) *PromiseNilCredentialOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseNilCredentialOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *Credential // javascript: Credential value
		)
		_p0 = CredentialFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseNilCredentialOnFulfilledFromJS(_value js.Value) PromiseNilCredentialOnFulfilledFunc {
	return func(value *Credential) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseNilCredentialOnRejectedFunc func(reason js.Value)

// PromiseNilCredentialOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseNilCredentialOnRejected js.Func

func PromiseNilCredentialOnRejectedToJS(callback PromiseNilCredentialOnRejectedFunc) *PromiseNilCredentialOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseNilCredentialOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseNilCredentialOnRejectedFromJS(_value js.Value) PromiseNilCredentialOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// dictionary: CredentialCreationOptions
type CredentialCreationOptions struct {
	Signal    *domcore.AbortSignal
	Password  *Union
	Federated *FederatedCredentialInit
	PublicKey *PublicKeyCredentialCreationOptions
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *CredentialCreationOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Signal.JSValue()
	out.Set("signal", value0)
	value1 := _this.Password.JSValue()
	out.Set("password", value1)
	value2 := _this.Federated.JSValue()
	out.Set("federated", value2)
	value3 := _this.PublicKey.JSValue()
	out.Set("publicKey", value3)
	return out
}

// CredentialCreationOptionsFromJS is allocating a new
// CredentialCreationOptions object and copy all values from
// input javascript object
func CredentialCreationOptionsFromJS(value js.Wrapper) *CredentialCreationOptions {
	input := value.JSValue()
	var out CredentialCreationOptions
	var (
		value0 *domcore.AbortSignal                // javascript: AbortSignal {signal Signal signal}
		value1 *Union                              // javascript: Union {password Password password}
		value2 *FederatedCredentialInit            // javascript: FederatedCredentialInit {federated Federated federated}
		value3 *PublicKeyCredentialCreationOptions // javascript: PublicKeyCredentialCreationOptions {publicKey PublicKey publicKey}
	)
	value0 = domcore.AbortSignalFromJS(input.Get("signal"))
	out.Signal = value0
	value1 = UnionFromJS(input.Get("password"))
	out.Password = value1
	value2 = FederatedCredentialInitFromJS(input.Get("federated"))
	out.Federated = value2
	value3 = PublicKeyCredentialCreationOptionsFromJS(input.Get("publicKey"))
	out.PublicKey = value3
	return &out
}

// dictionary: CredentialData
type CredentialData struct {
	Id string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *CredentialData) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Id
	out.Set("id", value0)
	return out
}

// CredentialDataFromJS is allocating a new
// CredentialData object and copy all values from
// input javascript object
func CredentialDataFromJS(value js.Wrapper) *CredentialData {
	input := value.JSValue()
	var out CredentialData
	var (
		value0 string // javascript: USVString {id Id id}
	)
	value0 = (input.Get("id")).String()
	out.Id = value0
	return &out
}

// dictionary: CredentialRequestOptions
type CredentialRequestOptions struct {
	Mediation CredentialMediationRequirement
	Signal    *domcore.AbortSignal
	Password  bool
	Federated *FederatedCredentialRequestOptions
	PublicKey *PublicKeyCredentialRequestOptions
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *CredentialRequestOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Mediation.JSValue()
	out.Set("mediation", value0)
	value1 := _this.Signal.JSValue()
	out.Set("signal", value1)
	value2 := _this.Password
	out.Set("password", value2)
	value3 := _this.Federated.JSValue()
	out.Set("federated", value3)
	value4 := _this.PublicKey.JSValue()
	out.Set("publicKey", value4)
	return out
}

// CredentialRequestOptionsFromJS is allocating a new
// CredentialRequestOptions object and copy all values from
// input javascript object
func CredentialRequestOptionsFromJS(value js.Wrapper) *CredentialRequestOptions {
	input := value.JSValue()
	var out CredentialRequestOptions
	var (
		value0 CredentialMediationRequirement     // javascript: CredentialMediationRequirement {mediation Mediation mediation}
		value1 *domcore.AbortSignal               // javascript: AbortSignal {signal Signal signal}
		value2 bool                               // javascript: boolean {password Password password}
		value3 *FederatedCredentialRequestOptions // javascript: FederatedCredentialRequestOptions {federated Federated federated}
		value4 *PublicKeyCredentialRequestOptions // javascript: PublicKeyCredentialRequestOptions {publicKey PublicKey publicKey}
	)
	value0 = CredentialMediationRequirementFromJS(input.Get("mediation"))
	out.Mediation = value0
	value1 = domcore.AbortSignalFromJS(input.Get("signal"))
	out.Signal = value1
	value2 = (input.Get("password")).Bool()
	out.Password = value2
	value3 = FederatedCredentialRequestOptionsFromJS(input.Get("federated"))
	out.Federated = value3
	value4 = PublicKeyCredentialRequestOptionsFromJS(input.Get("publicKey"))
	out.PublicKey = value4
	return &out
}

// dictionary: FederatedCredentialInit
type FederatedCredentialInit struct {
	Id       string
	Name     string
	IconURL  string
	Origin   string
	Provider string
	Protocol string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *FederatedCredentialInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Id
	out.Set("id", value0)
	value1 := _this.Name
	out.Set("name", value1)
	value2 := _this.IconURL
	out.Set("iconURL", value2)
	value3 := _this.Origin
	out.Set("origin", value3)
	value4 := _this.Provider
	out.Set("provider", value4)
	value5 := _this.Protocol
	out.Set("protocol", value5)
	return out
}

// FederatedCredentialInitFromJS is allocating a new
// FederatedCredentialInit object and copy all values from
// input javascript object
func FederatedCredentialInitFromJS(value js.Wrapper) *FederatedCredentialInit {
	input := value.JSValue()
	var out FederatedCredentialInit
	var (
		value0 string // javascript: USVString {id Id id}
		value1 string // javascript: USVString {name Name name}
		value2 string // javascript: USVString {iconURL IconURL iconURL}
		value3 string // javascript: USVString {origin Origin origin}
		value4 string // javascript: USVString {provider Provider provider}
		value5 string // javascript: DOMString {protocol Protocol protocol}
	)
	value0 = (input.Get("id")).String()
	out.Id = value0
	value1 = (input.Get("name")).String()
	out.Name = value1
	value2 = (input.Get("iconURL")).String()
	out.IconURL = value2
	value3 = (input.Get("origin")).String()
	out.Origin = value3
	value4 = (input.Get("provider")).String()
	out.Provider = value4
	value5 = (input.Get("protocol")).String()
	out.Protocol = value5
	return &out
}

// dictionary: FederatedCredentialRequestOptions
type FederatedCredentialRequestOptions struct {
	Providers []string
	Protocols []string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *FederatedCredentialRequestOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.Providers))
	for __idx0, __seq_in0 := range _this.Providers {
		__seq_out0 := __seq_in0
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("providers", value0)
	value1 := js.Global().Get("Array").New(len(_this.Protocols))
	for __idx1, __seq_in1 := range _this.Protocols {
		__seq_out1 := __seq_in1
		value1.SetIndex(__idx1, __seq_out1)
	}
	out.Set("protocols", value1)
	return out
}

// FederatedCredentialRequestOptionsFromJS is allocating a new
// FederatedCredentialRequestOptions object and copy all values from
// input javascript object
func FederatedCredentialRequestOptionsFromJS(value js.Wrapper) *FederatedCredentialRequestOptions {
	input := value.JSValue()
	var out FederatedCredentialRequestOptions
	var (
		value0 []string // javascript: sequence<USVString> {providers Providers providers}
		value1 []string // javascript: sequence<DOMString> {protocols Protocols protocols}
	)
	__length0 := input.Get("providers").Length()
	__array0 := make([]string, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 string
		__seq_in0 := input.Get("providers").Index(__idx0)
		__seq_out0 = (__seq_in0).String()
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.Providers = value0
	__length1 := input.Get("protocols").Length()
	__array1 := make([]string, __length1, __length1)
	for __idx1 := 0; __idx1 < __length1; __idx1++ {
		var __seq_out1 string
		__seq_in1 := input.Get("protocols").Index(__idx1)
		__seq_out1 = (__seq_in1).String()
		__array1[__idx1] = __seq_out1
	}
	value1 = __array1
	out.Protocols = value1
	return &out
}

// dictionary: PasswordCredentialData
type PasswordCredentialData struct {
	Id       string
	Name     string
	IconURL  string
	Origin   string
	Password string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PasswordCredentialData) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Id
	out.Set("id", value0)
	value1 := _this.Name
	out.Set("name", value1)
	value2 := _this.IconURL
	out.Set("iconURL", value2)
	value3 := _this.Origin
	out.Set("origin", value3)
	value4 := _this.Password
	out.Set("password", value4)
	return out
}

// PasswordCredentialDataFromJS is allocating a new
// PasswordCredentialData object and copy all values from
// input javascript object
func PasswordCredentialDataFromJS(value js.Wrapper) *PasswordCredentialData {
	input := value.JSValue()
	var out PasswordCredentialData
	var (
		value0 string // javascript: USVString {id Id id}
		value1 string // javascript: USVString {name Name name}
		value2 string // javascript: USVString {iconURL IconURL iconURL}
		value3 string // javascript: USVString {origin Origin origin}
		value4 string // javascript: USVString {password Password password}
	)
	value0 = (input.Get("id")).String()
	out.Id = value0
	value1 = (input.Get("name")).String()
	out.Name = value1
	value2 = (input.Get("iconURL")).String()
	out.IconURL = value2
	value3 = (input.Get("origin")).String()
	out.Origin = value3
	value4 = (input.Get("password")).String()
	out.Password = value4
	return &out
}

// dictionary: PublicKeyCredentialCreationOptions
type PublicKeyCredentialCreationOptions struct {
	Rp                     *PublicKeyCredentialRpEntity
	User                   *PublicKeyCredentialUserEntity
	Challenge              *Union
	PubKeyCredParams       []*PublicKeyCredentialParameters
	Timeout                uint
	ExcludeCredentials     []*PublicKeyCredentialDescriptor
	AuthenticatorSelection *authentication.SelectionCriteria
	Attestation            authentication.AttestationConveyancePreference
	Extensions             *authentication.AuthenticationExtensionsClientInputs
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PublicKeyCredentialCreationOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Rp.JSValue()
	out.Set("rp", value0)
	value1 := _this.User.JSValue()
	out.Set("user", value1)
	value2 := _this.Challenge.JSValue()
	out.Set("challenge", value2)
	value3 := js.Global().Get("Array").New(len(_this.PubKeyCredParams))
	for __idx3, __seq_in3 := range _this.PubKeyCredParams {
		__seq_out3 := __seq_in3.JSValue()
		value3.SetIndex(__idx3, __seq_out3)
	}
	out.Set("pubKeyCredParams", value3)
	value4 := _this.Timeout
	out.Set("timeout", value4)
	value5 := js.Global().Get("Array").New(len(_this.ExcludeCredentials))
	for __idx5, __seq_in5 := range _this.ExcludeCredentials {
		__seq_out5 := __seq_in5.JSValue()
		value5.SetIndex(__idx5, __seq_out5)
	}
	out.Set("excludeCredentials", value5)
	value6 := _this.AuthenticatorSelection.JSValue()
	out.Set("authenticatorSelection", value6)
	value7 := _this.Attestation.JSValue()
	out.Set("attestation", value7)
	value8 := _this.Extensions.JSValue()
	out.Set("extensions", value8)
	return out
}

// PublicKeyCredentialCreationOptionsFromJS is allocating a new
// PublicKeyCredentialCreationOptions object and copy all values from
// input javascript object
func PublicKeyCredentialCreationOptionsFromJS(value js.Wrapper) *PublicKeyCredentialCreationOptions {
	input := value.JSValue()
	var out PublicKeyCredentialCreationOptions
	var (
		value0 *PublicKeyCredentialRpEntity                         // javascript: PublicKeyCredentialRpEntity {rp Rp rp}
		value1 *PublicKeyCredentialUserEntity                       // javascript: PublicKeyCredentialUserEntity {user User user}
		value2 *Union                                               // javascript: Union {challenge Challenge challenge}
		value3 []*PublicKeyCredentialParameters                     // javascript: sequence<PublicKeyCredentialParameters> {pubKeyCredParams PubKeyCredParams pubKeyCredParams}
		value4 uint                                                 // javascript: unsigned long {timeout Timeout timeout}
		value5 []*PublicKeyCredentialDescriptor                     // javascript: sequence<PublicKeyCredentialDescriptor> {excludeCredentials ExcludeCredentials excludeCredentials}
		value6 *authentication.SelectionCriteria                    // javascript: AuthenticatorSelectionCriteria {authenticatorSelection AuthenticatorSelection authenticatorSelection}
		value7 authentication.AttestationConveyancePreference       // javascript: AttestationConveyancePreference {attestation Attestation attestation}
		value8 *authentication.AuthenticationExtensionsClientInputs // javascript: AuthenticationExtensionsClientInputs {extensions Extensions extensions}
	)
	value0 = PublicKeyCredentialRpEntityFromJS(input.Get("rp"))
	out.Rp = value0
	value1 = PublicKeyCredentialUserEntityFromJS(input.Get("user"))
	out.User = value1
	value2 = UnionFromJS(input.Get("challenge"))
	out.Challenge = value2
	__length3 := input.Get("pubKeyCredParams").Length()
	__array3 := make([]*PublicKeyCredentialParameters, __length3, __length3)
	for __idx3 := 0; __idx3 < __length3; __idx3++ {
		var __seq_out3 *PublicKeyCredentialParameters
		__seq_in3 := input.Get("pubKeyCredParams").Index(__idx3)
		__seq_out3 = PublicKeyCredentialParametersFromJS(__seq_in3)
		__array3[__idx3] = __seq_out3
	}
	value3 = __array3
	out.PubKeyCredParams = value3
	value4 = (uint)((input.Get("timeout")).Int())
	out.Timeout = value4
	__length5 := input.Get("excludeCredentials").Length()
	__array5 := make([]*PublicKeyCredentialDescriptor, __length5, __length5)
	for __idx5 := 0; __idx5 < __length5; __idx5++ {
		var __seq_out5 *PublicKeyCredentialDescriptor
		__seq_in5 := input.Get("excludeCredentials").Index(__idx5)
		__seq_out5 = PublicKeyCredentialDescriptorFromJS(__seq_in5)
		__array5[__idx5] = __seq_out5
	}
	value5 = __array5
	out.ExcludeCredentials = value5
	value6 = authentication.SelectionCriteriaFromJS(input.Get("authenticatorSelection"))
	out.AuthenticatorSelection = value6
	value7 = authentication.AttestationConveyancePreferenceFromJS(input.Get("attestation"))
	out.Attestation = value7
	value8 = authentication.AuthenticationExtensionsClientInputsFromJS(input.Get("extensions"))
	out.Extensions = value8
	return &out
}

// dictionary: PublicKeyCredentialDescriptor
type PublicKeyCredentialDescriptor struct {
	Type       PublicKeyCredentialType
	Id         *Union
	Transports []authentication.Transport
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PublicKeyCredentialDescriptor) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Type.JSValue()
	out.Set("type", value0)
	value1 := _this.Id.JSValue()
	out.Set("id", value1)
	value2 := js.Global().Get("Array").New(len(_this.Transports))
	for __idx2, __seq_in2 := range _this.Transports {
		__seq_out2 := __seq_in2.JSValue()
		value2.SetIndex(__idx2, __seq_out2)
	}
	out.Set("transports", value2)
	return out
}

// PublicKeyCredentialDescriptorFromJS is allocating a new
// PublicKeyCredentialDescriptor object and copy all values from
// input javascript object
func PublicKeyCredentialDescriptorFromJS(value js.Wrapper) *PublicKeyCredentialDescriptor {
	input := value.JSValue()
	var out PublicKeyCredentialDescriptor
	var (
		value0 PublicKeyCredentialType    // javascript: PublicKeyCredentialType {type Type _type}
		value1 *Union                     // javascript: Union {id Id id}
		value2 []authentication.Transport // javascript: sequence<AuthenticatorTransport> {transports Transports transports}
	)
	value0 = PublicKeyCredentialTypeFromJS(input.Get("type"))
	out.Type = value0
	value1 = UnionFromJS(input.Get("id"))
	out.Id = value1
	__length2 := input.Get("transports").Length()
	__array2 := make([]authentication.Transport, __length2, __length2)
	for __idx2 := 0; __idx2 < __length2; __idx2++ {
		var __seq_out2 authentication.Transport
		__seq_in2 := input.Get("transports").Index(__idx2)
		__seq_out2 = authentication.TransportFromJS(__seq_in2)
		__array2[__idx2] = __seq_out2
	}
	value2 = __array2
	out.Transports = value2
	return &out
}

// dictionary: PublicKeyCredentialEntity
type PublicKeyCredentialEntity struct {
	Name string
	Icon string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PublicKeyCredentialEntity) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Name
	out.Set("name", value0)
	value1 := _this.Icon
	out.Set("icon", value1)
	return out
}

// PublicKeyCredentialEntityFromJS is allocating a new
// PublicKeyCredentialEntity object and copy all values from
// input javascript object
func PublicKeyCredentialEntityFromJS(value js.Wrapper) *PublicKeyCredentialEntity {
	input := value.JSValue()
	var out PublicKeyCredentialEntity
	var (
		value0 string // javascript: DOMString {name Name name}
		value1 string // javascript: USVString {icon Icon icon}
	)
	value0 = (input.Get("name")).String()
	out.Name = value0
	value1 = (input.Get("icon")).String()
	out.Icon = value1
	return &out
}

// dictionary: PublicKeyCredentialParameters
type PublicKeyCredentialParameters struct {
	Type PublicKeyCredentialType
	Alg  int
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PublicKeyCredentialParameters) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Type.JSValue()
	out.Set("type", value0)
	value1 := _this.Alg
	out.Set("alg", value1)
	return out
}

// PublicKeyCredentialParametersFromJS is allocating a new
// PublicKeyCredentialParameters object and copy all values from
// input javascript object
func PublicKeyCredentialParametersFromJS(value js.Wrapper) *PublicKeyCredentialParameters {
	input := value.JSValue()
	var out PublicKeyCredentialParameters
	var (
		value0 PublicKeyCredentialType // javascript: PublicKeyCredentialType {type Type _type}
		value1 int                     // javascript: long {alg Alg alg}
	)
	value0 = PublicKeyCredentialTypeFromJS(input.Get("type"))
	out.Type = value0
	value1 = (input.Get("alg")).Int()
	out.Alg = value1
	return &out
}

// dictionary: PublicKeyCredentialRequestOptions
type PublicKeyCredentialRequestOptions struct {
	Challenge        *Union
	Timeout          uint
	RpId             string
	AllowCredentials []*PublicKeyCredentialDescriptor
	UserVerification authentication.UserVerificationRequirement
	Extensions       *authentication.AuthenticationExtensionsClientInputs
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PublicKeyCredentialRequestOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Challenge.JSValue()
	out.Set("challenge", value0)
	value1 := _this.Timeout
	out.Set("timeout", value1)
	value2 := _this.RpId
	out.Set("rpId", value2)
	value3 := js.Global().Get("Array").New(len(_this.AllowCredentials))
	for __idx3, __seq_in3 := range _this.AllowCredentials {
		__seq_out3 := __seq_in3.JSValue()
		value3.SetIndex(__idx3, __seq_out3)
	}
	out.Set("allowCredentials", value3)
	value4 := _this.UserVerification.JSValue()
	out.Set("userVerification", value4)
	value5 := _this.Extensions.JSValue()
	out.Set("extensions", value5)
	return out
}

// PublicKeyCredentialRequestOptionsFromJS is allocating a new
// PublicKeyCredentialRequestOptions object and copy all values from
// input javascript object
func PublicKeyCredentialRequestOptionsFromJS(value js.Wrapper) *PublicKeyCredentialRequestOptions {
	input := value.JSValue()
	var out PublicKeyCredentialRequestOptions
	var (
		value0 *Union                                               // javascript: Union {challenge Challenge challenge}
		value1 uint                                                 // javascript: unsigned long {timeout Timeout timeout}
		value2 string                                               // javascript: USVString {rpId RpId rpId}
		value3 []*PublicKeyCredentialDescriptor                     // javascript: sequence<PublicKeyCredentialDescriptor> {allowCredentials AllowCredentials allowCredentials}
		value4 authentication.UserVerificationRequirement           // javascript: UserVerificationRequirement {userVerification UserVerification userVerification}
		value5 *authentication.AuthenticationExtensionsClientInputs // javascript: AuthenticationExtensionsClientInputs {extensions Extensions extensions}
	)
	value0 = UnionFromJS(input.Get("challenge"))
	out.Challenge = value0
	value1 = (uint)((input.Get("timeout")).Int())
	out.Timeout = value1
	value2 = (input.Get("rpId")).String()
	out.RpId = value2
	__length3 := input.Get("allowCredentials").Length()
	__array3 := make([]*PublicKeyCredentialDescriptor, __length3, __length3)
	for __idx3 := 0; __idx3 < __length3; __idx3++ {
		var __seq_out3 *PublicKeyCredentialDescriptor
		__seq_in3 := input.Get("allowCredentials").Index(__idx3)
		__seq_out3 = PublicKeyCredentialDescriptorFromJS(__seq_in3)
		__array3[__idx3] = __seq_out3
	}
	value3 = __array3
	out.AllowCredentials = value3
	value4 = authentication.UserVerificationRequirementFromJS(input.Get("userVerification"))
	out.UserVerification = value4
	value5 = authentication.AuthenticationExtensionsClientInputsFromJS(input.Get("extensions"))
	out.Extensions = value5
	return &out
}

// dictionary: PublicKeyCredentialRpEntity
type PublicKeyCredentialRpEntity struct {
	Name string
	Icon string
	Id   string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PublicKeyCredentialRpEntity) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Name
	out.Set("name", value0)
	value1 := _this.Icon
	out.Set("icon", value1)
	value2 := _this.Id
	out.Set("id", value2)
	return out
}

// PublicKeyCredentialRpEntityFromJS is allocating a new
// PublicKeyCredentialRpEntity object and copy all values from
// input javascript object
func PublicKeyCredentialRpEntityFromJS(value js.Wrapper) *PublicKeyCredentialRpEntity {
	input := value.JSValue()
	var out PublicKeyCredentialRpEntity
	var (
		value0 string // javascript: DOMString {name Name name}
		value1 string // javascript: USVString {icon Icon icon}
		value2 string // javascript: DOMString {id Id id}
	)
	value0 = (input.Get("name")).String()
	out.Name = value0
	value1 = (input.Get("icon")).String()
	out.Icon = value1
	value2 = (input.Get("id")).String()
	out.Id = value2
	return &out
}

// dictionary: PublicKeyCredentialUserEntity
type PublicKeyCredentialUserEntity struct {
	Name        string
	Icon        string
	Id          *Union
	DisplayName string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PublicKeyCredentialUserEntity) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Name
	out.Set("name", value0)
	value1 := _this.Icon
	out.Set("icon", value1)
	value2 := _this.Id.JSValue()
	out.Set("id", value2)
	value3 := _this.DisplayName
	out.Set("displayName", value3)
	return out
}

// PublicKeyCredentialUserEntityFromJS is allocating a new
// PublicKeyCredentialUserEntity object and copy all values from
// input javascript object
func PublicKeyCredentialUserEntityFromJS(value js.Wrapper) *PublicKeyCredentialUserEntity {
	input := value.JSValue()
	var out PublicKeyCredentialUserEntity
	var (
		value0 string // javascript: DOMString {name Name name}
		value1 string // javascript: USVString {icon Icon icon}
		value2 *Union // javascript: Union {id Id id}
		value3 string // javascript: DOMString {displayName DisplayName displayName}
	)
	value0 = (input.Get("name")).String()
	out.Name = value0
	value1 = (input.Get("icon")).String()
	out.Icon = value1
	value2 = UnionFromJS(input.Get("id"))
	out.Id = value2
	value3 = (input.Get("displayName")).String()
	out.DisplayName = value3
	return &out
}

// class: Credential
type Credential struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *Credential) JSValue() js.Value {
	return _this.Value_JS
}

// CredentialFromJS is casting a js.Wrapper into Credential.
func CredentialFromJS(value js.Wrapper) *Credential {
	input := value.JSValue()
	if typ := input.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Credential{}
	ret.Value_JS = input
	return ret
}

// Id returning attribute 'id' with
// type string (idl: USVString).
func (_this *Credential) Id() string {
	var ret string
	value := _this.Value_JS.Get("id")
	ret = (value).String()
	return ret
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *Credential) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// class: CredentialsContainer
type CredentialsContainer struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *CredentialsContainer) JSValue() js.Value {
	return _this.Value_JS
}

// CredentialsContainerFromJS is casting a js.Wrapper into CredentialsContainer.
func CredentialsContainerFromJS(value js.Wrapper) *CredentialsContainer {
	input := value.JSValue()
	if typ := input.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &CredentialsContainer{}
	ret.Value_JS = input
	return ret
}

func (_this *CredentialsContainer) Get(options *CredentialRequestOptions) (_result *PromiseNilCredential) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("get", _args[0:_end]...)
	var (
		_converted *PromiseNilCredential // javascript: Promise _what_return_name
	)
	_converted = PromiseNilCredentialFromJS(_returned)
	_result = _converted
	return
}

func (_this *CredentialsContainer) Store(credential *Credential) (_result *PromiseCredential) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := credential.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("store", _args[0:_end]...)
	var (
		_converted *PromiseCredential // javascript: Promise _what_return_name
	)
	_converted = PromiseCredentialFromJS(_returned)
	_result = _converted
	return
}

func (_this *CredentialsContainer) Create(options *CredentialCreationOptions) (_result *PromiseNilCredential) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("create", _args[0:_end]...)
	var (
		_converted *PromiseNilCredential // javascript: Promise _what_return_name
	)
	_converted = PromiseNilCredentialFromJS(_returned)
	_result = _converted
	return
}

func (_this *CredentialsContainer) PreventSilentAccess() (_result *javascript.PromiseVoid) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("preventSilentAccess", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

// class: FederatedCredential
type FederatedCredential struct {
	Credential
}

// FederatedCredentialFromJS is casting a js.Wrapper into FederatedCredential.
func FederatedCredentialFromJS(value js.Wrapper) *FederatedCredential {
	input := value.JSValue()
	if typ := input.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FederatedCredential{}
	ret.Value_JS = input
	return ret
}

func NewFederatedCredential(data *FederatedCredentialInit) (_result *FederatedCredential) {
	_klass := js.Global().Get("FederatedCredential")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data.JSValue()
	_args[0] = _p0
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *FederatedCredential // javascript: FederatedCredential _what_return_name
	)
	_converted = FederatedCredentialFromJS(_returned)
	_result = _converted
	return
}

// Provider returning attribute 'provider' with
// type string (idl: USVString).
func (_this *FederatedCredential) Provider() string {
	var ret string
	value := _this.Value_JS.Get("provider")
	ret = (value).String()
	return ret
}

// Protocol returning attribute 'protocol' with
// type string (idl: DOMString).
func (_this *FederatedCredential) Protocol() *string {
	var ret *string
	value := _this.Value_JS.Get("protocol")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// Name returning attribute 'name' with
// type string (idl: USVString).
func (_this *FederatedCredential) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// IconURL returning attribute 'iconURL' with
// type string (idl: USVString).
func (_this *FederatedCredential) IconURL() string {
	var ret string
	value := _this.Value_JS.Get("iconURL")
	ret = (value).String()
	return ret
}

// class: PasswordCredential
type PasswordCredential struct {
	Credential
}

// PasswordCredentialFromJS is casting a js.Wrapper into PasswordCredential.
func PasswordCredentialFromJS(value js.Wrapper) *PasswordCredential {
	input := value.JSValue()
	if typ := input.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PasswordCredential{}
	ret.Value_JS = input
	return ret
}

func NewPasswordCredential(data *PasswordCredentialData) (_result *PasswordCredential) {
	_klass := js.Global().Get("PasswordCredential")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data.JSValue()
	_args[0] = _p0
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *PasswordCredential // javascript: PasswordCredential _what_return_name
	)
	_converted = PasswordCredentialFromJS(_returned)
	_result = _converted
	return
}

// Password returning attribute 'password' with
// type string (idl: USVString).
func (_this *PasswordCredential) Password() string {
	var ret string
	value := _this.Value_JS.Get("password")
	ret = (value).String()
	return ret
}

// Name returning attribute 'name' with
// type string (idl: USVString).
func (_this *PasswordCredential) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// IconURL returning attribute 'iconURL' with
// type string (idl: USVString).
func (_this *PasswordCredential) IconURL() string {
	var ret string
	value := _this.Value_JS.Get("iconURL")
	ret = (value).String()
	return ret
}

// class: Promise
type PromiseCredential struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *PromiseCredential) JSValue() js.Value {
	return _this.Value_JS
}

// PromiseCredentialFromJS is casting a js.Wrapper into PromiseCredential.
func PromiseCredentialFromJS(value js.Wrapper) *PromiseCredential {
	input := value.JSValue()
	if typ := input.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseCredential{}
	ret.Value_JS = input
	return ret
}

func (_this *PromiseCredential) Then(onFulfilled *PromiseCredentialOnFulfilled, onRejected *PromiseCredentialOnRejected) (_result *PromiseCredential) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseCredential // javascript: Promise _what_return_name
	)
	_converted = PromiseCredentialFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseCredential) Catch(onRejected *PromiseCredentialOnRejected) (_result *PromiseCredential) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseCredential // javascript: Promise _what_return_name
	)
	_converted = PromiseCredentialFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseCredential) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseCredential) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseCredential // javascript: Promise _what_return_name
	)
	_converted = PromiseCredentialFromJS(_returned)
	_result = _converted
	return
}

// class: Promise
type PromiseNilCredential struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *PromiseNilCredential) JSValue() js.Value {
	return _this.Value_JS
}

// PromiseNilCredentialFromJS is casting a js.Wrapper into PromiseNilCredential.
func PromiseNilCredentialFromJS(value js.Wrapper) *PromiseNilCredential {
	input := value.JSValue()
	if typ := input.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseNilCredential{}
	ret.Value_JS = input
	return ret
}

func (_this *PromiseNilCredential) Then(onFulfilled *PromiseNilCredentialOnFulfilled, onRejected *PromiseNilCredentialOnRejected) (_result *PromiseNilCredential) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseNilCredential // javascript: Promise _what_return_name
	)
	_converted = PromiseNilCredentialFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseNilCredential) Catch(onRejected *PromiseNilCredentialOnRejected) (_result *PromiseNilCredential) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseNilCredential // javascript: Promise _what_return_name
	)
	_converted = PromiseNilCredentialFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseNilCredential) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseNilCredential) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseNilCredential // javascript: Promise _what_return_name
	)
	_converted = PromiseNilCredentialFromJS(_returned)
	_result = _converted
	return
}

// class: PublicKeyCredential
type PublicKeyCredential struct {
	Credential
}

// PublicKeyCredentialFromJS is casting a js.Wrapper into PublicKeyCredential.
func PublicKeyCredentialFromJS(value js.Wrapper) *PublicKeyCredential {
	input := value.JSValue()
	if typ := input.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PublicKeyCredential{}
	ret.Value_JS = input
	return ret
}

func IsUserVerifyingPlatformAuthenticatorAvailable() (_result *javascript.PromiseBool) {
	_klass := js.Global().Get("PublicKeyCredential")
	_method := _klass.Get("isUserVerifyingPlatformAuthenticatorAvailable")
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *javascript.PromiseBool // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseBoolFromJS(_returned)
	_result = _converted
	return
}

// RawId returning attribute 'rawId' with
// type javascript.ArrayBuffer (idl: ArrayBuffer).
func (_this *PublicKeyCredential) RawId() *javascript.ArrayBuffer {
	var ret *javascript.ArrayBuffer
	value := _this.Value_JS.Get("rawId")
	ret = javascript.ArrayBufferFromJS(value)
	return ret
}

// Response returning attribute 'response' with
// type authentication.Response (idl: AuthenticatorResponse).
func (_this *PublicKeyCredential) Response() *authentication.Response {
	var ret *authentication.Response
	value := _this.Value_JS.Get("response")
	ret = authentication.ResponseFromJS(value)
	return ret
}

func (_this *PublicKeyCredential) GetClientExtensionResults() (_result *authentication.AuthenticationExtensionsClientOutputs) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getClientExtensionResults", _args[0:_end]...)
	var (
		_converted *authentication.AuthenticationExtensionsClientOutputs // javascript: AuthenticationExtensionsClientOutputs _what_return_name
	)
	_converted = authentication.AuthenticationExtensionsClientOutputsFromJS(_returned)
	_result = _converted
	return
}
