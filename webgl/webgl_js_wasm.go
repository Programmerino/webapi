// Code generated by webidlgenerator. DO NOT EDIT.

package webgl

import "syscall/js"

import (
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// domcore.Event
// javascript.Object

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: WebGLPowerPreference
type WebGLPowerPreference int

const (
	DefaultWebGLPowerPreference WebGLPowerPreference = iota
	LowPowerWebGLPowerPreference
	HighPerformanceWebGLPowerPreference
)

var webGLPowerPreferenceToWasmTable = []string{
	"default", "low-power", "high-performance",
}

var webGLPowerPreferenceFromWasmTable = map[string]WebGLPowerPreference{
	"default": DefaultWebGLPowerPreference, "low-power": LowPowerWebGLPowerPreference, "high-performance": HighPerformanceWebGLPowerPreference,
}

// JSValue is converting this enum into a java object
func (this *WebGLPowerPreference) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this WebGLPowerPreference) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(webGLPowerPreferenceToWasmTable) {
		return webGLPowerPreferenceToWasmTable[idx]
	}
	panic("unknown input value")
}

// WebGLPowerPreferenceFromJS is converting a javascript value into
// a WebGLPowerPreference enum value.
func WebGLPowerPreferenceFromJS(value js.Value) WebGLPowerPreference {
	key := value.String()
	conv, ok := webGLPowerPreferenceFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// dictionary: WebGLContextAttributes
type WebGLContextAttributes struct {
	Alpha                        bool
	Depth                        bool
	Stencil                      bool
	Antialias                    bool
	PremultipliedAlpha           bool
	PreserveDrawingBuffer        bool
	PowerPreference              WebGLPowerPreference
	FailIfMajorPerformanceCaveat bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *WebGLContextAttributes) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Alpha
	out.Set("alpha", value0)
	value1 := _this.Depth
	out.Set("depth", value1)
	value2 := _this.Stencil
	out.Set("stencil", value2)
	value3 := _this.Antialias
	out.Set("antialias", value3)
	value4 := _this.PremultipliedAlpha
	out.Set("premultipliedAlpha", value4)
	value5 := _this.PreserveDrawingBuffer
	out.Set("preserveDrawingBuffer", value5)
	value6 := _this.PowerPreference.JSValue()
	out.Set("powerPreference", value6)
	value7 := _this.FailIfMajorPerformanceCaveat
	out.Set("failIfMajorPerformanceCaveat", value7)
	return out
}

// WebGLContextAttributesFromJS is allocating a new
// WebGLContextAttributes object and copy all values from
// input javascript object
func WebGLContextAttributesFromJS(value js.Wrapper) *WebGLContextAttributes {
	input := value.JSValue()
	var out WebGLContextAttributes
	var (
		out0 bool                 // javascript: boolean {alpha Alpha alpha}
		out1 bool                 // javascript: boolean {depth Depth depth}
		out2 bool                 // javascript: boolean {stencil Stencil stencil}
		out3 bool                 // javascript: boolean {antialias Antialias antialias}
		out4 bool                 // javascript: boolean {premultipliedAlpha PremultipliedAlpha premultipliedAlpha}
		out5 bool                 // javascript: boolean {preserveDrawingBuffer PreserveDrawingBuffer preserveDrawingBuffer}
		out6 WebGLPowerPreference // javascript: WebGLPowerPreference {powerPreference PowerPreference powerPreference}
		out7 bool                 // javascript: boolean {failIfMajorPerformanceCaveat FailIfMajorPerformanceCaveat failIfMajorPerformanceCaveat}
	)
	out0 = (input.Get("alpha")).Bool()
	out.Alpha = out0
	out1 = (input.Get("depth")).Bool()
	out.Depth = out1
	out2 = (input.Get("stencil")).Bool()
	out.Stencil = out2
	out3 = (input.Get("antialias")).Bool()
	out.Antialias = out3
	out4 = (input.Get("premultipliedAlpha")).Bool()
	out.PremultipliedAlpha = out4
	out5 = (input.Get("preserveDrawingBuffer")).Bool()
	out.PreserveDrawingBuffer = out5
	out6 = WebGLPowerPreferenceFromJS(input.Get("powerPreference"))
	out.PowerPreference = out6
	out7 = (input.Get("failIfMajorPerformanceCaveat")).Bool()
	out.FailIfMajorPerformanceCaveat = out7
	return &out
}

// dictionary: WebGLContextEventInit
type WebGLContextEventInit struct {
	StatusMessage string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *WebGLContextEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.StatusMessage
	out.Set("statusMessage", value0)
	return out
}

// WebGLContextEventInitFromJS is allocating a new
// WebGLContextEventInit object and copy all values from
// input javascript object
func WebGLContextEventInitFromJS(value js.Wrapper) *WebGLContextEventInit {
	input := value.JSValue()
	var out WebGLContextEventInit
	var (
		out0 string // javascript: DOMString {statusMessage StatusMessage statusMessage}
	)
	out0 = (input.Get("statusMessage")).String()
	out.StatusMessage = out0
	return &out
}

// interface: WebGLObject
type WebGLObject struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *WebGLObject) JSValue() js.Value {
	return _this.Value_JS
}

// WebGLObjectFromJS is casting a js.Wrapper into WebGLObject.
func WebGLObjectFromJS(value js.Wrapper) *WebGLObject {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLObject{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLBuffer
type WebGLBuffer struct {
	WebGLObject
}

// WebGLBufferFromJS is casting a js.Wrapper into WebGLBuffer.
func WebGLBufferFromJS(value js.Wrapper) *WebGLBuffer {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLBuffer{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLFramebuffer
type WebGLFramebuffer struct {
	WebGLObject
}

// WebGLFramebufferFromJS is casting a js.Wrapper into WebGLFramebuffer.
func WebGLFramebufferFromJS(value js.Wrapper) *WebGLFramebuffer {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLFramebuffer{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLProgram
type WebGLProgram struct {
	WebGLObject
}

// WebGLProgramFromJS is casting a js.Wrapper into WebGLProgram.
func WebGLProgramFromJS(value js.Wrapper) *WebGLProgram {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLProgram{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLRenderbuffer
type WebGLRenderbuffer struct {
	WebGLObject
}

// WebGLRenderbufferFromJS is casting a js.Wrapper into WebGLRenderbuffer.
func WebGLRenderbufferFromJS(value js.Wrapper) *WebGLRenderbuffer {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLRenderbuffer{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLShader
type WebGLShader struct {
	WebGLObject
}

// WebGLShaderFromJS is casting a js.Wrapper into WebGLShader.
func WebGLShaderFromJS(value js.Wrapper) *WebGLShader {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLShader{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLTexture
type WebGLTexture struct {
	WebGLObject
}

// WebGLTextureFromJS is casting a js.Wrapper into WebGLTexture.
func WebGLTextureFromJS(value js.Wrapper) *WebGLTexture {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLTexture{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLUniformLocation
type WebGLUniformLocation struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *WebGLUniformLocation) JSValue() js.Value {
	return _this.Value_JS
}

// WebGLUniformLocationFromJS is casting a js.Wrapper into WebGLUniformLocation.
func WebGLUniformLocationFromJS(value js.Wrapper) *WebGLUniformLocation {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLUniformLocation{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLActiveInfo
type WebGLActiveInfo struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *WebGLActiveInfo) JSValue() js.Value {
	return _this.Value_JS
}

// WebGLActiveInfoFromJS is casting a js.Wrapper into WebGLActiveInfo.
func WebGLActiveInfoFromJS(value js.Wrapper) *WebGLActiveInfo {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLActiveInfo{}
	ret.Value_JS = input
	return ret
}

// Size returning attribute 'size' with
// type int (idl: long).
func (_this *WebGLActiveInfo) Size() int {
	var ret int
	value := _this.Value_JS.Get("size")
	ret = (value).Int()
	return ret
}

// Type returning attribute 'type' with
// type uint (idl: unsigned long).
func (_this *WebGLActiveInfo) Type() uint {
	var ret uint
	value := _this.Value_JS.Get("type")
	ret = (uint)((value).Int())
	return ret
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *WebGLActiveInfo) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// interface: WebGLShaderPrecisionFormat
type WebGLShaderPrecisionFormat struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *WebGLShaderPrecisionFormat) JSValue() js.Value {
	return _this.Value_JS
}

// WebGLShaderPrecisionFormatFromJS is casting a js.Wrapper into WebGLShaderPrecisionFormat.
func WebGLShaderPrecisionFormatFromJS(value js.Wrapper) *WebGLShaderPrecisionFormat {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLShaderPrecisionFormat{}
	ret.Value_JS = input
	return ret
}

// RangeMin returning attribute 'rangeMin' with
// type int (idl: long).
func (_this *WebGLShaderPrecisionFormat) RangeMin() int {
	var ret int
	value := _this.Value_JS.Get("rangeMin")
	ret = (value).Int()
	return ret
}

// RangeMax returning attribute 'rangeMax' with
// type int (idl: long).
func (_this *WebGLShaderPrecisionFormat) RangeMax() int {
	var ret int
	value := _this.Value_JS.Get("rangeMax")
	ret = (value).Int()
	return ret
}

// Precision returning attribute 'precision' with
// type int (idl: long).
func (_this *WebGLShaderPrecisionFormat) Precision() int {
	var ret int
	value := _this.Value_JS.Get("precision")
	ret = (value).Int()
	return ret
}

// interface: WebGLRenderingContext
type WebGLRenderingContext struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *WebGLRenderingContext) JSValue() js.Value {
	return _this.Value_JS
}

// WebGLRenderingContextFromJS is casting a js.Wrapper into WebGLRenderingContext.
func WebGLRenderingContextFromJS(value js.Wrapper) *WebGLRenderingContext {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLRenderingContext{}
	ret.Value_JS = input
	return ret
}

const DEPTHBUFFERBIT_WebGLRenderingContext uint = 0x00000100
const STENCILBUFFERBIT_WebGLRenderingContext uint = 0x00000400
const COLORBUFFERBIT_WebGLRenderingContext uint = 0x00004000
const POINTS_WebGLRenderingContext uint = 0x0000
const LINES_WebGLRenderingContext uint = 0x0001
const LINELOOP_WebGLRenderingContext uint = 0x0002
const LINESTRIP_WebGLRenderingContext uint = 0x0003
const TRIANGLES_WebGLRenderingContext uint = 0x0004
const TRIANGLESTRIP_WebGLRenderingContext uint = 0x0005
const TRIANGLEFAN_WebGLRenderingContext uint = 0x0006
const ZERO_WebGLRenderingContext uint = 0
const ONE_WebGLRenderingContext uint = 1
const SRCCOLOR_WebGLRenderingContext uint = 0x0300
const ONEMINUSSRCCOLOR_WebGLRenderingContext uint = 0x0301
const SRCALPHA_WebGLRenderingContext uint = 0x0302
const ONEMINUSSRCALPHA_WebGLRenderingContext uint = 0x0303
const DSTALPHA_WebGLRenderingContext uint = 0x0304
const ONEMINUSDSTALPHA_WebGLRenderingContext uint = 0x0305
const DSTCOLOR_WebGLRenderingContext uint = 0x0306
const ONEMINUSDSTCOLOR_WebGLRenderingContext uint = 0x0307
const SRCALPHASATURATE_WebGLRenderingContext uint = 0x0308
const FUNCADD_WebGLRenderingContext uint = 0x8006
const BLENDEQUATION_WebGLRenderingContext uint = 0x8009
const BLENDEQUATIONRGB_WebGLRenderingContext uint = 0x8009
const BLENDEQUATIONALPHA_WebGLRenderingContext uint = 0x883D
const FUNCSUBTRACT_WebGLRenderingContext uint = 0x800A
const FUNCREVERSESUBTRACT_WebGLRenderingContext uint = 0x800B
const BLENDDSTRGB_WebGLRenderingContext uint = 0x80C8
const BLENDSRCRGB_WebGLRenderingContext uint = 0x80C9
const BLENDDSTALPHA_WebGLRenderingContext uint = 0x80CA
const BLENDSRCALPHA_WebGLRenderingContext uint = 0x80CB
const CONSTANTCOLOR_WebGLRenderingContext uint = 0x8001
const ONEMINUSCONSTANTCOLOR_WebGLRenderingContext uint = 0x8002
const CONSTANTALPHA_WebGLRenderingContext uint = 0x8003
const ONEMINUSCONSTANTALPHA_WebGLRenderingContext uint = 0x8004
const BLENDCOLOR_WebGLRenderingContext uint = 0x8005
const ARRAYBUFFER_WebGLRenderingContext uint = 0x8892
const ELEMENTARRAYBUFFER_WebGLRenderingContext uint = 0x8893
const ARRAYBUFFERBINDING_WebGLRenderingContext uint = 0x8894
const ELEMENTARRAYBUFFERBINDING_WebGLRenderingContext uint = 0x8895
const STREAMDRAW_WebGLRenderingContext uint = 0x88E0
const STATICDRAW_WebGLRenderingContext uint = 0x88E4
const DYNAMICDRAW_WebGLRenderingContext uint = 0x88E8
const BUFFERSIZE_WebGLRenderingContext uint = 0x8764
const BUFFERUSAGE_WebGLRenderingContext uint = 0x8765
const CURRENTVERTEXATTRIB_WebGLRenderingContext uint = 0x8626
const FRONT_WebGLRenderingContext uint = 0x0404
const BACK_WebGLRenderingContext uint = 0x0405
const FRONTANDBACK_WebGLRenderingContext uint = 0x0408
const CULLFACE_WebGLRenderingContext uint = 0x0B44
const BLEND_WebGLRenderingContext uint = 0x0BE2
const DITHER_WebGLRenderingContext uint = 0x0BD0
const STENCILTEST_WebGLRenderingContext uint = 0x0B90
const DEPTHTEST_WebGLRenderingContext uint = 0x0B71
const SCISSORTEST_WebGLRenderingContext uint = 0x0C11
const POLYGONOFFSETFILL_WebGLRenderingContext uint = 0x8037
const SAMPLEALPHATOCOVERAGE_WebGLRenderingContext uint = 0x809E
const SAMPLECOVERAGE_WebGLRenderingContext uint = 0x80A0
const NOERROR_WebGLRenderingContext uint = 0
const INVALIDENUM_WebGLRenderingContext uint = 0x0500
const INVALIDVALUE_WebGLRenderingContext uint = 0x0501
const INVALIDOPERATION_WebGLRenderingContext uint = 0x0502
const OUTOFMEMORY_WebGLRenderingContext uint = 0x0505
const CW_WebGLRenderingContext uint = 0x0900
const CCW_WebGLRenderingContext uint = 0x0901
const LINEWIDTH_WebGLRenderingContext uint = 0x0B21
const ALIASEDPOINTSIZERANGE_WebGLRenderingContext uint = 0x846D
const ALIASEDLINEWIDTHRANGE_WebGLRenderingContext uint = 0x846E
const CULLFACEMODE_WebGLRenderingContext uint = 0x0B45
const FRONTFACE_WebGLRenderingContext uint = 0x0B46
const DEPTHRANGE_WebGLRenderingContext uint = 0x0B70
const DEPTHWRITEMASK_WebGLRenderingContext uint = 0x0B72
const DEPTHCLEARVALUE_WebGLRenderingContext uint = 0x0B73
const DEPTHFUNC_WebGLRenderingContext uint = 0x0B74
const STENCILCLEARVALUE_WebGLRenderingContext uint = 0x0B91
const STENCILFUNC_WebGLRenderingContext uint = 0x0B92
const STENCILFAIL_WebGLRenderingContext uint = 0x0B94
const STENCILPASSDEPTHFAIL_WebGLRenderingContext uint = 0x0B95
const STENCILPASSDEPTHPASS_WebGLRenderingContext uint = 0x0B96
const STENCILREF_WebGLRenderingContext uint = 0x0B97
const STENCILVALUEMASK_WebGLRenderingContext uint = 0x0B93
const STENCILWRITEMASK_WebGLRenderingContext uint = 0x0B98
const STENCILBACKFUNC_WebGLRenderingContext uint = 0x8800
const STENCILBACKFAIL_WebGLRenderingContext uint = 0x8801
const STENCILBACKPASSDEPTHFAIL_WebGLRenderingContext uint = 0x8802
const STENCILBACKPASSDEPTHPASS_WebGLRenderingContext uint = 0x8803
const STENCILBACKREF_WebGLRenderingContext uint = 0x8CA3
const STENCILBACKVALUEMASK_WebGLRenderingContext uint = 0x8CA4
const STENCILBACKWRITEMASK_WebGLRenderingContext uint = 0x8CA5
const VIEWPORT_WebGLRenderingContext uint = 0x0BA2
const SCISSORBOX_WebGLRenderingContext uint = 0x0C10
const COLORCLEARVALUE_WebGLRenderingContext uint = 0x0C22
const COLORWRITEMASK_WebGLRenderingContext uint = 0x0C23
const UNPACKALIGNMENT_WebGLRenderingContext uint = 0x0CF5
const PACKALIGNMENT_WebGLRenderingContext uint = 0x0D05
const MAXTEXTURESIZE_WebGLRenderingContext uint = 0x0D33
const MAXVIEWPORTDIMS_WebGLRenderingContext uint = 0x0D3A
const SUBPIXELBITS_WebGLRenderingContext uint = 0x0D50
const REDBITS_WebGLRenderingContext uint = 0x0D52
const GREENBITS_WebGLRenderingContext uint = 0x0D53
const BLUEBITS_WebGLRenderingContext uint = 0x0D54
const ALPHABITS_WebGLRenderingContext uint = 0x0D55
const DEPTHBITS_WebGLRenderingContext uint = 0x0D56
const STENCILBITS_WebGLRenderingContext uint = 0x0D57
const POLYGONOFFSETUNITS_WebGLRenderingContext uint = 0x2A00
const POLYGONOFFSETFACTOR_WebGLRenderingContext uint = 0x8038
const TEXTUREBINDING2D_WebGLRenderingContext uint = 0x8069
const SAMPLEBUFFERS_WebGLRenderingContext uint = 0x80A8
const SAMPLES_WebGLRenderingContext uint = 0x80A9
const SAMPLECOVERAGEVALUE_WebGLRenderingContext uint = 0x80AA
const SAMPLECOVERAGEINVERT_WebGLRenderingContext uint = 0x80AB
const COMPRESSEDTEXTUREFORMATS_WebGLRenderingContext uint = 0x86A3
const DONTCARE_WebGLRenderingContext uint = 0x1100
const FASTEST_WebGLRenderingContext uint = 0x1101
const NICEST_WebGLRenderingContext uint = 0x1102
const GENERATEMIPMAPHINT_WebGLRenderingContext uint = 0x8192
const BYTE_WebGLRenderingContext uint = 0x1400
const UNSIGNEDBYTE_WebGLRenderingContext uint = 0x1401
const SHORT_WebGLRenderingContext uint = 0x1402
const UNSIGNEDSHORT_WebGLRenderingContext uint = 0x1403
const INT_WebGLRenderingContext uint = 0x1404
const UNSIGNEDINT_WebGLRenderingContext uint = 0x1405
const FLOAT_WebGLRenderingContext uint = 0x1406
const DEPTHCOMPONENT_WebGLRenderingContext uint = 0x1902
const ALPHA_WebGLRenderingContext uint = 0x1906
const RGB_WebGLRenderingContext uint = 0x1907
const RGBA_WebGLRenderingContext uint = 0x1908
const LUMINANCE_WebGLRenderingContext uint = 0x1909
const LUMINANCEALPHA_WebGLRenderingContext uint = 0x190A
const UNSIGNEDSHORT4444_WebGLRenderingContext uint = 0x8033
const UNSIGNEDSHORT5551_WebGLRenderingContext uint = 0x8034
const UNSIGNEDSHORT565_WebGLRenderingContext uint = 0x8363
const FRAGMENTSHADER_WebGLRenderingContext uint = 0x8B30
const VERTEXSHADER_WebGLRenderingContext uint = 0x8B31
const MAXVERTEXATTRIBS_WebGLRenderingContext uint = 0x8869
const MAXVERTEXUNIFORMVECTORS_WebGLRenderingContext uint = 0x8DFB
const MAXVARYINGVECTORS_WebGLRenderingContext uint = 0x8DFC
const MAXCOMBINEDTEXTUREIMAGEUNITS_WebGLRenderingContext uint = 0x8B4D
const MAXVERTEXTEXTUREIMAGEUNITS_WebGLRenderingContext uint = 0x8B4C
const MAXTEXTUREIMAGEUNITS_WebGLRenderingContext uint = 0x8872
const MAXFRAGMENTUNIFORMVECTORS_WebGLRenderingContext uint = 0x8DFD
const SHADERTYPE_WebGLRenderingContext uint = 0x8B4F
const DELETESTATUS_WebGLRenderingContext uint = 0x8B80
const LINKSTATUS_WebGLRenderingContext uint = 0x8B82
const VALIDATESTATUS_WebGLRenderingContext uint = 0x8B83
const ATTACHEDSHADERS_WebGLRenderingContext uint = 0x8B85
const ACTIVEUNIFORMS_WebGLRenderingContext uint = 0x8B86
const ACTIVEATTRIBUTES_WebGLRenderingContext uint = 0x8B89
const SHADINGLANGUAGEVERSION_WebGLRenderingContext uint = 0x8B8C
const CURRENTPROGRAM_WebGLRenderingContext uint = 0x8B8D
const NEVER_WebGLRenderingContext uint = 0x0200
const LESS_WebGLRenderingContext uint = 0x0201
const EQUAL_WebGLRenderingContext uint = 0x0202
const LEQUAL_WebGLRenderingContext uint = 0x0203
const GREATER_WebGLRenderingContext uint = 0x0204
const NOTEQUAL_WebGLRenderingContext uint = 0x0205
const GEQUAL_WebGLRenderingContext uint = 0x0206
const ALWAYS_WebGLRenderingContext uint = 0x0207
const KEEP_WebGLRenderingContext uint = 0x1E00
const REPLACE_WebGLRenderingContext uint = 0x1E01
const INCR_WebGLRenderingContext uint = 0x1E02
const DECR_WebGLRenderingContext uint = 0x1E03
const INVERT_WebGLRenderingContext uint = 0x150A
const INCRWRAP_WebGLRenderingContext uint = 0x8507
const DECRWRAP_WebGLRenderingContext uint = 0x8508
const VENDOR_WebGLRenderingContext uint = 0x1F00
const RENDERER_WebGLRenderingContext uint = 0x1F01
const VERSION_WebGLRenderingContext uint = 0x1F02
const NEAREST_WebGLRenderingContext uint = 0x2600
const LINEAR_WebGLRenderingContext uint = 0x2601
const NEARESTMIPMAPNEAREST_WebGLRenderingContext uint = 0x2700
const LINEARMIPMAPNEAREST_WebGLRenderingContext uint = 0x2701
const NEARESTMIPMAPLINEAR_WebGLRenderingContext uint = 0x2702
const LINEARMIPMAPLINEAR_WebGLRenderingContext uint = 0x2703
const TEXTUREMAGFILTER_WebGLRenderingContext uint = 0x2800
const TEXTUREMINFILTER_WebGLRenderingContext uint = 0x2801
const TEXTUREWRAPS_WebGLRenderingContext uint = 0x2802
const TEXTUREWRAPT_WebGLRenderingContext uint = 0x2803
const TEXTURE2D_WebGLRenderingContext uint = 0x0DE1
const TEXTURE_WebGLRenderingContext uint = 0x1702
const TEXTURECUBEMAP_WebGLRenderingContext uint = 0x8513
const TEXTUREBINDINGCUBEMAP_WebGLRenderingContext uint = 0x8514
const TEXTURECUBEMAPPOSITIVEX_WebGLRenderingContext uint = 0x8515
const TEXTURECUBEMAPNEGATIVEX_WebGLRenderingContext uint = 0x8516
const TEXTURECUBEMAPPOSITIVEY_WebGLRenderingContext uint = 0x8517
const TEXTURECUBEMAPNEGATIVEY_WebGLRenderingContext uint = 0x8518
const TEXTURECUBEMAPPOSITIVEZ_WebGLRenderingContext uint = 0x8519
const TEXTURECUBEMAPNEGATIVEZ_WebGLRenderingContext uint = 0x851A
const MAXCUBEMAPTEXTURESIZE_WebGLRenderingContext uint = 0x851C
const TEXTURE0_WebGLRenderingContext uint = 0x84C0
const TEXTURE1_WebGLRenderingContext uint = 0x84C1
const TEXTURE2_WebGLRenderingContext uint = 0x84C2
const TEXTURE3_WebGLRenderingContext uint = 0x84C3
const TEXTURE4_WebGLRenderingContext uint = 0x84C4
const TEXTURE5_WebGLRenderingContext uint = 0x84C5
const TEXTURE6_WebGLRenderingContext uint = 0x84C6
const TEXTURE7_WebGLRenderingContext uint = 0x84C7
const TEXTURE8_WebGLRenderingContext uint = 0x84C8
const TEXTURE9_WebGLRenderingContext uint = 0x84C9
const TEXTURE10_WebGLRenderingContext uint = 0x84CA
const TEXTURE11_WebGLRenderingContext uint = 0x84CB
const TEXTURE12_WebGLRenderingContext uint = 0x84CC
const TEXTURE13_WebGLRenderingContext uint = 0x84CD
const TEXTURE14_WebGLRenderingContext uint = 0x84CE
const TEXTURE15_WebGLRenderingContext uint = 0x84CF
const TEXTURE16_WebGLRenderingContext uint = 0x84D0
const TEXTURE17_WebGLRenderingContext uint = 0x84D1
const TEXTURE18_WebGLRenderingContext uint = 0x84D2
const TEXTURE19_WebGLRenderingContext uint = 0x84D3
const TEXTURE20_WebGLRenderingContext uint = 0x84D4
const TEXTURE21_WebGLRenderingContext uint = 0x84D5
const TEXTURE22_WebGLRenderingContext uint = 0x84D6
const TEXTURE23_WebGLRenderingContext uint = 0x84D7
const TEXTURE24_WebGLRenderingContext uint = 0x84D8
const TEXTURE25_WebGLRenderingContext uint = 0x84D9
const TEXTURE26_WebGLRenderingContext uint = 0x84DA
const TEXTURE27_WebGLRenderingContext uint = 0x84DB
const TEXTURE28_WebGLRenderingContext uint = 0x84DC
const TEXTURE29_WebGLRenderingContext uint = 0x84DD
const TEXTURE30_WebGLRenderingContext uint = 0x84DE
const TEXTURE31_WebGLRenderingContext uint = 0x84DF
const ACTIVETEXTURE_WebGLRenderingContext uint = 0x84E0
const REPEAT_WebGLRenderingContext uint = 0x2901
const CLAMPTOEDGE_WebGLRenderingContext uint = 0x812F
const MIRROREDREPEAT_WebGLRenderingContext uint = 0x8370
const FLOATVEC2_WebGLRenderingContext uint = 0x8B50
const FLOATVEC3_WebGLRenderingContext uint = 0x8B51
const FLOATVEC4_WebGLRenderingContext uint = 0x8B52
const INTVEC2_WebGLRenderingContext uint = 0x8B53
const INTVEC3_WebGLRenderingContext uint = 0x8B54
const INTVEC4_WebGLRenderingContext uint = 0x8B55
const BOOL_WebGLRenderingContext uint = 0x8B56
const BOOLVEC2_WebGLRenderingContext uint = 0x8B57
const BOOLVEC3_WebGLRenderingContext uint = 0x8B58
const BOOLVEC4_WebGLRenderingContext uint = 0x8B59
const FLOATMAT2_WebGLRenderingContext uint = 0x8B5A
const FLOATMAT3_WebGLRenderingContext uint = 0x8B5B
const FLOATMAT4_WebGLRenderingContext uint = 0x8B5C
const SAMPLER2D_WebGLRenderingContext uint = 0x8B5E
const SAMPLERCUBE_WebGLRenderingContext uint = 0x8B60
const VERTEXATTRIBARRAYENABLED_WebGLRenderingContext uint = 0x8622
const VERTEXATTRIBARRAYSIZE_WebGLRenderingContext uint = 0x8623
const VERTEXATTRIBARRAYSTRIDE_WebGLRenderingContext uint = 0x8624
const VERTEXATTRIBARRAYTYPE_WebGLRenderingContext uint = 0x8625
const VERTEXATTRIBARRAYNORMALIZED_WebGLRenderingContext uint = 0x886A
const VERTEXATTRIBARRAYPOINTER_WebGLRenderingContext uint = 0x8645
const VERTEXATTRIBARRAYBUFFERBINDING_WebGLRenderingContext uint = 0x889F
const IMPLEMENTATIONCOLORREADTYPE_WebGLRenderingContext uint = 0x8B9A
const IMPLEMENTATIONCOLORREADFORMAT_WebGLRenderingContext uint = 0x8B9B
const COMPILESTATUS_WebGLRenderingContext uint = 0x8B81
const LOWFLOAT_WebGLRenderingContext uint = 0x8DF0
const MEDIUMFLOAT_WebGLRenderingContext uint = 0x8DF1
const HIGHFLOAT_WebGLRenderingContext uint = 0x8DF2
const LOWINT_WebGLRenderingContext uint = 0x8DF3
const MEDIUMINT_WebGLRenderingContext uint = 0x8DF4
const HIGHINT_WebGLRenderingContext uint = 0x8DF5
const FRAMEBUFFER_WebGLRenderingContext uint = 0x8D40
const RENDERBUFFER_WebGLRenderingContext uint = 0x8D41
const RGBA4_WebGLRenderingContext uint = 0x8056
const RGB5A1_WebGLRenderingContext uint = 0x8057
const RGB565_WebGLRenderingContext uint = 0x8D62
const DEPTHCOMPONENT16_WebGLRenderingContext uint = 0x81A5
const STENCILINDEX8_WebGLRenderingContext uint = 0x8D48
const DEPTHSTENCIL_WebGLRenderingContext uint = 0x84F9
const RENDERBUFFERWIDTH_WebGLRenderingContext uint = 0x8D42
const RENDERBUFFERHEIGHT_WebGLRenderingContext uint = 0x8D43
const RENDERBUFFERINTERNALFORMAT_WebGLRenderingContext uint = 0x8D44
const RENDERBUFFERREDSIZE_WebGLRenderingContext uint = 0x8D50
const RENDERBUFFERGREENSIZE_WebGLRenderingContext uint = 0x8D51
const RENDERBUFFERBLUESIZE_WebGLRenderingContext uint = 0x8D52
const RENDERBUFFERALPHASIZE_WebGLRenderingContext uint = 0x8D53
const RENDERBUFFERDEPTHSIZE_WebGLRenderingContext uint = 0x8D54
const RENDERBUFFERSTENCILSIZE_WebGLRenderingContext uint = 0x8D55
const FRAMEBUFFERATTACHMENTOBJECTTYPE_WebGLRenderingContext uint = 0x8CD0
const FRAMEBUFFERATTACHMENTOBJECTNAME_WebGLRenderingContext uint = 0x8CD1
const FRAMEBUFFERATTACHMENTTEXTURELEVEL_WebGLRenderingContext uint = 0x8CD2
const FRAMEBUFFERATTACHMENTTEXTURECUBEMAPFACE_WebGLRenderingContext uint = 0x8CD3
const COLORATTACHMENT0_WebGLRenderingContext uint = 0x8CE0
const DEPTHATTACHMENT_WebGLRenderingContext uint = 0x8D00
const STENCILATTACHMENT_WebGLRenderingContext uint = 0x8D20
const DEPTHSTENCILATTACHMENT_WebGLRenderingContext uint = 0x821A
const NONE_WebGLRenderingContext uint = 0
const FRAMEBUFFERCOMPLETE_WebGLRenderingContext uint = 0x8CD5
const FRAMEBUFFERINCOMPLETEATTACHMENT_WebGLRenderingContext uint = 0x8CD6
const FRAMEBUFFERINCOMPLETEMISSINGATTACHMENT_WebGLRenderingContext uint = 0x8CD7
const FRAMEBUFFERINCOMPLETEDIMENSIONS_WebGLRenderingContext uint = 0x8CD9
const FRAMEBUFFERUNSUPPORTED_WebGLRenderingContext uint = 0x8CDD
const FRAMEBUFFERBINDING_WebGLRenderingContext uint = 0x8CA6
const RENDERBUFFERBINDING_WebGLRenderingContext uint = 0x8CA7
const MAXRENDERBUFFERSIZE_WebGLRenderingContext uint = 0x84E8
const INVALIDFRAMEBUFFEROPERATION_WebGLRenderingContext uint = 0x0506
const UNPACKFLIPYWEBGL_WebGLRenderingContext uint = 0x9240
const UNPACKPREMULTIPLYALPHAWEBGL_WebGLRenderingContext uint = 0x9241
const CONTEXTLOSTWEBGL_WebGLRenderingContext uint = 0x9242
const UNPACKCOLORSPACECONVERSIONWEBGL_WebGLRenderingContext uint = 0x9243
const BROWSERDEFAULTWEBGL_WebGLRenderingContext uint = 0x9244

// Canvas returning attribute 'canvas' with
// type Union (idl: Union).
func (_this *WebGLRenderingContext) Canvas() *Union {
	var ret *Union
	value := _this.Value_JS.Get("canvas")
	ret = UnionFromJS(value)
	return ret
}

// DrawingBufferWidth returning attribute 'drawingBufferWidth' with
// type int (idl: long).
func (_this *WebGLRenderingContext) DrawingBufferWidth() int {
	var ret int
	value := _this.Value_JS.Get("drawingBufferWidth")
	ret = (value).Int()
	return ret
}

// DrawingBufferHeight returning attribute 'drawingBufferHeight' with
// type int (idl: long).
func (_this *WebGLRenderingContext) DrawingBufferHeight() int {
	var ret int
	value := _this.Value_JS.Get("drawingBufferHeight")
	ret = (value).Int()
	return ret
}

func (_this *WebGLRenderingContext) GetContextAttributes() (_result *WebGLContextAttributes) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getContextAttributes", _args[0:_end]...)
	var (
		_converted *WebGLContextAttributes // javascript: WebGLContextAttributes _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLContextAttributesFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) IsContextLost() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("isContextLost", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetSupportedExtensions() (_result *[]string) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSupportedExtensions", _args[0:_end]...)
	var (
		_converted *[]string // javascript: idl-sequence _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__length0 := _returned.Length()
		__array0 := make([]string, __length0, __length0)
		for __idx := 0; __idx < __length0; __idx++ {
			var __out string
			__in := _returned.Index(__idx)
			__out = (__in).String()
			__array0[__idx] = __out
		}
		_converted = &__array0
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetExtension(name string) (_result *javascript.Object) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getExtension", _args[0:_end]...)
	var (
		_converted *javascript.Object // javascript: object _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = javascript.ObjectFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) ActiveTexture(texture uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := texture
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("activeTexture", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) AttachShader(program *WebGLProgram, shader *WebGLShader) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := shader.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("attachShader", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) BindAttribLocation(program *WebGLProgram, index uint, name string) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_p2 := name
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bindAttribLocation", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) BindBuffer(target uint, buffer *WebGLBuffer) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := buffer.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindBuffer", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) BindFramebuffer(target uint, framebuffer *WebGLFramebuffer) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := framebuffer.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindFramebuffer", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) BindRenderbuffer(target uint, renderbuffer *WebGLRenderbuffer) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := renderbuffer.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindRenderbuffer", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) BindTexture(target uint, texture *WebGLTexture) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := texture.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindTexture", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) BlendColor(red float32, green float32, blue float32, alpha float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := red
	_args[0] = _p0
	_end++
	_p1 := green
	_args[1] = _p1
	_end++
	_p2 := blue
	_args[2] = _p2
	_end++
	_p3 := alpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("blendColor", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) BlendEquation(mode uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("blendEquation", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) BlendEquationSeparate(modeRGB uint, modeAlpha uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := modeRGB
	_args[0] = _p0
	_end++
	_p1 := modeAlpha
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("blendEquationSeparate", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) BlendFunc(sfactor uint, dfactor uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := sfactor
	_args[0] = _p0
	_end++
	_p1 := dfactor
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("blendFunc", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) BlendFuncSeparate(srcRGB uint, dstRGB uint, srcAlpha uint, dstAlpha uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := srcRGB
	_args[0] = _p0
	_end++
	_p1 := dstRGB
	_args[1] = _p1
	_end++
	_p2 := srcAlpha
	_args[2] = _p2
	_end++
	_p3 := dstAlpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("blendFuncSeparate", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) BufferData(target uint, size int, usage uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := size
	_args[1] = _p1
	_end++
	_p2 := usage
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferData", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) BufferData2(target uint, data *Union, usage uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	_p2 := usage
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferData", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) BufferSubData(target uint, offset int, data *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := offset
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferSubData", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) CheckFramebufferStatus(target uint) (_result uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("checkFramebufferStatus", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) Clear(mask uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mask
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) ClearColor(red float32, green float32, blue float32, alpha float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := red
	_args[0] = _p0
	_end++
	_p1 := green
	_args[1] = _p1
	_end++
	_p2 := blue
	_args[2] = _p2
	_end++
	_p3 := alpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("clearColor", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) ClearDepth(depth float32) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := depth
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("clearDepth", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) ClearStencil(s int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := s
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("clearStencil", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) ColorMask(red bool, green bool, blue bool, alpha bool) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := red
	_args[0] = _p0
	_end++
	_p1 := green
	_args[1] = _p1
	_end++
	_p2 := blue
	_args[2] = _p2
	_end++
	_p3 := alpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("colorMask", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) CompileShader(shader *WebGLShader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("compileShader", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) CompressedTexImage2D(target uint, level int, internalformat uint, width int, height int, border int, data *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := data.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("compressedTexImage2D", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) CompressedTexSubImage2D(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, data *Union) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := data.JSValue()
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("compressedTexSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) CopyTexImage2D(target uint, level int, internalformat uint, x int, y int, width int, height int, border int) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := x
	_args[3] = _p3
	_end++
	_p4 := y
	_args[4] = _p4
	_end++
	_p5 := width
	_args[5] = _p5
	_end++
	_p6 := height
	_args[6] = _p6
	_end++
	_p7 := border
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("copyTexImage2D", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) CopyTexSubImage2D(target uint, level int, xoffset int, yoffset int, x int, y int, width int, height int) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := x
	_args[4] = _p4
	_end++
	_p5 := y
	_args[5] = _p5
	_end++
	_p6 := width
	_args[6] = _p6
	_end++
	_p7 := height
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("copyTexSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) CreateBuffer() (_result *WebGLBuffer) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createBuffer", _args[0:_end]...)
	var (
		_converted *WebGLBuffer // javascript: WebGLBuffer _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLBufferFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) CreateFramebuffer() (_result *WebGLFramebuffer) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createFramebuffer", _args[0:_end]...)
	var (
		_converted *WebGLFramebuffer // javascript: WebGLFramebuffer _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLFramebufferFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) CreateProgram() (_result *WebGLProgram) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createProgram", _args[0:_end]...)
	var (
		_converted *WebGLProgram // javascript: WebGLProgram _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLProgramFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) CreateRenderbuffer() (_result *WebGLRenderbuffer) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createRenderbuffer", _args[0:_end]...)
	var (
		_converted *WebGLRenderbuffer // javascript: WebGLRenderbuffer _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLRenderbufferFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) CreateShader(_type uint) (_result *WebGLShader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createShader", _args[0:_end]...)
	var (
		_converted *WebGLShader // javascript: WebGLShader _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLShaderFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) CreateTexture() (_result *WebGLTexture) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createTexture", _args[0:_end]...)
	var (
		_converted *WebGLTexture // javascript: WebGLTexture _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLTextureFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) CullFace(mode uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("cullFace", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) DeleteBuffer(buffer *WebGLBuffer) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := buffer.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteBuffer", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) DeleteFramebuffer(framebuffer *WebGLFramebuffer) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := framebuffer.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteFramebuffer", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) DeleteProgram(program *WebGLProgram) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteProgram", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) DeleteRenderbuffer(renderbuffer *WebGLRenderbuffer) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := renderbuffer.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteRenderbuffer", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) DeleteShader(shader *WebGLShader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteShader", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) DeleteTexture(texture *WebGLTexture) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := texture.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteTexture", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) DepthFunc(_func uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _func
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("depthFunc", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) DepthMask(flag bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := flag
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("depthMask", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) DepthRange(zNear float32, zFar float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := zNear
	_args[0] = _p0
	_end++
	_p1 := zFar
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("depthRange", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) DetachShader(program *WebGLProgram, shader *WebGLShader) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := shader.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("detachShader", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Disable(cap uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := cap
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("disable", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) DisableVertexAttribArray(index uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("disableVertexAttribArray", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) DrawArrays(mode uint, first int, count int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_p1 := first
	_args[1] = _p1
	_end++
	_p2 := count
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("drawArrays", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) DrawElements(mode uint, count int, _type uint, offset int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_p1 := count
	_args[1] = _p1
	_end++
	_p2 := _type
	_args[2] = _p2
	_end++
	_p3 := offset
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("drawElements", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Enable(cap uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := cap
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("enable", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) EnableVertexAttribArray(index uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("enableVertexAttribArray", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Finish() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("finish", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Flush() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("flush", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) FramebufferRenderbuffer(target uint, attachment uint, renderbuffertarget uint, renderbuffer *WebGLRenderbuffer) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := attachment
	_args[1] = _p1
	_end++
	_p2 := renderbuffertarget
	_args[2] = _p2
	_end++
	_p3 := renderbuffer.JSValue()
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("framebufferRenderbuffer", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) FramebufferTexture2D(target uint, attachment uint, textarget uint, texture *WebGLTexture, level int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := attachment
	_args[1] = _p1
	_end++
	_p2 := textarget
	_args[2] = _p2
	_end++
	_p3 := texture.JSValue()
	_args[3] = _p3
	_end++
	_p4 := level
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("framebufferTexture2D", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) FrontFace(mode uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("frontFace", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) GenerateMipmap(target uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("generateMipmap", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) GetActiveAttrib(program *WebGLProgram, index uint) (_result *WebGLActiveInfo) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getActiveAttrib", _args[0:_end]...)
	var (
		_converted *WebGLActiveInfo // javascript: WebGLActiveInfo _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLActiveInfoFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetActiveUniform(program *WebGLProgram, index uint) (_result *WebGLActiveInfo) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getActiveUniform", _args[0:_end]...)
	var (
		_converted *WebGLActiveInfo // javascript: WebGLActiveInfo _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLActiveInfoFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetAttachedShaders(program *WebGLProgram) (_result *[]*WebGLShader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getAttachedShaders", _args[0:_end]...)
	var (
		_converted *[]*WebGLShader // javascript: idl-sequence _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__length0 := _returned.Length()
		__array0 := make([]*WebGLShader, __length0, __length0)
		for __idx := 0; __idx < __length0; __idx++ {
			var __out *WebGLShader
			__in := _returned.Index(__idx)
			__out = WebGLShaderFromJS(__in)
			__array0[__idx] = __out
		}
		_converted = &__array0
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetAttribLocation(program *WebGLProgram, name string) (_result int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := name
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getAttribLocation", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetBufferParameter(target uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getBufferParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetParameter(pname uint) (_result js.Value) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := pname
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetError() (_result uint) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getError", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetFramebufferAttachmentParameter(target uint, attachment uint, pname uint) (_result js.Value) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := attachment
	_args[1] = _p1
	_end++
	_p2 := pname
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("getFramebufferAttachmentParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetProgramParameter(program *WebGLProgram, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getProgramParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetProgramInfoLog(program *WebGLProgram) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getProgramInfoLog", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetRenderbufferParameter(target uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getRenderbufferParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetShaderParameter(shader *WebGLShader, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getShaderParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetShaderPrecisionFormat(shadertype uint, precisiontype uint) (_result *WebGLShaderPrecisionFormat) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := shadertype
	_args[0] = _p0
	_end++
	_p1 := precisiontype
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getShaderPrecisionFormat", _args[0:_end]...)
	var (
		_converted *WebGLShaderPrecisionFormat // javascript: WebGLShaderPrecisionFormat _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLShaderPrecisionFormatFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetShaderInfoLog(shader *WebGLShader) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getShaderInfoLog", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetShaderSource(shader *WebGLShader) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getShaderSource", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetTexParameter(target uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getTexParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetUniform(program *WebGLProgram, location *WebGLUniformLocation) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := location.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getUniform", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetUniformLocation(program *WebGLProgram, name string) (_result *WebGLUniformLocation) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := name
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getUniformLocation", _args[0:_end]...)
	var (
		_converted *WebGLUniformLocation // javascript: WebGLUniformLocation _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLUniformLocationFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetVertexAttrib(index uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getVertexAttrib", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) GetVertexAttribOffset(index uint, pname uint) (_result int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getVertexAttribOffset", _args[0:_end]...)
	var (
		_converted int // javascript: long long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) Hint(target uint, mode uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := mode
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("hint", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) IsBuffer(buffer *WebGLBuffer) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := buffer.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isBuffer", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) IsEnabled(cap uint) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := cap
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isEnabled", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) IsFramebuffer(framebuffer *WebGLFramebuffer) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := framebuffer.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isFramebuffer", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) IsProgram(program *WebGLProgram) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isProgram", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) IsRenderbuffer(renderbuffer *WebGLRenderbuffer) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := renderbuffer.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isRenderbuffer", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) IsShader(shader *WebGLShader) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isShader", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) IsTexture(texture *WebGLTexture) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := texture.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isTexture", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGLRenderingContext) LineWidth(width float32) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := width
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("lineWidth", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) LinkProgram(program *WebGLProgram) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("linkProgram", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) PixelStorei(pname uint, param int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := pname
	_args[0] = _p0
	_end++
	_p1 := param
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("pixelStorei", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) PolygonOffset(factor float32, units float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := factor
	_args[0] = _p0
	_end++
	_p1 := units
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("polygonOffset", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) ReadPixels(x int, y int, width int, height int, format uint, _type uint, pixels *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := pixels.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("readPixels", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) RenderbufferStorage(target uint, internalformat uint, width int, height int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := internalformat
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("renderbufferStorage", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) SampleCoverage(value float32, invert bool) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := value
	_args[0] = _p0
	_end++
	_p1 := invert
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("sampleCoverage", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Scissor(x int, y int, width int, height int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("scissor", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) ShaderSource(shader *WebGLShader, source string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_p1 := source
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("shaderSource", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) StencilFunc(_func uint, ref int, mask uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := _func
	_args[0] = _p0
	_end++
	_p1 := ref
	_args[1] = _p1
	_end++
	_p2 := mask
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("stencilFunc", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) StencilFuncSeparate(face uint, _func uint, ref int, mask uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := face
	_args[0] = _p0
	_end++
	_p1 := _func
	_args[1] = _p1
	_end++
	_p2 := ref
	_args[2] = _p2
	_end++
	_p3 := mask
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("stencilFuncSeparate", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) StencilMask(mask uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mask
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("stencilMask", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) StencilMaskSeparate(face uint, mask uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := face
	_args[0] = _p0
	_end++
	_p1 := mask
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("stencilMaskSeparate", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) StencilOp(fail uint, zfail uint, zpass uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := fail
	_args[0] = _p0
	_end++
	_p1 := zfail
	_args[1] = _p1
	_end++
	_p2 := zpass
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("stencilOp", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) StencilOpSeparate(face uint, fail uint, zfail uint, zpass uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := face
	_args[0] = _p0
	_end++
	_p1 := fail
	_args[1] = _p1
	_end++
	_p2 := zfail
	_args[2] = _p2
	_end++
	_p3 := zpass
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("stencilOpSeparate", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) TexImage2D(target uint, level int, internalformat int, width int, height int, border int, format uint, _type uint, pixels *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pixels.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) TexImage2D2(target uint, level int, internalformat int, format uint, _type uint, source *Union) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := format
	_args[3] = _p3
	_end++
	_p4 := _type
	_args[4] = _p4
	_end++
	_p5 := source.JSValue()
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) TexParameterf(target uint, pname uint, param float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_p2 := param
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("texParameterf", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) TexParameteri(target uint, pname uint, param int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_p2 := param
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("texParameteri", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) TexSubImage2D(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, _type uint, pixels *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pixels.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) TexSubImage2D2(target uint, level int, xoffset int, yoffset int, format uint, _type uint, source *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := source.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform1f(location *WebGLUniformLocation, x float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1f", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform2f(location *WebGLUniformLocation, x float32, y float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniform2f", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform3f(location *WebGLUniformLocation, x float32, y float32, z float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("uniform3f", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform4f(location *WebGLUniformLocation, x float32, y float32, z float32, w float32) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("uniform4f", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform1i(location *WebGLUniformLocation, x int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1i", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform2i(location *WebGLUniformLocation, x int, y int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniform2i", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform3i(location *WebGLUniformLocation, x int, y int, z int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("uniform3i", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform4i(location *WebGLUniformLocation, x int, y int, z int, w int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("uniform4i", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform1fv(location *WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1fv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform2fv(location *WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform2fv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform3fv(location *WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform3fv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform4fv(location *WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform4fv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform1iv(location *WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1iv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform2iv(location *WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform2iv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform3iv(location *WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform3iv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Uniform4iv(location *WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform4iv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) UniformMatrix2fv(location *WebGLUniformLocation, transpose bool, value *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := value.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniformMatrix2fv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) UniformMatrix3fv(location *WebGLUniformLocation, transpose bool, value *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := value.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniformMatrix3fv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) UniformMatrix4fv(location *WebGLUniformLocation, transpose bool, value *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := value.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniformMatrix4fv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) UseProgram(program *WebGLProgram) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("useProgram", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) ValidateProgram(program *WebGLProgram) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("validateProgram", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) VertexAttrib1f(index uint, x float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib1f", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) VertexAttrib2f(index uint, x float32, y float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("vertexAttrib2f", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) VertexAttrib3f(index uint, x float32, y float32, z float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("vertexAttrib3f", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) VertexAttrib4f(index uint, x float32, y float32, z float32, w float32) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("vertexAttrib4f", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) VertexAttrib1fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib1fv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) VertexAttrib2fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib2fv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) VertexAttrib3fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib3fv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) VertexAttrib4fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib4fv", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) VertexAttribPointer(index uint, size int, _type uint, normalized bool, stride int, offset int) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := size
	_args[1] = _p1
	_end++
	_p2 := _type
	_args[2] = _p2
	_end++
	_p3 := normalized
	_args[3] = _p3
	_end++
	_p4 := stride
	_args[4] = _p4
	_end++
	_p5 := offset
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("vertexAttribPointer", _args[0:_end]...)
	return
}

func (_this *WebGLRenderingContext) Viewport(x int, y int, width int, height int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("viewport", _args[0:_end]...)
	return
}

// interface: WebGLContextEvent
type WebGLContextEvent struct {
	domcore.Event
}

// WebGLContextEventFromJS is casting a js.Wrapper into WebGLContextEvent.
func WebGLContextEventFromJS(value js.Wrapper) *WebGLContextEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLContextEvent{}
	ret.Value_JS = input
	return ret
}

func NewWebGLContextEvent(_type string, eventInit *WebGLContextEventInit) (_result *WebGLContextEvent) {
	_klass := js.Global().Get("WebGLContextEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInit != nil {
		_p1 := eventInit.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *WebGLContextEvent // javascript: WebGLContextEvent _what_return_name
	)
	_converted = WebGLContextEventFromJS(_returned)
	_result = _converted
	return
}

// StatusMessage returning attribute 'statusMessage' with
// type string (idl: DOMString).
func (_this *WebGLContextEvent) StatusMessage() string {
	var ret string
	value := _this.Value_JS.Get("statusMessage")
	ret = (value).String()
	return ret
}
