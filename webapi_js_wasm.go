// Code generated by webidl-bind. DO NOT EDIT.

package webapi

import "syscall/js"

import (
	"github.com/gowebapi/webapi/dom"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/html"
	"github.com/gowebapi/webapi/html/canvas"
	"github.com/gowebapi/webapi/html/htmlmisc"
	"github.com/gowebapi/webapi/javascript"
	"github.com/gowebapi/webapi/patch"
	"github.com/gowebapi/webapi/webidl"
)

// using following types:
// canvas.ImageBitmapOptions
// dom.Attr
// dom.CDATASection
// dom.Comment
// dom.DocumentFragment
// dom.DocumentType
// dom.Element
// dom.HTMLCollection
// dom.Node
// dom.NodeFilter
// dom.NodeIterator
// dom.NodeList
// dom.ProcessingInstruction
// dom.Range
// dom.Text
// dom.TreeWalker
// domcore.DOMTokenList
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// html.HTMLAllCollection
// html.HTMLElement
// html.HTMLFormElement
// html.HTMLHeadElement
// html.OnBeforeUnloadEventHandler
// html.OnErrorEventHandler
// html.ValidityState
// htmlmisc.ApplicationCache
// htmlmisc.BarProp
// htmlmisc.CustomElementRegistry
// htmlmisc.External
// htmlmisc.FrameRequestCallback
// htmlmisc.History
// htmlmisc.Location
// htmlmisc.Navigator
// htmlmisc.Storage
// javascript.Object
// javascript.Promise
// patch.ByteString
// webidl.VoidFunction

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: DocumentReadyState
type DocumentReadyState int

const (
	LoadingDocumentReadyState DocumentReadyState = iota
	InteractiveDocumentReadyState
	CompleteDocumentReadyState
)

var documentReadyStateToWasmTable = []string{
	"loading", "interactive", "complete",
}

var documentReadyStateFromWasmTable = map[string]DocumentReadyState{
	"loading": LoadingDocumentReadyState, "interactive": InteractiveDocumentReadyState, "complete": CompleteDocumentReadyState,
}

// JSValue is converting this enum into a java object
func (this *DocumentReadyState) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this DocumentReadyState) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(documentReadyStateToWasmTable) {
		return documentReadyStateToWasmTable[idx]
	}
	panic("unknown input value")
}

// DocumentReadyStateFromJS is converting a javascript value into
// a DocumentReadyState enum value.
func DocumentReadyStateFromJS(value js.Value) DocumentReadyState {
	key := value.String()
	conv, ok := documentReadyStateFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// callback: MutationCallback
type MutationCallbackFunc func(mutations []*MutationRecord, observer *MutationObserver)

// MutationCallback is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type MutationCallback js.Func

func MutationCallbackToJS(callback MutationCallbackFunc) *MutationCallback {
	if callback == nil {
		return nil
	}
	ret := MutationCallback(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 []*MutationRecord // javascript: sequence<MutationRecord> mutations
			_p1 *MutationObserver // javascript: MutationObserver observer
		)
		__length0 := args[0].Length()
		__array0 := make([]*MutationRecord, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 *MutationRecord
			__seq_in0 := args[0].Index(__idx0)
			__seq_out0 = MutationRecordFromJS(__seq_in0)
			__array0[__idx0] = __seq_out0
		}
		_p0 = __array0
		_p1 = MutationObserverFromJS(args[1])
		callback(_p0, _p1)
		// returning no return value
		return nil
	}))
	return &ret
}

func MutationCallbackFromJS(_value js.Value) MutationCallbackFunc {
	return func(mutations []*MutationRecord, observer *MutationObserver) {
		var (
			_args [2]interface{}
			_end  int
		)
		_p0 := js.Global().Get("Array").New(len(mutations))
		for __idx0, __seq_in0 := range mutations {
			__seq_out0 := __seq_in0.JSValue()
			_p0.SetIndex(__idx0, __seq_out0)
		}
		_args[0] = _p0
		_end++
		_p1 := observer.JSValue()
		_args[1] = _p1
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// dictionary: MutationObserverInit
type MutationObserverInit struct {
	ChildList             bool
	Attributes            bool
	CharacterData         bool
	Subtree               bool
	AttributeOldValue     bool
	CharacterDataOldValue bool
	AttributeFilter       []string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MutationObserverInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.ChildList
	out.Set("childList", value0)
	value1 := _this.Attributes
	out.Set("attributes", value1)
	value2 := _this.CharacterData
	out.Set("characterData", value2)
	value3 := _this.Subtree
	out.Set("subtree", value3)
	value4 := _this.AttributeOldValue
	out.Set("attributeOldValue", value4)
	value5 := _this.CharacterDataOldValue
	out.Set("characterDataOldValue", value5)
	value6 := js.Global().Get("Array").New(len(_this.AttributeFilter))
	for __idx6, __seq_in6 := range _this.AttributeFilter {
		__seq_out6 := __seq_in6
		value6.SetIndex(__idx6, __seq_out6)
	}
	out.Set("attributeFilter", value6)
	return out
}

// MutationObserverInitFromJS is allocating a new
// MutationObserverInit object and copy all values from
// input javascript object
func MutationObserverInitFromJS(value js.Wrapper) *MutationObserverInit {
	input := value.JSValue()
	var out MutationObserverInit
	var (
		value0 bool     // javascript: boolean {childList ChildList childList}
		value1 bool     // javascript: boolean {attributes Attributes attributes}
		value2 bool     // javascript: boolean {characterData CharacterData characterData}
		value3 bool     // javascript: boolean {subtree Subtree subtree}
		value4 bool     // javascript: boolean {attributeOldValue AttributeOldValue attributeOldValue}
		value5 bool     // javascript: boolean {characterDataOldValue CharacterDataOldValue characterDataOldValue}
		value6 []string // javascript: sequence<DOMString> {attributeFilter AttributeFilter attributeFilter}
	)
	value0 = (input.Get("childList")).Bool()
	out.ChildList = value0
	value1 = (input.Get("attributes")).Bool()
	out.Attributes = value1
	value2 = (input.Get("characterData")).Bool()
	out.CharacterData = value2
	value3 = (input.Get("subtree")).Bool()
	out.Subtree = value3
	value4 = (input.Get("attributeOldValue")).Bool()
	out.AttributeOldValue = value4
	value5 = (input.Get("characterDataOldValue")).Bool()
	out.CharacterDataOldValue = value5
	__length6 := input.Get("attributeFilter").Length()
	__array6 := make([]string, __length6, __length6)
	for __idx6 := 0; __idx6 < __length6; __idx6++ {
		var __seq_out6 string
		__seq_in6 := input.Get("attributeFilter").Index(__idx6)
		__seq_out6 = (__seq_in6).String()
		__array6[__idx6] = __seq_out6
	}
	value6 = __array6
	out.AttributeFilter = value6
	return &out
}

// dictionary: ElementCreationOptions
type ElementCreationOptions struct {
	Is string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *ElementCreationOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Is
	out.Set("is", value0)
	return out
}

// ElementCreationOptionsFromJS is allocating a new
// ElementCreationOptions object and copy all values from
// input javascript object
func ElementCreationOptionsFromJS(value js.Wrapper) *ElementCreationOptions {
	input := value.JSValue()
	var out ElementCreationOptions
	var (
		value0 string // javascript: DOMString {is Is is}
	)
	value0 = (input.Get("is")).String()
	out.Is = value0
	return &out
}

// dictionary: WindowPostMessageOptions
type WindowPostMessageOptions struct {
	Transfer     []*javascript.Object
	TargetOrigin string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *WindowPostMessageOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.Transfer))
	for __idx0, __seq_in0 := range _this.Transfer {
		__seq_out0 := __seq_in0.JSValue()
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("transfer", value0)
	value1 := _this.TargetOrigin
	out.Set("targetOrigin", value1)
	return out
}

// WindowPostMessageOptionsFromJS is allocating a new
// WindowPostMessageOptions object and copy all values from
// input javascript object
func WindowPostMessageOptionsFromJS(value js.Wrapper) *WindowPostMessageOptions {
	input := value.JSValue()
	var out WindowPostMessageOptions
	var (
		value0 []*javascript.Object // javascript: sequence<object> {transfer Transfer transfer}
		value1 string               // javascript: USVString {targetOrigin TargetOrigin targetOrigin}
	)
	__length0 := input.Get("transfer").Length()
	__array0 := make([]*javascript.Object, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *javascript.Object
		__seq_in0 := input.Get("transfer").Index(__idx0)
		__seq_out0 = javascript.ObjectFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.Transfer = value0
	value1 = (input.Get("targetOrigin")).String()
	out.TargetOrigin = value1
	return &out
}

// GetDocument returning attribute 'document' with
// type Document (idl: Document).
func GetDocument() *Document {
	var ret *Document
	_klass := js.Global()
	value := _klass.Get("document")
	ret = DocumentFromJS(value)
	return ret
}

// GetWindow returning attribute 'window' with
// type Window (idl: Window).
func GetWindow() *Window {
	var ret *Window
	_klass := js.Global()
	value := _klass.Get("window")
	ret = WindowFromJS(value)
	return ret
}

// interface: MutationObserver
type MutationObserver struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *MutationObserver) JSValue() js.Value {
	return _this.Value_JS
}

// MutationObserverFromJS is casting a js.Wrapper into MutationObserver.
func MutationObserverFromJS(value js.Wrapper) *MutationObserver {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MutationObserver{}
	ret.Value_JS = input
	return ret
}

func NewMutationObserver(callback *MutationCallback) (_result *MutationObserver) {
	_klass := js.Global().Get("MutationObserver")
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *MutationObserver // javascript: MutationObserver _what_return_name
	)
	_converted = MutationObserverFromJS(_returned)
	_result = _converted
	return
}

func (_this *MutationObserver) Observe(target *dom.Node, options *MutationObserverInit) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target.JSValue()
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("observe", _args[0:_end]...)
	return
}

func (_this *MutationObserver) Disconnect() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("disconnect", _args[0:_end]...)
	return
}

func (_this *MutationObserver) TakeRecords() (_result []*MutationRecord) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("takeRecords", _args[0:_end]...)
	var (
		_converted []*MutationRecord // javascript: sequence<MutationRecord> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*MutationRecord, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *MutationRecord
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = MutationRecordFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

// interface: MutationRecord
type MutationRecord struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *MutationRecord) JSValue() js.Value {
	return _this.Value_JS
}

// MutationRecordFromJS is casting a js.Wrapper into MutationRecord.
func MutationRecordFromJS(value js.Wrapper) *MutationRecord {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MutationRecord{}
	ret.Value_JS = input
	return ret
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *MutationRecord) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// Target returning attribute 'target' with
// type dom.Node (idl: Node).
func (_this *MutationRecord) Target() *dom.Node {
	var ret *dom.Node
	value := _this.Value_JS.Get("target")
	ret = dom.NodeFromJS(value)
	return ret
}

// AddedNodes returning attribute 'addedNodes' with
// type dom.NodeList (idl: NodeList).
func (_this *MutationRecord) AddedNodes() *dom.NodeList {
	var ret *dom.NodeList
	value := _this.Value_JS.Get("addedNodes")
	ret = dom.NodeListFromJS(value)
	return ret
}

// RemovedNodes returning attribute 'removedNodes' with
// type dom.NodeList (idl: NodeList).
func (_this *MutationRecord) RemovedNodes() *dom.NodeList {
	var ret *dom.NodeList
	value := _this.Value_JS.Get("removedNodes")
	ret = dom.NodeListFromJS(value)
	return ret
}

// PreviousSibling returning attribute 'previousSibling' with
// type dom.Node (idl: Node).
func (_this *MutationRecord) PreviousSibling() *dom.Node {
	var ret *dom.Node
	value := _this.Value_JS.Get("previousSibling")
	if value.Type() != js.TypeNull {
		ret = dom.NodeFromJS(value)
	}
	return ret
}

// NextSibling returning attribute 'nextSibling' with
// type dom.Node (idl: Node).
func (_this *MutationRecord) NextSibling() *dom.Node {
	var ret *dom.Node
	value := _this.Value_JS.Get("nextSibling")
	if value.Type() != js.TypeNull {
		ret = dom.NodeFromJS(value)
	}
	return ret
}

// AttributeName returning attribute 'attributeName' with
// type string (idl: DOMString).
func (_this *MutationRecord) AttributeName() *string {
	var ret *string
	value := _this.Value_JS.Get("attributeName")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// AttributeNamespace returning attribute 'attributeNamespace' with
// type string (idl: DOMString).
func (_this *MutationRecord) AttributeNamespace() *string {
	var ret *string
	value := _this.Value_JS.Get("attributeNamespace")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// OldValue returning attribute 'oldValue' with
// type string (idl: DOMString).
func (_this *MutationRecord) OldValue() *string {
	var ret *string
	value := _this.Value_JS.Get("oldValue")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// interface: Document
type Document struct {
	dom.Node
}

// DocumentFromJS is casting a js.Wrapper into Document.
func DocumentFromJS(value js.Wrapper) *Document {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Document{}
	ret.Value_JS = input
	return ret
}

func NewDocument() (_result *Document) {
	_klass := js.Global().Get("Document")
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *Document // javascript: Document _what_return_name
	)
	_converted = DocumentFromJS(_returned)
	_result = _converted
	return
}

// Implementation returning attribute 'implementation' with
// type DOMImplementation (idl: DOMImplementation).
func (_this *Document) Implementation() *DOMImplementation {
	var ret *DOMImplementation
	value := _this.Value_JS.Get("implementation")
	ret = DOMImplementationFromJS(value)
	return ret
}

// URL returning attribute 'URL' with
// type string (idl: USVString).
func (_this *Document) URL() string {
	var ret string
	value := _this.Value_JS.Get("URL")
	ret = (value).String()
	return ret
}

// DocumentURI returning attribute 'documentURI' with
// type string (idl: USVString).
func (_this *Document) DocumentURI() string {
	var ret string
	value := _this.Value_JS.Get("documentURI")
	ret = (value).String()
	return ret
}

// Origin returning attribute 'origin' with
// type string (idl: USVString).
func (_this *Document) Origin() string {
	var ret string
	value := _this.Value_JS.Get("origin")
	ret = (value).String()
	return ret
}

// CompatMode returning attribute 'compatMode' with
// type string (idl: DOMString).
func (_this *Document) CompatMode() string {
	var ret string
	value := _this.Value_JS.Get("compatMode")
	ret = (value).String()
	return ret
}

// CharacterSet returning attribute 'characterSet' with
// type string (idl: DOMString).
func (_this *Document) CharacterSet() string {
	var ret string
	value := _this.Value_JS.Get("characterSet")
	ret = (value).String()
	return ret
}

// Charset returning attribute 'charset' with
// type string (idl: DOMString).
func (_this *Document) Charset() string {
	var ret string
	value := _this.Value_JS.Get("charset")
	ret = (value).String()
	return ret
}

// InputEncoding returning attribute 'inputEncoding' with
// type string (idl: DOMString).
func (_this *Document) InputEncoding() string {
	var ret string
	value := _this.Value_JS.Get("inputEncoding")
	ret = (value).String()
	return ret
}

// ContentType returning attribute 'contentType' with
// type string (idl: DOMString).
func (_this *Document) ContentType() string {
	var ret string
	value := _this.Value_JS.Get("contentType")
	ret = (value).String()
	return ret
}

// Doctype returning attribute 'doctype' with
// type dom.DocumentType (idl: DocumentType).
func (_this *Document) Doctype() *dom.DocumentType {
	var ret *dom.DocumentType
	value := _this.Value_JS.Get("doctype")
	if value.Type() != js.TypeNull {
		ret = dom.DocumentTypeFromJS(value)
	}
	return ret
}

// DocumentElement returning attribute 'documentElement' with
// type dom.Element (idl: Element).
func (_this *Document) DocumentElement() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("documentElement")
	if value.Type() != js.TypeNull {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// Location returning attribute 'location' with
// type htmlmisc.Location (idl: Location).
func (_this *Document) Location() *htmlmisc.Location {
	var ret *htmlmisc.Location
	value := _this.Value_JS.Get("location")
	if value.Type() != js.TypeNull {
		ret = htmlmisc.LocationFromJS(value)
	}
	return ret
}

// Domain returning attribute 'domain' with
// type string (idl: USVString).
func (_this *Document) Domain() string {
	var ret string
	value := _this.Value_JS.Get("domain")
	ret = (value).String()
	return ret
}

// SetDomain setting attribute 'domain' with
// type string (idl: USVString).
func (_this *Document) SetDomain(value string) {
	input := value
	_this.Value_JS.Set("domain", input)
}

// Referrer returning attribute 'referrer' with
// type string (idl: USVString).
func (_this *Document) Referrer() string {
	var ret string
	value := _this.Value_JS.Get("referrer")
	ret = (value).String()
	return ret
}

// Cookie returning attribute 'cookie' with
// type string (idl: USVString).
func (_this *Document) Cookie() string {
	var ret string
	value := _this.Value_JS.Get("cookie")
	ret = (value).String()
	return ret
}

// SetCookie setting attribute 'cookie' with
// type string (idl: USVString).
func (_this *Document) SetCookie(value string) {
	input := value
	_this.Value_JS.Set("cookie", input)
}

// LastModified returning attribute 'lastModified' with
// type string (idl: DOMString).
func (_this *Document) LastModified() string {
	var ret string
	value := _this.Value_JS.Get("lastModified")
	ret = (value).String()
	return ret
}

// ReadyState returning attribute 'readyState' with
// type DocumentReadyState (idl: DocumentReadyState).
func (_this *Document) ReadyState() DocumentReadyState {
	var ret DocumentReadyState
	value := _this.Value_JS.Get("readyState")
	ret = DocumentReadyStateFromJS(value)
	return ret
}

// Title returning attribute 'title' with
// type string (idl: DOMString).
func (_this *Document) Title() string {
	var ret string
	value := _this.Value_JS.Get("title")
	ret = (value).String()
	return ret
}

// SetTitle setting attribute 'title' with
// type string (idl: DOMString).
func (_this *Document) SetTitle(value string) {
	input := value
	_this.Value_JS.Set("title", input)
}

// Dir returning attribute 'dir' with
// type string (idl: DOMString).
func (_this *Document) Dir() string {
	var ret string
	value := _this.Value_JS.Get("dir")
	ret = (value).String()
	return ret
}

// SetDir setting attribute 'dir' with
// type string (idl: DOMString).
func (_this *Document) SetDir(value string) {
	input := value
	_this.Value_JS.Set("dir", input)
}

// Body returning attribute 'body' with
// type html.HTMLElement (idl: HTMLElement).
func (_this *Document) Body() *html.HTMLElement {
	var ret *html.HTMLElement
	value := _this.Value_JS.Get("body")
	if value.Type() != js.TypeNull {
		ret = html.HTMLElementFromJS(value)
	}
	return ret
}

// SetBody setting attribute 'body' with
// type html.HTMLElement (idl: HTMLElement).
func (_this *Document) SetBody(value *html.HTMLElement) {
	input := value.JSValue()
	_this.Value_JS.Set("body", input)
}

// Head returning attribute 'head' with
// type html.HTMLHeadElement (idl: HTMLHeadElement).
func (_this *Document) Head() *html.HTMLHeadElement {
	var ret *html.HTMLHeadElement
	value := _this.Value_JS.Get("head")
	if value.Type() != js.TypeNull {
		ret = html.HTMLHeadElementFromJS(value)
	}
	return ret
}

// Images returning attribute 'images' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Images() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("images")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Embeds returning attribute 'embeds' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Embeds() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("embeds")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Plugins returning attribute 'plugins' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Plugins() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("plugins")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Links returning attribute 'links' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Links() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("links")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Forms returning attribute 'forms' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Forms() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("forms")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Scripts returning attribute 'scripts' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Scripts() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("scripts")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// CurrentScript returning attribute 'currentScript' with
// type Union (idl: Union).
func (_this *Document) CurrentScript() *Union {
	var ret *Union
	value := _this.Value_JS.Get("currentScript")
	if value.Type() != js.TypeNull {
		ret = UnionFromJS(value)
	}
	return ret
}

// DefaultView returning attribute 'defaultView' with
// type Window (idl: Window).
func (_this *Document) DefaultView() *Window {
	var ret *Window
	value := _this.Value_JS.Get("defaultView")
	if value.Type() != js.TypeNull {
		ret = WindowFromJS(value)
	}
	return ret
}

// ActiveElement returning attribute 'activeElement' with
// type dom.Element (idl: Element).
func (_this *Document) ActiveElement() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("activeElement")
	if value.Type() != js.TypeNull {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// DesignMode returning attribute 'designMode' with
// type string (idl: DOMString).
func (_this *Document) DesignMode() string {
	var ret string
	value := _this.Value_JS.Get("designMode")
	ret = (value).String()
	return ret
}

// SetDesignMode setting attribute 'designMode' with
// type string (idl: DOMString).
func (_this *Document) SetDesignMode(value string) {
	input := value
	_this.Value_JS.Set("designMode", input)
}

// Onreadystatechange returning attribute 'onreadystatechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onreadystatechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onreadystatechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnreadystatechange setting attribute 'onreadystatechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnreadystatechange(value *domcore.EventHandler) {
	var __callback31 js.Value
	if value != nil {
		__callback31 = (*value).Value
	} else {
		__callback31 = js.Null()
	}
	input := __callback31
	_this.Value_JS.Set("onreadystatechange", input)
}

// FgColor returning attribute 'fgColor' with
// type string (idl: DOMString).
func (_this *Document) FgColor() string {
	var ret string
	value := _this.Value_JS.Get("fgColor")
	ret = (value).String()
	return ret
}

// SetFgColor setting attribute 'fgColor' with
// type string (idl: DOMString).
func (_this *Document) SetFgColor(value string) {
	input := value
	_this.Value_JS.Set("fgColor", input)
}

// LinkColor returning attribute 'linkColor' with
// type string (idl: DOMString).
func (_this *Document) LinkColor() string {
	var ret string
	value := _this.Value_JS.Get("linkColor")
	ret = (value).String()
	return ret
}

// SetLinkColor setting attribute 'linkColor' with
// type string (idl: DOMString).
func (_this *Document) SetLinkColor(value string) {
	input := value
	_this.Value_JS.Set("linkColor", input)
}

// VlinkColor returning attribute 'vlinkColor' with
// type string (idl: DOMString).
func (_this *Document) VlinkColor() string {
	var ret string
	value := _this.Value_JS.Get("vlinkColor")
	ret = (value).String()
	return ret
}

// SetVlinkColor setting attribute 'vlinkColor' with
// type string (idl: DOMString).
func (_this *Document) SetVlinkColor(value string) {
	input := value
	_this.Value_JS.Set("vlinkColor", input)
}

// AlinkColor returning attribute 'alinkColor' with
// type string (idl: DOMString).
func (_this *Document) AlinkColor() string {
	var ret string
	value := _this.Value_JS.Get("alinkColor")
	ret = (value).String()
	return ret
}

// SetAlinkColor setting attribute 'alinkColor' with
// type string (idl: DOMString).
func (_this *Document) SetAlinkColor(value string) {
	input := value
	_this.Value_JS.Set("alinkColor", input)
}

// BgColor returning attribute 'bgColor' with
// type string (idl: DOMString).
func (_this *Document) BgColor() string {
	var ret string
	value := _this.Value_JS.Get("bgColor")
	ret = (value).String()
	return ret
}

// SetBgColor setting attribute 'bgColor' with
// type string (idl: DOMString).
func (_this *Document) SetBgColor(value string) {
	input := value
	_this.Value_JS.Set("bgColor", input)
}

// Anchors returning attribute 'anchors' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Anchors() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("anchors")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Applets returning attribute 'applets' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Applets() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("applets")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// All returning attribute 'all' with
// type html.HTMLAllCollection (idl: HTMLAllCollection).
func (_this *Document) All() *html.HTMLAllCollection {
	var ret *html.HTMLAllCollection
	value := _this.Value_JS.Get("all")
	ret = html.HTMLAllCollectionFromJS(value)
	return ret
}

// Children returning attribute 'children' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Children() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("children")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// FirstElementChild returning attribute 'firstElementChild' with
// type dom.Element (idl: Element).
func (_this *Document) FirstElementChild() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("firstElementChild")
	if value.Type() != js.TypeNull {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// LastElementChild returning attribute 'lastElementChild' with
// type dom.Element (idl: Element).
func (_this *Document) LastElementChild() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("lastElementChild")
	if value.Type() != js.TypeNull {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// ChildElementCount returning attribute 'childElementCount' with
// type uint (idl: unsigned long).
func (_this *Document) ChildElementCount() uint {
	var ret uint
	value := _this.Value_JS.Get("childElementCount")
	ret = (uint)((value).Int())
	return ret
}

// Onabort returning attribute 'onabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onabort() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onabort")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnabort setting attribute 'onabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnabort(value *domcore.EventHandler) {
	var __callback44 js.Value
	if value != nil {
		__callback44 = (*value).Value
	} else {
		__callback44 = js.Null()
	}
	input := __callback44
	_this.Value_JS.Set("onabort", input)
}

// Onauxclick returning attribute 'onauxclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onauxclick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onauxclick")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnauxclick setting attribute 'onauxclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnauxclick(value *domcore.EventHandler) {
	var __callback45 js.Value
	if value != nil {
		__callback45 = (*value).Value
	} else {
		__callback45 = js.Null()
	}
	input := __callback45
	_this.Value_JS.Set("onauxclick", input)
}

// Onblur returning attribute 'onblur' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onblur() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onblur")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnblur setting attribute 'onblur' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnblur(value *domcore.EventHandler) {
	var __callback46 js.Value
	if value != nil {
		__callback46 = (*value).Value
	} else {
		__callback46 = js.Null()
	}
	input := __callback46
	_this.Value_JS.Set("onblur", input)
}

// Oncancel returning attribute 'oncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Oncancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncancel")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncancel setting attribute 'oncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOncancel(value *domcore.EventHandler) {
	var __callback47 js.Value
	if value != nil {
		__callback47 = (*value).Value
	} else {
		__callback47 = js.Null()
	}
	input := __callback47
	_this.Value_JS.Set("oncancel", input)
}

// Oncanplay returning attribute 'oncanplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Oncanplay() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanplay")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncanplay setting attribute 'oncanplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOncanplay(value *domcore.EventHandler) {
	var __callback48 js.Value
	if value != nil {
		__callback48 = (*value).Value
	} else {
		__callback48 = js.Null()
	}
	input := __callback48
	_this.Value_JS.Set("oncanplay", input)
}

// Oncanplaythrough returning attribute 'oncanplaythrough' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Oncanplaythrough() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanplaythrough")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncanplaythrough setting attribute 'oncanplaythrough' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOncanplaythrough(value *domcore.EventHandler) {
	var __callback49 js.Value
	if value != nil {
		__callback49 = (*value).Value
	} else {
		__callback49 = js.Null()
	}
	input := __callback49
	_this.Value_JS.Set("oncanplaythrough", input)
}

// Onchange returning attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnchange setting attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnchange(value *domcore.EventHandler) {
	var __callback50 js.Value
	if value != nil {
		__callback50 = (*value).Value
	} else {
		__callback50 = js.Null()
	}
	input := __callback50
	_this.Value_JS.Set("onchange", input)
}

// Onclick returning attribute 'onclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onclick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclick")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnclick setting attribute 'onclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnclick(value *domcore.EventHandler) {
	var __callback51 js.Value
	if value != nil {
		__callback51 = (*value).Value
	} else {
		__callback51 = js.Null()
	}
	input := __callback51
	_this.Value_JS.Set("onclick", input)
}

// Onclose returning attribute 'onclose' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onclose() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclose")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnclose setting attribute 'onclose' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnclose(value *domcore.EventHandler) {
	var __callback52 js.Value
	if value != nil {
		__callback52 = (*value).Value
	} else {
		__callback52 = js.Null()
	}
	input := __callback52
	_this.Value_JS.Set("onclose", input)
}

// Oncontextmenu returning attribute 'oncontextmenu' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Oncontextmenu() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncontextmenu")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncontextmenu setting attribute 'oncontextmenu' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOncontextmenu(value *domcore.EventHandler) {
	var __callback53 js.Value
	if value != nil {
		__callback53 = (*value).Value
	} else {
		__callback53 = js.Null()
	}
	input := __callback53
	_this.Value_JS.Set("oncontextmenu", input)
}

// Oncuechange returning attribute 'oncuechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Oncuechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncuechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncuechange setting attribute 'oncuechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOncuechange(value *domcore.EventHandler) {
	var __callback54 js.Value
	if value != nil {
		__callback54 = (*value).Value
	} else {
		__callback54 = js.Null()
	}
	input := __callback54
	_this.Value_JS.Set("oncuechange", input)
}

// Ondblclick returning attribute 'ondblclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Ondblclick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondblclick")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndblclick setting attribute 'ondblclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOndblclick(value *domcore.EventHandler) {
	var __callback55 js.Value
	if value != nil {
		__callback55 = (*value).Value
	} else {
		__callback55 = js.Null()
	}
	input := __callback55
	_this.Value_JS.Set("ondblclick", input)
}

// Ondrag returning attribute 'ondrag' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Ondrag() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondrag")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndrag setting attribute 'ondrag' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOndrag(value *domcore.EventHandler) {
	var __callback56 js.Value
	if value != nil {
		__callback56 = (*value).Value
	} else {
		__callback56 = js.Null()
	}
	input := __callback56
	_this.Value_JS.Set("ondrag", input)
}

// Ondragend returning attribute 'ondragend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Ondragend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragend")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragend setting attribute 'ondragend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOndragend(value *domcore.EventHandler) {
	var __callback57 js.Value
	if value != nil {
		__callback57 = (*value).Value
	} else {
		__callback57 = js.Null()
	}
	input := __callback57
	_this.Value_JS.Set("ondragend", input)
}

// Ondragenter returning attribute 'ondragenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Ondragenter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragenter")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragenter setting attribute 'ondragenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOndragenter(value *domcore.EventHandler) {
	var __callback58 js.Value
	if value != nil {
		__callback58 = (*value).Value
	} else {
		__callback58 = js.Null()
	}
	input := __callback58
	_this.Value_JS.Set("ondragenter", input)
}

// Ondragexit returning attribute 'ondragexit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Ondragexit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragexit")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragexit setting attribute 'ondragexit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOndragexit(value *domcore.EventHandler) {
	var __callback59 js.Value
	if value != nil {
		__callback59 = (*value).Value
	} else {
		__callback59 = js.Null()
	}
	input := __callback59
	_this.Value_JS.Set("ondragexit", input)
}

// Ondragleave returning attribute 'ondragleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Ondragleave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragleave")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragleave setting attribute 'ondragleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOndragleave(value *domcore.EventHandler) {
	var __callback60 js.Value
	if value != nil {
		__callback60 = (*value).Value
	} else {
		__callback60 = js.Null()
	}
	input := __callback60
	_this.Value_JS.Set("ondragleave", input)
}

// Ondragover returning attribute 'ondragover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Ondragover() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragover")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragover setting attribute 'ondragover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOndragover(value *domcore.EventHandler) {
	var __callback61 js.Value
	if value != nil {
		__callback61 = (*value).Value
	} else {
		__callback61 = js.Null()
	}
	input := __callback61
	_this.Value_JS.Set("ondragover", input)
}

// Ondragstart returning attribute 'ondragstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Ondragstart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragstart")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragstart setting attribute 'ondragstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOndragstart(value *domcore.EventHandler) {
	var __callback62 js.Value
	if value != nil {
		__callback62 = (*value).Value
	} else {
		__callback62 = js.Null()
	}
	input := __callback62
	_this.Value_JS.Set("ondragstart", input)
}

// Ondrop returning attribute 'ondrop' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Ondrop() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondrop")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndrop setting attribute 'ondrop' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOndrop(value *domcore.EventHandler) {
	var __callback63 js.Value
	if value != nil {
		__callback63 = (*value).Value
	} else {
		__callback63 = js.Null()
	}
	input := __callback63
	_this.Value_JS.Set("ondrop", input)
}

// Ondurationchange returning attribute 'ondurationchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Ondurationchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondurationchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndurationchange setting attribute 'ondurationchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOndurationchange(value *domcore.EventHandler) {
	var __callback64 js.Value
	if value != nil {
		__callback64 = (*value).Value
	} else {
		__callback64 = js.Null()
	}
	input := __callback64
	_this.Value_JS.Set("ondurationchange", input)
}

// Onemptied returning attribute 'onemptied' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onemptied() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onemptied")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnemptied setting attribute 'onemptied' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnemptied(value *domcore.EventHandler) {
	var __callback65 js.Value
	if value != nil {
		__callback65 = (*value).Value
	} else {
		__callback65 = js.Null()
	}
	input := __callback65
	_this.Value_JS.Set("onemptied", input)
}

// Onended returning attribute 'onended' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onended() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onended")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnended setting attribute 'onended' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnended(value *domcore.EventHandler) {
	var __callback66 js.Value
	if value != nil {
		__callback66 = (*value).Value
	} else {
		__callback66 = js.Null()
	}
	input := __callback66
	_this.Value_JS.Set("onended", input)
}

// Onerror returning attribute 'onerror' with
// type html.OnErrorEventHandler (idl: OnErrorEventHandlerNonNull).
func (_this *Document) Onerror() html.OnErrorEventHandlerFunc {
	var ret html.OnErrorEventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull {
		ret = html.OnErrorEventHandlerFromJS(value)
	}
	return ret
}

// SetOnerror setting attribute 'onerror' with
// type html.OnErrorEventHandler (idl: OnErrorEventHandlerNonNull).
func (_this *Document) SetOnerror(value *html.OnErrorEventHandler) {
	var __callback67 js.Value
	if value != nil {
		__callback67 = (*value).Value
	} else {
		__callback67 = js.Null()
	}
	input := __callback67
	_this.Value_JS.Set("onerror", input)
}

// Onfocus returning attribute 'onfocus' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onfocus() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfocus")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnfocus setting attribute 'onfocus' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnfocus(value *domcore.EventHandler) {
	var __callback68 js.Value
	if value != nil {
		__callback68 = (*value).Value
	} else {
		__callback68 = js.Null()
	}
	input := __callback68
	_this.Value_JS.Set("onfocus", input)
}

// Onformdata returning attribute 'onformdata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onformdata() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onformdata")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnformdata setting attribute 'onformdata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnformdata(value *domcore.EventHandler) {
	var __callback69 js.Value
	if value != nil {
		__callback69 = (*value).Value
	} else {
		__callback69 = js.Null()
	}
	input := __callback69
	_this.Value_JS.Set("onformdata", input)
}

// Oninput returning attribute 'oninput' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Oninput() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninput")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOninput setting attribute 'oninput' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOninput(value *domcore.EventHandler) {
	var __callback70 js.Value
	if value != nil {
		__callback70 = (*value).Value
	} else {
		__callback70 = js.Null()
	}
	input := __callback70
	_this.Value_JS.Set("oninput", input)
}

// Oninvalid returning attribute 'oninvalid' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Oninvalid() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninvalid")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOninvalid setting attribute 'oninvalid' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOninvalid(value *domcore.EventHandler) {
	var __callback71 js.Value
	if value != nil {
		__callback71 = (*value).Value
	} else {
		__callback71 = js.Null()
	}
	input := __callback71
	_this.Value_JS.Set("oninvalid", input)
}

// Onkeydown returning attribute 'onkeydown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onkeydown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeydown")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnkeydown setting attribute 'onkeydown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnkeydown(value *domcore.EventHandler) {
	var __callback72 js.Value
	if value != nil {
		__callback72 = (*value).Value
	} else {
		__callback72 = js.Null()
	}
	input := __callback72
	_this.Value_JS.Set("onkeydown", input)
}

// Onkeypress returning attribute 'onkeypress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onkeypress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeypress")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnkeypress setting attribute 'onkeypress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnkeypress(value *domcore.EventHandler) {
	var __callback73 js.Value
	if value != nil {
		__callback73 = (*value).Value
	} else {
		__callback73 = js.Null()
	}
	input := __callback73
	_this.Value_JS.Set("onkeypress", input)
}

// Onkeyup returning attribute 'onkeyup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onkeyup() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeyup")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnkeyup setting attribute 'onkeyup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnkeyup(value *domcore.EventHandler) {
	var __callback74 js.Value
	if value != nil {
		__callback74 = (*value).Value
	} else {
		__callback74 = js.Null()
	}
	input := __callback74
	_this.Value_JS.Set("onkeyup", input)
}

// Onload returning attribute 'onload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onload() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onload")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnload setting attribute 'onload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnload(value *domcore.EventHandler) {
	var __callback75 js.Value
	if value != nil {
		__callback75 = (*value).Value
	} else {
		__callback75 = js.Null()
	}
	input := __callback75
	_this.Value_JS.Set("onload", input)
}

// Onloadeddata returning attribute 'onloadeddata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onloadeddata() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadeddata")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnloadeddata setting attribute 'onloadeddata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnloadeddata(value *domcore.EventHandler) {
	var __callback76 js.Value
	if value != nil {
		__callback76 = (*value).Value
	} else {
		__callback76 = js.Null()
	}
	input := __callback76
	_this.Value_JS.Set("onloadeddata", input)
}

// Onloadedmetadata returning attribute 'onloadedmetadata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onloadedmetadata() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadedmetadata")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnloadedmetadata setting attribute 'onloadedmetadata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnloadedmetadata(value *domcore.EventHandler) {
	var __callback77 js.Value
	if value != nil {
		__callback77 = (*value).Value
	} else {
		__callback77 = js.Null()
	}
	input := __callback77
	_this.Value_JS.Set("onloadedmetadata", input)
}

// Onloadend returning attribute 'onloadend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onloadend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadend")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnloadend setting attribute 'onloadend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnloadend(value *domcore.EventHandler) {
	var __callback78 js.Value
	if value != nil {
		__callback78 = (*value).Value
	} else {
		__callback78 = js.Null()
	}
	input := __callback78
	_this.Value_JS.Set("onloadend", input)
}

// Onloadstart returning attribute 'onloadstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onloadstart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadstart")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnloadstart setting attribute 'onloadstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnloadstart(value *domcore.EventHandler) {
	var __callback79 js.Value
	if value != nil {
		__callback79 = (*value).Value
	} else {
		__callback79 = js.Null()
	}
	input := __callback79
	_this.Value_JS.Set("onloadstart", input)
}

// Onmousedown returning attribute 'onmousedown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onmousedown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmousedown")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmousedown setting attribute 'onmousedown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnmousedown(value *domcore.EventHandler) {
	var __callback80 js.Value
	if value != nil {
		__callback80 = (*value).Value
	} else {
		__callback80 = js.Null()
	}
	input := __callback80
	_this.Value_JS.Set("onmousedown", input)
}

// Onmouseenter returning attribute 'onmouseenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onmouseenter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseenter")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseenter setting attribute 'onmouseenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnmouseenter(value *domcore.EventHandler) {
	var __callback81 js.Value
	if value != nil {
		__callback81 = (*value).Value
	} else {
		__callback81 = js.Null()
	}
	input := __callback81
	_this.Value_JS.Set("onmouseenter", input)
}

// Onmouseleave returning attribute 'onmouseleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onmouseleave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseleave")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseleave setting attribute 'onmouseleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnmouseleave(value *domcore.EventHandler) {
	var __callback82 js.Value
	if value != nil {
		__callback82 = (*value).Value
	} else {
		__callback82 = js.Null()
	}
	input := __callback82
	_this.Value_JS.Set("onmouseleave", input)
}

// Onmousemove returning attribute 'onmousemove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onmousemove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmousemove")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmousemove setting attribute 'onmousemove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnmousemove(value *domcore.EventHandler) {
	var __callback83 js.Value
	if value != nil {
		__callback83 = (*value).Value
	} else {
		__callback83 = js.Null()
	}
	input := __callback83
	_this.Value_JS.Set("onmousemove", input)
}

// Onmouseout returning attribute 'onmouseout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onmouseout() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseout")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseout setting attribute 'onmouseout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnmouseout(value *domcore.EventHandler) {
	var __callback84 js.Value
	if value != nil {
		__callback84 = (*value).Value
	} else {
		__callback84 = js.Null()
	}
	input := __callback84
	_this.Value_JS.Set("onmouseout", input)
}

// Onmouseover returning attribute 'onmouseover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onmouseover() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseover")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseover setting attribute 'onmouseover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnmouseover(value *domcore.EventHandler) {
	var __callback85 js.Value
	if value != nil {
		__callback85 = (*value).Value
	} else {
		__callback85 = js.Null()
	}
	input := __callback85
	_this.Value_JS.Set("onmouseover", input)
}

// Onmouseup returning attribute 'onmouseup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onmouseup() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseup")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseup setting attribute 'onmouseup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnmouseup(value *domcore.EventHandler) {
	var __callback86 js.Value
	if value != nil {
		__callback86 = (*value).Value
	} else {
		__callback86 = js.Null()
	}
	input := __callback86
	_this.Value_JS.Set("onmouseup", input)
}

// Onwheel returning attribute 'onwheel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onwheel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onwheel")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnwheel setting attribute 'onwheel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnwheel(value *domcore.EventHandler) {
	var __callback87 js.Value
	if value != nil {
		__callback87 = (*value).Value
	} else {
		__callback87 = js.Null()
	}
	input := __callback87
	_this.Value_JS.Set("onwheel", input)
}

// Onpause returning attribute 'onpause' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onpause() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpause")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpause setting attribute 'onpause' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnpause(value *domcore.EventHandler) {
	var __callback88 js.Value
	if value != nil {
		__callback88 = (*value).Value
	} else {
		__callback88 = js.Null()
	}
	input := __callback88
	_this.Value_JS.Set("onpause", input)
}

// Onplay returning attribute 'onplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onplay() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onplay")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnplay setting attribute 'onplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnplay(value *domcore.EventHandler) {
	var __callback89 js.Value
	if value != nil {
		__callback89 = (*value).Value
	} else {
		__callback89 = js.Null()
	}
	input := __callback89
	_this.Value_JS.Set("onplay", input)
}

// Onplaying returning attribute 'onplaying' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onplaying() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onplaying")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnplaying setting attribute 'onplaying' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnplaying(value *domcore.EventHandler) {
	var __callback90 js.Value
	if value != nil {
		__callback90 = (*value).Value
	} else {
		__callback90 = js.Null()
	}
	input := __callback90
	_this.Value_JS.Set("onplaying", input)
}

// Onprogress returning attribute 'onprogress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onprogress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onprogress")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnprogress setting attribute 'onprogress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnprogress(value *domcore.EventHandler) {
	var __callback91 js.Value
	if value != nil {
		__callback91 = (*value).Value
	} else {
		__callback91 = js.Null()
	}
	input := __callback91
	_this.Value_JS.Set("onprogress", input)
}

// Onratechange returning attribute 'onratechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onratechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onratechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnratechange setting attribute 'onratechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnratechange(value *domcore.EventHandler) {
	var __callback92 js.Value
	if value != nil {
		__callback92 = (*value).Value
	} else {
		__callback92 = js.Null()
	}
	input := __callback92
	_this.Value_JS.Set("onratechange", input)
}

// Onreset returning attribute 'onreset' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onreset() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onreset")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnreset setting attribute 'onreset' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnreset(value *domcore.EventHandler) {
	var __callback93 js.Value
	if value != nil {
		__callback93 = (*value).Value
	} else {
		__callback93 = js.Null()
	}
	input := __callback93
	_this.Value_JS.Set("onreset", input)
}

// Onresize returning attribute 'onresize' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onresize() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onresize")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnresize setting attribute 'onresize' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnresize(value *domcore.EventHandler) {
	var __callback94 js.Value
	if value != nil {
		__callback94 = (*value).Value
	} else {
		__callback94 = js.Null()
	}
	input := __callback94
	_this.Value_JS.Set("onresize", input)
}

// Onscroll returning attribute 'onscroll' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onscroll() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onscroll")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnscroll setting attribute 'onscroll' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnscroll(value *domcore.EventHandler) {
	var __callback95 js.Value
	if value != nil {
		__callback95 = (*value).Value
	} else {
		__callback95 = js.Null()
	}
	input := __callback95
	_this.Value_JS.Set("onscroll", input)
}

// Onsecuritypolicyviolation returning attribute 'onsecuritypolicyviolation' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onsecuritypolicyviolation() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsecuritypolicyviolation")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnsecuritypolicyviolation setting attribute 'onsecuritypolicyviolation' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnsecuritypolicyviolation(value *domcore.EventHandler) {
	var __callback96 js.Value
	if value != nil {
		__callback96 = (*value).Value
	} else {
		__callback96 = js.Null()
	}
	input := __callback96
	_this.Value_JS.Set("onsecuritypolicyviolation", input)
}

// Onseeked returning attribute 'onseeked' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onseeked() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onseeked")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnseeked setting attribute 'onseeked' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnseeked(value *domcore.EventHandler) {
	var __callback97 js.Value
	if value != nil {
		__callback97 = (*value).Value
	} else {
		__callback97 = js.Null()
	}
	input := __callback97
	_this.Value_JS.Set("onseeked", input)
}

// Onseeking returning attribute 'onseeking' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onseeking() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onseeking")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnseeking setting attribute 'onseeking' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnseeking(value *domcore.EventHandler) {
	var __callback98 js.Value
	if value != nil {
		__callback98 = (*value).Value
	} else {
		__callback98 = js.Null()
	}
	input := __callback98
	_this.Value_JS.Set("onseeking", input)
}

// Onselect returning attribute 'onselect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onselect() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselect")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnselect setting attribute 'onselect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnselect(value *domcore.EventHandler) {
	var __callback99 js.Value
	if value != nil {
		__callback99 = (*value).Value
	} else {
		__callback99 = js.Null()
	}
	input := __callback99
	_this.Value_JS.Set("onselect", input)
}

// Onstalled returning attribute 'onstalled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onstalled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onstalled")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnstalled setting attribute 'onstalled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnstalled(value *domcore.EventHandler) {
	var __callback100 js.Value
	if value != nil {
		__callback100 = (*value).Value
	} else {
		__callback100 = js.Null()
	}
	input := __callback100
	_this.Value_JS.Set("onstalled", input)
}

// Onsubmit returning attribute 'onsubmit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onsubmit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsubmit")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnsubmit setting attribute 'onsubmit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnsubmit(value *domcore.EventHandler) {
	var __callback101 js.Value
	if value != nil {
		__callback101 = (*value).Value
	} else {
		__callback101 = js.Null()
	}
	input := __callback101
	_this.Value_JS.Set("onsubmit", input)
}

// Onsuspend returning attribute 'onsuspend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onsuspend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsuspend")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnsuspend setting attribute 'onsuspend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnsuspend(value *domcore.EventHandler) {
	var __callback102 js.Value
	if value != nil {
		__callback102 = (*value).Value
	} else {
		__callback102 = js.Null()
	}
	input := __callback102
	_this.Value_JS.Set("onsuspend", input)
}

// Ontimeupdate returning attribute 'ontimeupdate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Ontimeupdate() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontimeupdate")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOntimeupdate setting attribute 'ontimeupdate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOntimeupdate(value *domcore.EventHandler) {
	var __callback103 js.Value
	if value != nil {
		__callback103 = (*value).Value
	} else {
		__callback103 = js.Null()
	}
	input := __callback103
	_this.Value_JS.Set("ontimeupdate", input)
}

// Ontoggle returning attribute 'ontoggle' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Ontoggle() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontoggle")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOntoggle setting attribute 'ontoggle' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOntoggle(value *domcore.EventHandler) {
	var __callback104 js.Value
	if value != nil {
		__callback104 = (*value).Value
	} else {
		__callback104 = js.Null()
	}
	input := __callback104
	_this.Value_JS.Set("ontoggle", input)
}

// Onvolumechange returning attribute 'onvolumechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onvolumechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvolumechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnvolumechange setting attribute 'onvolumechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnvolumechange(value *domcore.EventHandler) {
	var __callback105 js.Value
	if value != nil {
		__callback105 = (*value).Value
	} else {
		__callback105 = js.Null()
	}
	input := __callback105
	_this.Value_JS.Set("onvolumechange", input)
}

// Onwaiting returning attribute 'onwaiting' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onwaiting() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onwaiting")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnwaiting setting attribute 'onwaiting' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnwaiting(value *domcore.EventHandler) {
	var __callback106 js.Value
	if value != nil {
		__callback106 = (*value).Value
	} else {
		__callback106 = js.Null()
	}
	input := __callback106
	_this.Value_JS.Set("onwaiting", input)
}

// Oncopy returning attribute 'oncopy' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Oncopy() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncopy")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncopy setting attribute 'oncopy' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOncopy(value *domcore.EventHandler) {
	var __callback107 js.Value
	if value != nil {
		__callback107 = (*value).Value
	} else {
		__callback107 = js.Null()
	}
	input := __callback107
	_this.Value_JS.Set("oncopy", input)
}

// Oncut returning attribute 'oncut' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Oncut() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncut")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncut setting attribute 'oncut' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOncut(value *domcore.EventHandler) {
	var __callback108 js.Value
	if value != nil {
		__callback108 = (*value).Value
	} else {
		__callback108 = js.Null()
	}
	input := __callback108
	_this.Value_JS.Set("oncut", input)
}

// Onpaste returning attribute 'onpaste' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) Onpaste() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpaste")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpaste setting attribute 'onpaste' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) SetOnpaste(value *domcore.EventHandler) {
	var __callback109 js.Value
	if value != nil {
		__callback109 = (*value).Value
	} else {
		__callback109 = js.Null()
	}
	input := __callback109
	_this.Value_JS.Set("onpaste", input)
}

func (_this *Document) GetElementsByTagName(qualifiedName string) (_result *dom.HTMLCollection) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := qualifiedName
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getElementsByTagName", _args[0:_end]...)
	var (
		_converted *dom.HTMLCollection // javascript: HTMLCollection _what_return_name
	)
	_converted = dom.HTMLCollectionFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) GetElementsByTagNameNS(namespace *string, localName string) (_result *dom.HTMLCollection) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := namespace
	_args[0] = _p0
	_end++
	_p1 := localName
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getElementsByTagNameNS", _args[0:_end]...)
	var (
		_converted *dom.HTMLCollection // javascript: HTMLCollection _what_return_name
	)
	_converted = dom.HTMLCollectionFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) GetElementsByClassName(classNames string) (_result *dom.HTMLCollection) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := classNames
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getElementsByClassName", _args[0:_end]...)
	var (
		_converted *dom.HTMLCollection // javascript: HTMLCollection _what_return_name
	)
	_converted = dom.HTMLCollectionFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateElement(localName string, options *Union) (_result *dom.Element) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := localName
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("createElement", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	_converted = dom.ElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateElementNS(namespace *string, qualifiedName string, options *Union) (_result *dom.Element) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := namespace
	_args[0] = _p0
	_end++
	_p1 := qualifiedName
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("createElementNS", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	_converted = dom.ElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateDocumentFragment() (_result *dom.DocumentFragment) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createDocumentFragment", _args[0:_end]...)
	var (
		_converted *dom.DocumentFragment // javascript: DocumentFragment _what_return_name
	)
	_converted = dom.DocumentFragmentFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateTextNode(data string) (_result *dom.Text) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createTextNode", _args[0:_end]...)
	var (
		_converted *dom.Text // javascript: Text _what_return_name
	)
	_converted = dom.TextFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateCDATASection(data string) (_result *dom.CDATASection) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createCDATASection", _args[0:_end]...)
	var (
		_converted *dom.CDATASection // javascript: CDATASection _what_return_name
	)
	_converted = dom.CDATASectionFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateComment(data string) (_result *dom.Comment) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createComment", _args[0:_end]...)
	var (
		_converted *dom.Comment // javascript: Comment _what_return_name
	)
	_converted = dom.CommentFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateProcessingInstruction(target string, data string) (_result *dom.ProcessingInstruction) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := data
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("createProcessingInstruction", _args[0:_end]...)
	var (
		_converted *dom.ProcessingInstruction // javascript: ProcessingInstruction _what_return_name
	)
	_converted = dom.ProcessingInstructionFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) ImportNode(node *dom.Node, deep *bool) (_result *dom.Node) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	if deep != nil {
		_p1 := deep
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("importNode", _args[0:_end]...)
	var (
		_converted *dom.Node // javascript: Node _what_return_name
	)
	_converted = dom.NodeFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) AdoptNode(node *dom.Node) (_result *dom.Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("adoptNode", _args[0:_end]...)
	var (
		_converted *dom.Node // javascript: Node _what_return_name
	)
	_converted = dom.NodeFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateAttribute(localName string) (_result *dom.Attr) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := localName
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createAttribute", _args[0:_end]...)
	var (
		_converted *dom.Attr // javascript: Attr _what_return_name
	)
	_converted = dom.AttrFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateAttributeNS(namespace *string, qualifiedName string) (_result *dom.Attr) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := namespace
	_args[0] = _p0
	_end++
	_p1 := qualifiedName
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("createAttributeNS", _args[0:_end]...)
	var (
		_converted *dom.Attr // javascript: Attr _what_return_name
	)
	_converted = dom.AttrFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateEvent(_interface string) (_result *domcore.Event) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _interface
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createEvent", _args[0:_end]...)
	var (
		_converted *domcore.Event // javascript: Event _what_return_name
	)
	_converted = domcore.EventFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateRange() (_result *dom.Range) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createRange", _args[0:_end]...)
	var (
		_converted *dom.Range // javascript: Range _what_return_name
	)
	_converted = dom.RangeFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateNodeIterator(root *dom.Node, whatToShow *uint, filter *dom.NodeFilterValue) (_result *dom.NodeIterator) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := root.JSValue()
	_args[0] = _p0
	_end++
	if whatToShow != nil {
		_p1 := whatToShow
		_args[1] = _p1
		_end++
	}
	if filter != nil {
		_p2 := filter.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("createNodeIterator", _args[0:_end]...)
	var (
		_converted *dom.NodeIterator // javascript: NodeIterator _what_return_name
	)
	_converted = dom.NodeIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateTreeWalker(root *dom.Node, whatToShow *uint, filter *dom.NodeFilterValue) (_result *dom.TreeWalker) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := root.JSValue()
	_args[0] = _p0
	_end++
	if whatToShow != nil {
		_p1 := whatToShow
		_args[1] = _p1
		_end++
	}
	if filter != nil {
		_p2 := filter.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("createTreeWalker", _args[0:_end]...)
	var (
		_converted *dom.TreeWalker // javascript: TreeWalker _what_return_name
	)
	_converted = dom.TreeWalkerFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) GetElementsByName(elementName string) (_result *dom.NodeList) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := elementName
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getElementsByName", _args[0:_end]...)
	var (
		_converted *dom.NodeList // javascript: NodeList _what_return_name
	)
	_converted = dom.NodeListFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) Open(unused1 *string, unused2 *string) (_result *Document) {
	var (
		_args [2]interface{}
		_end  int
	)
	if unused1 != nil {
		_p0 := unused1
		_args[0] = _p0
		_end++
	}
	if unused2 != nil {
		_p1 := unused2
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("open", _args[0:_end]...)
	var (
		_converted *Document // javascript: Document _what_return_name
	)
	_converted = DocumentFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) Open2(url string, name string, features string) (_result *Window) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := url
	_args[0] = _p0
	_end++
	_p1 := name
	_args[1] = _p1
	_end++
	_p2 := features
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("open", _args[0:_end]...)
	var (
		_converted *Window // javascript: Window _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WindowFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Document) Close() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("close", _args[0:_end]...)
	return
}

func (_this *Document) Write(text ...string) {
	var (
		_args []interface{} = make([]interface{}, 0+len(text))
		_end  int
	)
	for _, __in := range text {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("write", _args[0:_end]...)
	return
}

func (_this *Document) Writeln(text ...string) {
	var (
		_args []interface{} = make([]interface{}, 0+len(text))
		_end  int
	)
	for _, __in := range text {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("writeln", _args[0:_end]...)
	return
}

func (_this *Document) HasFocus() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("hasFocus", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Document) ExecCommand(commandId string, showUI *bool, value *string) (_result bool) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := commandId
	_args[0] = _p0
	_end++
	if showUI != nil {
		_p1 := showUI
		_args[1] = _p1
		_end++
	}
	if value != nil {
		_p2 := value
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("execCommand", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Document) QueryCommandEnabled(commandId string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := commandId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("queryCommandEnabled", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Document) QueryCommandIndeterm(commandId string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := commandId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("queryCommandIndeterm", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Document) QueryCommandState(commandId string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := commandId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("queryCommandState", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Document) QueryCommandSupported(commandId string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := commandId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("queryCommandSupported", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Document) QueryCommandValue(commandId string) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := commandId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("queryCommandValue", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *Document) Clear() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *Document) CaptureEvents() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("captureEvents", _args[0:_end]...)
	return
}

func (_this *Document) ReleaseEvents() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("releaseEvents", _args[0:_end]...)
	return
}

func (_this *Document) GetElementById(elementId string) (_result *dom.Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := elementId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getElementById", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = dom.ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Document) Prepend(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("prepend", _args[0:_end]...)
	return
}

func (_this *Document) Append(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("append", _args[0:_end]...)
	return
}

func (_this *Document) QuerySelector(selectors string) (_result *dom.Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := selectors
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("querySelector", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = dom.ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Document) QuerySelectorAll(selectors string) (_result *dom.NodeList) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := selectors
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("querySelectorAll", _args[0:_end]...)
	var (
		_converted *dom.NodeList // javascript: NodeList _what_return_name
	)
	_converted = dom.NodeListFromJS(_returned)
	_result = _converted
	return
}

// interface: XMLDocument
type XMLDocument struct {
	Document
}

// XMLDocumentFromJS is casting a js.Wrapper into XMLDocument.
func XMLDocumentFromJS(value js.Wrapper) *XMLDocument {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XMLDocument{}
	ret.Value_JS = input
	return ret
}

// interface: DOMImplementation
type DOMImplementation struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *DOMImplementation) JSValue() js.Value {
	return _this.Value_JS
}

// DOMImplementationFromJS is casting a js.Wrapper into DOMImplementation.
func DOMImplementationFromJS(value js.Wrapper) *DOMImplementation {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &DOMImplementation{}
	ret.Value_JS = input
	return ret
}

func (_this *DOMImplementation) CreateDocumentType(qualifiedName string, publicId string, systemId string) (_result *dom.DocumentType) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := qualifiedName
	_args[0] = _p0
	_end++
	_p1 := publicId
	_args[1] = _p1
	_end++
	_p2 := systemId
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("createDocumentType", _args[0:_end]...)
	var (
		_converted *dom.DocumentType // javascript: DocumentType _what_return_name
	)
	_converted = dom.DocumentTypeFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMImplementation) CreateDocument(namespace *string, qualifiedName string, doctype *dom.DocumentType) (_result *XMLDocument) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := namespace
	_args[0] = _p0
	_end++
	_p1 := qualifiedName
	_args[1] = _p1
	_end++
	if doctype != nil {
		_p2 := doctype.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("createDocument", _args[0:_end]...)
	var (
		_converted *XMLDocument // javascript: XMLDocument _what_return_name
	)
	_converted = XMLDocumentFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMImplementation) CreateHTMLDocument(title *string) (_result *Document) {
	var (
		_args [1]interface{}
		_end  int
	)
	if title != nil {
		_p0 := title
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("createHTMLDocument", _args[0:_end]...)
	var (
		_converted *Document // javascript: Document _what_return_name
	)
	_converted = DocumentFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMImplementation) HasFeature() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("hasFeature", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

// interface: HTMLIFrameElement
type HTMLIFrameElement struct {
	html.HTMLElement
}

// HTMLIFrameElementFromJS is casting a js.Wrapper into HTMLIFrameElement.
func HTMLIFrameElementFromJS(value js.Wrapper) *HTMLIFrameElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &HTMLIFrameElement{}
	ret.Value_JS = input
	return ret
}

// Src returning attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLIFrameElement) Src() string {
	var ret string
	value := _this.Value_JS.Get("src")
	ret = (value).String()
	return ret
}

// SetSrc setting attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLIFrameElement) SetSrc(value string) {
	input := value
	_this.Value_JS.Set("src", input)
}

// Srcdoc returning attribute 'srcdoc' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Srcdoc() string {
	var ret string
	value := _this.Value_JS.Get("srcdoc")
	ret = (value).String()
	return ret
}

// SetSrcdoc setting attribute 'srcdoc' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetSrcdoc(value string) {
	input := value
	_this.Value_JS.Set("srcdoc", input)
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Sandbox returning attribute 'sandbox' with
// type domcore.DOMTokenList (idl: DOMTokenList).
func (_this *HTMLIFrameElement) Sandbox() *domcore.DOMTokenList {
	var ret *domcore.DOMTokenList
	value := _this.Value_JS.Get("sandbox")
	ret = domcore.DOMTokenListFromJS(value)
	return ret
}

// Allow returning attribute 'allow' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Allow() string {
	var ret string
	value := _this.Value_JS.Get("allow")
	ret = (value).String()
	return ret
}

// SetAllow setting attribute 'allow' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetAllow(value string) {
	input := value
	_this.Value_JS.Set("allow", input)
}

// AllowFullscreen returning attribute 'allowFullscreen' with
// type bool (idl: boolean).
func (_this *HTMLIFrameElement) AllowFullscreen() bool {
	var ret bool
	value := _this.Value_JS.Get("allowFullscreen")
	ret = (value).Bool()
	return ret
}

// SetAllowFullscreen setting attribute 'allowFullscreen' with
// type bool (idl: boolean).
func (_this *HTMLIFrameElement) SetAllowFullscreen(value bool) {
	input := value
	_this.Value_JS.Set("allowFullscreen", input)
}

// AllowPaymentRequest returning attribute 'allowPaymentRequest' with
// type bool (idl: boolean).
func (_this *HTMLIFrameElement) AllowPaymentRequest() bool {
	var ret bool
	value := _this.Value_JS.Get("allowPaymentRequest")
	ret = (value).Bool()
	return ret
}

// SetAllowPaymentRequest setting attribute 'allowPaymentRequest' with
// type bool (idl: boolean).
func (_this *HTMLIFrameElement) SetAllowPaymentRequest(value bool) {
	input := value
	_this.Value_JS.Set("allowPaymentRequest", input)
}

// Width returning attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Width() string {
	var ret string
	value := _this.Value_JS.Get("width")
	ret = (value).String()
	return ret
}

// SetWidth setting attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetWidth(value string) {
	input := value
	_this.Value_JS.Set("width", input)
}

// Height returning attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Height() string {
	var ret string
	value := _this.Value_JS.Get("height")
	ret = (value).String()
	return ret
}

// SetHeight setting attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetHeight(value string) {
	input := value
	_this.Value_JS.Set("height", input)
}

// ReferrerPolicy returning attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) ReferrerPolicy() string {
	var ret string
	value := _this.Value_JS.Get("referrerPolicy")
	ret = (value).String()
	return ret
}

// SetReferrerPolicy setting attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetReferrerPolicy(value string) {
	input := value
	_this.Value_JS.Set("referrerPolicy", input)
}

// ContentDocument returning attribute 'contentDocument' with
// type Document (idl: Document).
func (_this *HTMLIFrameElement) ContentDocument() *Document {
	var ret *Document
	value := _this.Value_JS.Get("contentDocument")
	if value.Type() != js.TypeNull {
		ret = DocumentFromJS(value)
	}
	return ret
}

// ContentWindow returning attribute 'contentWindow' with
// type Window (idl: Window).
func (_this *HTMLIFrameElement) ContentWindow() *Window {
	var ret *Window
	value := _this.Value_JS.Get("contentWindow")
	if value.Type() != js.TypeNull {
		ret = WindowFromJS(value)
	}
	return ret
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// Scrolling returning attribute 'scrolling' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Scrolling() string {
	var ret string
	value := _this.Value_JS.Get("scrolling")
	ret = (value).String()
	return ret
}

// SetScrolling setting attribute 'scrolling' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetScrolling(value string) {
	input := value
	_this.Value_JS.Set("scrolling", input)
}

// FrameBorder returning attribute 'frameBorder' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) FrameBorder() string {
	var ret string
	value := _this.Value_JS.Get("frameBorder")
	ret = (value).String()
	return ret
}

// SetFrameBorder setting attribute 'frameBorder' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetFrameBorder(value string) {
	input := value
	_this.Value_JS.Set("frameBorder", input)
}

// LongDesc returning attribute 'longDesc' with
// type string (idl: USVString).
func (_this *HTMLIFrameElement) LongDesc() string {
	var ret string
	value := _this.Value_JS.Get("longDesc")
	ret = (value).String()
	return ret
}

// SetLongDesc setting attribute 'longDesc' with
// type string (idl: USVString).
func (_this *HTMLIFrameElement) SetLongDesc(value string) {
	input := value
	_this.Value_JS.Set("longDesc", input)
}

// MarginHeight returning attribute 'marginHeight' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) MarginHeight() string {
	var ret string
	value := _this.Value_JS.Get("marginHeight")
	ret = (value).String()
	return ret
}

// SetMarginHeight setting attribute 'marginHeight' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetMarginHeight(value string) {
	input := value
	_this.Value_JS.Set("marginHeight", input)
}

// MarginWidth returning attribute 'marginWidth' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) MarginWidth() string {
	var ret string
	value := _this.Value_JS.Get("marginWidth")
	ret = (value).String()
	return ret
}

// SetMarginWidth setting attribute 'marginWidth' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetMarginWidth(value string) {
	input := value
	_this.Value_JS.Set("marginWidth", input)
}

func (_this *HTMLIFrameElement) GetSVGDocument() (_result *Document) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSVGDocument", _args[0:_end]...)
	var (
		_converted *Document // javascript: Document _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = DocumentFromJS(_returned)
	}
	_result = _converted
	return
}

// interface: HTMLEmbedElement
type HTMLEmbedElement struct {
	html.HTMLElement
}

// HTMLEmbedElementFromJS is casting a js.Wrapper into HTMLEmbedElement.
func HTMLEmbedElementFromJS(value js.Wrapper) *HTMLEmbedElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &HTMLEmbedElement{}
	ret.Value_JS = input
	return ret
}

// Src returning attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLEmbedElement) Src() string {
	var ret string
	value := _this.Value_JS.Get("src")
	ret = (value).String()
	return ret
}

// SetSrc setting attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLEmbedElement) SetSrc(value string) {
	input := value
	_this.Value_JS.Set("src", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// Width returning attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) Width() string {
	var ret string
	value := _this.Value_JS.Get("width")
	ret = (value).String()
	return ret
}

// SetWidth setting attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) SetWidth(value string) {
	input := value
	_this.Value_JS.Set("width", input)
}

// Height returning attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) Height() string {
	var ret string
	value := _this.Value_JS.Get("height")
	ret = (value).String()
	return ret
}

// SetHeight setting attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) SetHeight(value string) {
	input := value
	_this.Value_JS.Set("height", input)
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

func (_this *HTMLEmbedElement) GetSVGDocument() (_result *Document) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSVGDocument", _args[0:_end]...)
	var (
		_converted *Document // javascript: Document _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = DocumentFromJS(_returned)
	}
	_result = _converted
	return
}

// interface: HTMLObjectElement
type HTMLObjectElement struct {
	html.HTMLElement
}

// HTMLObjectElementFromJS is casting a js.Wrapper into HTMLObjectElement.
func HTMLObjectElementFromJS(value js.Wrapper) *HTMLObjectElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &HTMLObjectElement{}
	ret.Value_JS = input
	return ret
}

// Data returning attribute 'data' with
// type string (idl: USVString).
func (_this *HTMLObjectElement) Data() string {
	var ret string
	value := _this.Value_JS.Get("data")
	ret = (value).String()
	return ret
}

// SetData setting attribute 'data' with
// type string (idl: USVString).
func (_this *HTMLObjectElement) SetData(value string) {
	input := value
	_this.Value_JS.Set("data", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// TypeMustMatch returning attribute 'typeMustMatch' with
// type bool (idl: boolean).
func (_this *HTMLObjectElement) TypeMustMatch() bool {
	var ret bool
	value := _this.Value_JS.Get("typeMustMatch")
	ret = (value).Bool()
	return ret
}

// SetTypeMustMatch setting attribute 'typeMustMatch' with
// type bool (idl: boolean).
func (_this *HTMLObjectElement) SetTypeMustMatch(value bool) {
	input := value
	_this.Value_JS.Set("typeMustMatch", input)
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// UseMap returning attribute 'useMap' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) UseMap() string {
	var ret string
	value := _this.Value_JS.Get("useMap")
	ret = (value).String()
	return ret
}

// SetUseMap setting attribute 'useMap' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetUseMap(value string) {
	input := value
	_this.Value_JS.Set("useMap", input)
}

// Form returning attribute 'form' with
// type html.HTMLFormElement (idl: HTMLFormElement).
func (_this *HTMLObjectElement) Form() *html.HTMLFormElement {
	var ret *html.HTMLFormElement
	value := _this.Value_JS.Get("form")
	if value.Type() != js.TypeNull {
		ret = html.HTMLFormElementFromJS(value)
	}
	return ret
}

// Width returning attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Width() string {
	var ret string
	value := _this.Value_JS.Get("width")
	ret = (value).String()
	return ret
}

// SetWidth setting attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetWidth(value string) {
	input := value
	_this.Value_JS.Set("width", input)
}

// Height returning attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Height() string {
	var ret string
	value := _this.Value_JS.Get("height")
	ret = (value).String()
	return ret
}

// SetHeight setting attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetHeight(value string) {
	input := value
	_this.Value_JS.Set("height", input)
}

// ContentDocument returning attribute 'contentDocument' with
// type Document (idl: Document).
func (_this *HTMLObjectElement) ContentDocument() *Document {
	var ret *Document
	value := _this.Value_JS.Get("contentDocument")
	if value.Type() != js.TypeNull {
		ret = DocumentFromJS(value)
	}
	return ret
}

// ContentWindow returning attribute 'contentWindow' with
// type Window (idl: Window).
func (_this *HTMLObjectElement) ContentWindow() *Window {
	var ret *Window
	value := _this.Value_JS.Get("contentWindow")
	if value.Type() != js.TypeNull {
		ret = WindowFromJS(value)
	}
	return ret
}

// WillValidate returning attribute 'willValidate' with
// type bool (idl: boolean).
func (_this *HTMLObjectElement) WillValidate() bool {
	var ret bool
	value := _this.Value_JS.Get("willValidate")
	ret = (value).Bool()
	return ret
}

// Validity returning attribute 'validity' with
// type html.ValidityState (idl: ValidityState).
func (_this *HTMLObjectElement) Validity() *html.ValidityState {
	var ret *html.ValidityState
	value := _this.Value_JS.Get("validity")
	ret = html.ValidityStateFromJS(value)
	return ret
}

// ValidationMessage returning attribute 'validationMessage' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) ValidationMessage() string {
	var ret string
	value := _this.Value_JS.Get("validationMessage")
	ret = (value).String()
	return ret
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// Archive returning attribute 'archive' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Archive() string {
	var ret string
	value := _this.Value_JS.Get("archive")
	ret = (value).String()
	return ret
}

// SetArchive setting attribute 'archive' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetArchive(value string) {
	input := value
	_this.Value_JS.Set("archive", input)
}

// Code returning attribute 'code' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Code() string {
	var ret string
	value := _this.Value_JS.Get("code")
	ret = (value).String()
	return ret
}

// SetCode setting attribute 'code' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetCode(value string) {
	input := value
	_this.Value_JS.Set("code", input)
}

// Declare returning attribute 'declare' with
// type bool (idl: boolean).
func (_this *HTMLObjectElement) Declare() bool {
	var ret bool
	value := _this.Value_JS.Get("declare")
	ret = (value).Bool()
	return ret
}

// SetDeclare setting attribute 'declare' with
// type bool (idl: boolean).
func (_this *HTMLObjectElement) SetDeclare(value bool) {
	input := value
	_this.Value_JS.Set("declare", input)
}

// Hspace returning attribute 'hspace' with
// type uint (idl: unsigned long).
func (_this *HTMLObjectElement) Hspace() uint {
	var ret uint
	value := _this.Value_JS.Get("hspace")
	ret = (uint)((value).Int())
	return ret
}

// SetHspace setting attribute 'hspace' with
// type uint (idl: unsigned long).
func (_this *HTMLObjectElement) SetHspace(value uint) {
	input := value
	_this.Value_JS.Set("hspace", input)
}

// Standby returning attribute 'standby' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Standby() string {
	var ret string
	value := _this.Value_JS.Get("standby")
	ret = (value).String()
	return ret
}

// SetStandby setting attribute 'standby' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetStandby(value string) {
	input := value
	_this.Value_JS.Set("standby", input)
}

// Vspace returning attribute 'vspace' with
// type uint (idl: unsigned long).
func (_this *HTMLObjectElement) Vspace() uint {
	var ret uint
	value := _this.Value_JS.Get("vspace")
	ret = (uint)((value).Int())
	return ret
}

// SetVspace setting attribute 'vspace' with
// type uint (idl: unsigned long).
func (_this *HTMLObjectElement) SetVspace(value uint) {
	input := value
	_this.Value_JS.Set("vspace", input)
}

// CodeBase returning attribute 'codeBase' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) CodeBase() string {
	var ret string
	value := _this.Value_JS.Get("codeBase")
	ret = (value).String()
	return ret
}

// SetCodeBase setting attribute 'codeBase' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetCodeBase(value string) {
	input := value
	_this.Value_JS.Set("codeBase", input)
}

// CodeType returning attribute 'codeType' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) CodeType() string {
	var ret string
	value := _this.Value_JS.Get("codeType")
	ret = (value).String()
	return ret
}

// SetCodeType setting attribute 'codeType' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetCodeType(value string) {
	input := value
	_this.Value_JS.Set("codeType", input)
}

// Border returning attribute 'border' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Border() string {
	var ret string
	value := _this.Value_JS.Get("border")
	ret = (value).String()
	return ret
}

// SetBorder setting attribute 'border' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetBorder(value string) {
	input := value
	_this.Value_JS.Set("border", input)
}

func (_this *HTMLObjectElement) GetSVGDocument() (_result *Document) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSVGDocument", _args[0:_end]...)
	var (
		_converted *Document // javascript: Document _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = DocumentFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *HTMLObjectElement) CheckValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("checkValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLObjectElement) ReportValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("reportValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLObjectElement) SetCustomValidity(_error string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _error
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setCustomValidity", _args[0:_end]...)
	return
}

// interface: Window
type Window struct {
	domcore.EventTarget
}

// WindowFromJS is casting a js.Wrapper into Window.
func WindowFromJS(value js.Wrapper) *Window {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Window{}
	ret.Value_JS = input
	return ret
}

// Window returning attribute 'window' with
// type Window (idl: Window).
func (_this *Window) Window() *Window {
	var ret *Window
	value := _this.Value_JS.Get("window")
	ret = WindowFromJS(value)
	return ret
}

// Self returning attribute 'self' with
// type Window (idl: Window).
func (_this *Window) Self() *Window {
	var ret *Window
	value := _this.Value_JS.Get("self")
	ret = WindowFromJS(value)
	return ret
}

// Document returning attribute 'document' with
// type Document (idl: Document).
func (_this *Window) Document() *Document {
	var ret *Document
	value := _this.Value_JS.Get("document")
	ret = DocumentFromJS(value)
	return ret
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *Window) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *Window) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Location returning attribute 'location' with
// type htmlmisc.Location (idl: Location).
func (_this *Window) Location() *htmlmisc.Location {
	var ret *htmlmisc.Location
	value := _this.Value_JS.Get("location")
	ret = htmlmisc.LocationFromJS(value)
	return ret
}

// History returning attribute 'history' with
// type htmlmisc.History (idl: History).
func (_this *Window) History() *htmlmisc.History {
	var ret *htmlmisc.History
	value := _this.Value_JS.Get("history")
	ret = htmlmisc.HistoryFromJS(value)
	return ret
}

// CustomElements returning attribute 'customElements' with
// type htmlmisc.CustomElementRegistry (idl: CustomElementRegistry).
func (_this *Window) CustomElements() *htmlmisc.CustomElementRegistry {
	var ret *htmlmisc.CustomElementRegistry
	value := _this.Value_JS.Get("customElements")
	ret = htmlmisc.CustomElementRegistryFromJS(value)
	return ret
}

// Locationbar returning attribute 'locationbar' with
// type htmlmisc.BarProp (idl: BarProp).
func (_this *Window) Locationbar() *htmlmisc.BarProp {
	var ret *htmlmisc.BarProp
	value := _this.Value_JS.Get("locationbar")
	ret = htmlmisc.BarPropFromJS(value)
	return ret
}

// Menubar returning attribute 'menubar' with
// type htmlmisc.BarProp (idl: BarProp).
func (_this *Window) Menubar() *htmlmisc.BarProp {
	var ret *htmlmisc.BarProp
	value := _this.Value_JS.Get("menubar")
	ret = htmlmisc.BarPropFromJS(value)
	return ret
}

// Personalbar returning attribute 'personalbar' with
// type htmlmisc.BarProp (idl: BarProp).
func (_this *Window) Personalbar() *htmlmisc.BarProp {
	var ret *htmlmisc.BarProp
	value := _this.Value_JS.Get("personalbar")
	ret = htmlmisc.BarPropFromJS(value)
	return ret
}

// Scrollbars returning attribute 'scrollbars' with
// type htmlmisc.BarProp (idl: BarProp).
func (_this *Window) Scrollbars() *htmlmisc.BarProp {
	var ret *htmlmisc.BarProp
	value := _this.Value_JS.Get("scrollbars")
	ret = htmlmisc.BarPropFromJS(value)
	return ret
}

// Statusbar returning attribute 'statusbar' with
// type htmlmisc.BarProp (idl: BarProp).
func (_this *Window) Statusbar() *htmlmisc.BarProp {
	var ret *htmlmisc.BarProp
	value := _this.Value_JS.Get("statusbar")
	ret = htmlmisc.BarPropFromJS(value)
	return ret
}

// Toolbar returning attribute 'toolbar' with
// type htmlmisc.BarProp (idl: BarProp).
func (_this *Window) Toolbar() *htmlmisc.BarProp {
	var ret *htmlmisc.BarProp
	value := _this.Value_JS.Get("toolbar")
	ret = htmlmisc.BarPropFromJS(value)
	return ret
}

// Status returning attribute 'status' with
// type string (idl: DOMString).
func (_this *Window) Status() string {
	var ret string
	value := _this.Value_JS.Get("status")
	ret = (value).String()
	return ret
}

// SetStatus setting attribute 'status' with
// type string (idl: DOMString).
func (_this *Window) SetStatus(value string) {
	input := value
	_this.Value_JS.Set("status", input)
}

// Closed returning attribute 'closed' with
// type bool (idl: boolean).
func (_this *Window) Closed() bool {
	var ret bool
	value := _this.Value_JS.Get("closed")
	ret = (value).Bool()
	return ret
}

// Frames returning attribute 'frames' with
// type Window (idl: Window).
func (_this *Window) Frames() *Window {
	var ret *Window
	value := _this.Value_JS.Get("frames")
	ret = WindowFromJS(value)
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *Window) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// Top returning attribute 'top' with
// type Window (idl: Window).
func (_this *Window) Top() *Window {
	var ret *Window
	value := _this.Value_JS.Get("top")
	if value.Type() != js.TypeNull {
		ret = WindowFromJS(value)
	}
	return ret
}

// Opener returning attribute 'opener' with
// type Any (idl: any).
func (_this *Window) Opener() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("opener")
	ret = value
	return ret
}

// SetOpener setting attribute 'opener' with
// type Any (idl: any).
func (_this *Window) SetOpener(value interface{}) {
	input := value
	_this.Value_JS.Set("opener", input)
}

// Parent returning attribute 'parent' with
// type Window (idl: Window).
func (_this *Window) Parent() *Window {
	var ret *Window
	value := _this.Value_JS.Get("parent")
	if value.Type() != js.TypeNull {
		ret = WindowFromJS(value)
	}
	return ret
}

// FrameElement returning attribute 'frameElement' with
// type dom.Element (idl: Element).
func (_this *Window) FrameElement() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("frameElement")
	if value.Type() != js.TypeNull {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// Navigator returning attribute 'navigator' with
// type htmlmisc.Navigator (idl: Navigator).
func (_this *Window) Navigator() *htmlmisc.Navigator {
	var ret *htmlmisc.Navigator
	value := _this.Value_JS.Get("navigator")
	ret = htmlmisc.NavigatorFromJS(value)
	return ret
}

// ApplicationCache returning attribute 'applicationCache' with
// type htmlmisc.ApplicationCache (idl: ApplicationCache).
func (_this *Window) ApplicationCache() *htmlmisc.ApplicationCache {
	var ret *htmlmisc.ApplicationCache
	value := _this.Value_JS.Get("applicationCache")
	ret = htmlmisc.ApplicationCacheFromJS(value)
	return ret
}

// Event returning attribute 'event' with
// type Any (idl: any).
func (_this *Window) Event() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("event")
	ret = value
	return ret
}

// External returning attribute 'external' with
// type htmlmisc.External (idl: External).
func (_this *Window) External() *htmlmisc.External {
	var ret *htmlmisc.External
	value := _this.Value_JS.Get("external")
	ret = htmlmisc.ExternalFromJS(value)
	return ret
}

// Onabort returning attribute 'onabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onabort() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onabort")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnabort setting attribute 'onabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnabort(value *domcore.EventHandler) {
	var __callback25 js.Value
	if value != nil {
		__callback25 = (*value).Value
	} else {
		__callback25 = js.Null()
	}
	input := __callback25
	_this.Value_JS.Set("onabort", input)
}

// Onauxclick returning attribute 'onauxclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onauxclick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onauxclick")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnauxclick setting attribute 'onauxclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnauxclick(value *domcore.EventHandler) {
	var __callback26 js.Value
	if value != nil {
		__callback26 = (*value).Value
	} else {
		__callback26 = js.Null()
	}
	input := __callback26
	_this.Value_JS.Set("onauxclick", input)
}

// Onblur returning attribute 'onblur' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onblur() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onblur")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnblur setting attribute 'onblur' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnblur(value *domcore.EventHandler) {
	var __callback27 js.Value
	if value != nil {
		__callback27 = (*value).Value
	} else {
		__callback27 = js.Null()
	}
	input := __callback27
	_this.Value_JS.Set("onblur", input)
}

// Oncancel returning attribute 'oncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Oncancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncancel")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncancel setting attribute 'oncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOncancel(value *domcore.EventHandler) {
	var __callback28 js.Value
	if value != nil {
		__callback28 = (*value).Value
	} else {
		__callback28 = js.Null()
	}
	input := __callback28
	_this.Value_JS.Set("oncancel", input)
}

// Oncanplay returning attribute 'oncanplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Oncanplay() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanplay")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncanplay setting attribute 'oncanplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOncanplay(value *domcore.EventHandler) {
	var __callback29 js.Value
	if value != nil {
		__callback29 = (*value).Value
	} else {
		__callback29 = js.Null()
	}
	input := __callback29
	_this.Value_JS.Set("oncanplay", input)
}

// Oncanplaythrough returning attribute 'oncanplaythrough' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Oncanplaythrough() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanplaythrough")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncanplaythrough setting attribute 'oncanplaythrough' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOncanplaythrough(value *domcore.EventHandler) {
	var __callback30 js.Value
	if value != nil {
		__callback30 = (*value).Value
	} else {
		__callback30 = js.Null()
	}
	input := __callback30
	_this.Value_JS.Set("oncanplaythrough", input)
}

// Onchange returning attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnchange setting attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnchange(value *domcore.EventHandler) {
	var __callback31 js.Value
	if value != nil {
		__callback31 = (*value).Value
	} else {
		__callback31 = js.Null()
	}
	input := __callback31
	_this.Value_JS.Set("onchange", input)
}

// Onclick returning attribute 'onclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onclick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclick")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnclick setting attribute 'onclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnclick(value *domcore.EventHandler) {
	var __callback32 js.Value
	if value != nil {
		__callback32 = (*value).Value
	} else {
		__callback32 = js.Null()
	}
	input := __callback32
	_this.Value_JS.Set("onclick", input)
}

// Onclose returning attribute 'onclose' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onclose() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclose")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnclose setting attribute 'onclose' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnclose(value *domcore.EventHandler) {
	var __callback33 js.Value
	if value != nil {
		__callback33 = (*value).Value
	} else {
		__callback33 = js.Null()
	}
	input := __callback33
	_this.Value_JS.Set("onclose", input)
}

// Oncontextmenu returning attribute 'oncontextmenu' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Oncontextmenu() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncontextmenu")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncontextmenu setting attribute 'oncontextmenu' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOncontextmenu(value *domcore.EventHandler) {
	var __callback34 js.Value
	if value != nil {
		__callback34 = (*value).Value
	} else {
		__callback34 = js.Null()
	}
	input := __callback34
	_this.Value_JS.Set("oncontextmenu", input)
}

// Oncuechange returning attribute 'oncuechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Oncuechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncuechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncuechange setting attribute 'oncuechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOncuechange(value *domcore.EventHandler) {
	var __callback35 js.Value
	if value != nil {
		__callback35 = (*value).Value
	} else {
		__callback35 = js.Null()
	}
	input := __callback35
	_this.Value_JS.Set("oncuechange", input)
}

// Ondblclick returning attribute 'ondblclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Ondblclick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondblclick")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndblclick setting attribute 'ondblclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOndblclick(value *domcore.EventHandler) {
	var __callback36 js.Value
	if value != nil {
		__callback36 = (*value).Value
	} else {
		__callback36 = js.Null()
	}
	input := __callback36
	_this.Value_JS.Set("ondblclick", input)
}

// Ondrag returning attribute 'ondrag' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Ondrag() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondrag")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndrag setting attribute 'ondrag' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOndrag(value *domcore.EventHandler) {
	var __callback37 js.Value
	if value != nil {
		__callback37 = (*value).Value
	} else {
		__callback37 = js.Null()
	}
	input := __callback37
	_this.Value_JS.Set("ondrag", input)
}

// Ondragend returning attribute 'ondragend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Ondragend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragend")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragend setting attribute 'ondragend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOndragend(value *domcore.EventHandler) {
	var __callback38 js.Value
	if value != nil {
		__callback38 = (*value).Value
	} else {
		__callback38 = js.Null()
	}
	input := __callback38
	_this.Value_JS.Set("ondragend", input)
}

// Ondragenter returning attribute 'ondragenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Ondragenter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragenter")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragenter setting attribute 'ondragenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOndragenter(value *domcore.EventHandler) {
	var __callback39 js.Value
	if value != nil {
		__callback39 = (*value).Value
	} else {
		__callback39 = js.Null()
	}
	input := __callback39
	_this.Value_JS.Set("ondragenter", input)
}

// Ondragexit returning attribute 'ondragexit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Ondragexit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragexit")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragexit setting attribute 'ondragexit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOndragexit(value *domcore.EventHandler) {
	var __callback40 js.Value
	if value != nil {
		__callback40 = (*value).Value
	} else {
		__callback40 = js.Null()
	}
	input := __callback40
	_this.Value_JS.Set("ondragexit", input)
}

// Ondragleave returning attribute 'ondragleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Ondragleave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragleave")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragleave setting attribute 'ondragleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOndragleave(value *domcore.EventHandler) {
	var __callback41 js.Value
	if value != nil {
		__callback41 = (*value).Value
	} else {
		__callback41 = js.Null()
	}
	input := __callback41
	_this.Value_JS.Set("ondragleave", input)
}

// Ondragover returning attribute 'ondragover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Ondragover() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragover")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragover setting attribute 'ondragover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOndragover(value *domcore.EventHandler) {
	var __callback42 js.Value
	if value != nil {
		__callback42 = (*value).Value
	} else {
		__callback42 = js.Null()
	}
	input := __callback42
	_this.Value_JS.Set("ondragover", input)
}

// Ondragstart returning attribute 'ondragstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Ondragstart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragstart")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragstart setting attribute 'ondragstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOndragstart(value *domcore.EventHandler) {
	var __callback43 js.Value
	if value != nil {
		__callback43 = (*value).Value
	} else {
		__callback43 = js.Null()
	}
	input := __callback43
	_this.Value_JS.Set("ondragstart", input)
}

// Ondrop returning attribute 'ondrop' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Ondrop() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondrop")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndrop setting attribute 'ondrop' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOndrop(value *domcore.EventHandler) {
	var __callback44 js.Value
	if value != nil {
		__callback44 = (*value).Value
	} else {
		__callback44 = js.Null()
	}
	input := __callback44
	_this.Value_JS.Set("ondrop", input)
}

// Ondurationchange returning attribute 'ondurationchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Ondurationchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondurationchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndurationchange setting attribute 'ondurationchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOndurationchange(value *domcore.EventHandler) {
	var __callback45 js.Value
	if value != nil {
		__callback45 = (*value).Value
	} else {
		__callback45 = js.Null()
	}
	input := __callback45
	_this.Value_JS.Set("ondurationchange", input)
}

// Onemptied returning attribute 'onemptied' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onemptied() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onemptied")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnemptied setting attribute 'onemptied' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnemptied(value *domcore.EventHandler) {
	var __callback46 js.Value
	if value != nil {
		__callback46 = (*value).Value
	} else {
		__callback46 = js.Null()
	}
	input := __callback46
	_this.Value_JS.Set("onemptied", input)
}

// Onended returning attribute 'onended' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onended() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onended")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnended setting attribute 'onended' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnended(value *domcore.EventHandler) {
	var __callback47 js.Value
	if value != nil {
		__callback47 = (*value).Value
	} else {
		__callback47 = js.Null()
	}
	input := __callback47
	_this.Value_JS.Set("onended", input)
}

// Onerror returning attribute 'onerror' with
// type html.OnErrorEventHandler (idl: OnErrorEventHandlerNonNull).
func (_this *Window) Onerror() html.OnErrorEventHandlerFunc {
	var ret html.OnErrorEventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull {
		ret = html.OnErrorEventHandlerFromJS(value)
	}
	return ret
}

// SetOnerror setting attribute 'onerror' with
// type html.OnErrorEventHandler (idl: OnErrorEventHandlerNonNull).
func (_this *Window) SetOnerror(value *html.OnErrorEventHandler) {
	var __callback48 js.Value
	if value != nil {
		__callback48 = (*value).Value
	} else {
		__callback48 = js.Null()
	}
	input := __callback48
	_this.Value_JS.Set("onerror", input)
}

// Onfocus returning attribute 'onfocus' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onfocus() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfocus")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnfocus setting attribute 'onfocus' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnfocus(value *domcore.EventHandler) {
	var __callback49 js.Value
	if value != nil {
		__callback49 = (*value).Value
	} else {
		__callback49 = js.Null()
	}
	input := __callback49
	_this.Value_JS.Set("onfocus", input)
}

// Onformdata returning attribute 'onformdata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onformdata() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onformdata")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnformdata setting attribute 'onformdata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnformdata(value *domcore.EventHandler) {
	var __callback50 js.Value
	if value != nil {
		__callback50 = (*value).Value
	} else {
		__callback50 = js.Null()
	}
	input := __callback50
	_this.Value_JS.Set("onformdata", input)
}

// Oninput returning attribute 'oninput' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Oninput() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninput")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOninput setting attribute 'oninput' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOninput(value *domcore.EventHandler) {
	var __callback51 js.Value
	if value != nil {
		__callback51 = (*value).Value
	} else {
		__callback51 = js.Null()
	}
	input := __callback51
	_this.Value_JS.Set("oninput", input)
}

// Oninvalid returning attribute 'oninvalid' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Oninvalid() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninvalid")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOninvalid setting attribute 'oninvalid' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOninvalid(value *domcore.EventHandler) {
	var __callback52 js.Value
	if value != nil {
		__callback52 = (*value).Value
	} else {
		__callback52 = js.Null()
	}
	input := __callback52
	_this.Value_JS.Set("oninvalid", input)
}

// Onkeydown returning attribute 'onkeydown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onkeydown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeydown")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnkeydown setting attribute 'onkeydown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnkeydown(value *domcore.EventHandler) {
	var __callback53 js.Value
	if value != nil {
		__callback53 = (*value).Value
	} else {
		__callback53 = js.Null()
	}
	input := __callback53
	_this.Value_JS.Set("onkeydown", input)
}

// Onkeypress returning attribute 'onkeypress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onkeypress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeypress")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnkeypress setting attribute 'onkeypress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnkeypress(value *domcore.EventHandler) {
	var __callback54 js.Value
	if value != nil {
		__callback54 = (*value).Value
	} else {
		__callback54 = js.Null()
	}
	input := __callback54
	_this.Value_JS.Set("onkeypress", input)
}

// Onkeyup returning attribute 'onkeyup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onkeyup() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeyup")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnkeyup setting attribute 'onkeyup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnkeyup(value *domcore.EventHandler) {
	var __callback55 js.Value
	if value != nil {
		__callback55 = (*value).Value
	} else {
		__callback55 = js.Null()
	}
	input := __callback55
	_this.Value_JS.Set("onkeyup", input)
}

// Onload returning attribute 'onload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onload() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onload")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnload setting attribute 'onload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnload(value *domcore.EventHandler) {
	var __callback56 js.Value
	if value != nil {
		__callback56 = (*value).Value
	} else {
		__callback56 = js.Null()
	}
	input := __callback56
	_this.Value_JS.Set("onload", input)
}

// Onloadeddata returning attribute 'onloadeddata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onloadeddata() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadeddata")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnloadeddata setting attribute 'onloadeddata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnloadeddata(value *domcore.EventHandler) {
	var __callback57 js.Value
	if value != nil {
		__callback57 = (*value).Value
	} else {
		__callback57 = js.Null()
	}
	input := __callback57
	_this.Value_JS.Set("onloadeddata", input)
}

// Onloadedmetadata returning attribute 'onloadedmetadata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onloadedmetadata() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadedmetadata")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnloadedmetadata setting attribute 'onloadedmetadata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnloadedmetadata(value *domcore.EventHandler) {
	var __callback58 js.Value
	if value != nil {
		__callback58 = (*value).Value
	} else {
		__callback58 = js.Null()
	}
	input := __callback58
	_this.Value_JS.Set("onloadedmetadata", input)
}

// Onloadend returning attribute 'onloadend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onloadend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadend")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnloadend setting attribute 'onloadend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnloadend(value *domcore.EventHandler) {
	var __callback59 js.Value
	if value != nil {
		__callback59 = (*value).Value
	} else {
		__callback59 = js.Null()
	}
	input := __callback59
	_this.Value_JS.Set("onloadend", input)
}

// Onloadstart returning attribute 'onloadstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onloadstart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadstart")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnloadstart setting attribute 'onloadstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnloadstart(value *domcore.EventHandler) {
	var __callback60 js.Value
	if value != nil {
		__callback60 = (*value).Value
	} else {
		__callback60 = js.Null()
	}
	input := __callback60
	_this.Value_JS.Set("onloadstart", input)
}

// Onmousedown returning attribute 'onmousedown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onmousedown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmousedown")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmousedown setting attribute 'onmousedown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnmousedown(value *domcore.EventHandler) {
	var __callback61 js.Value
	if value != nil {
		__callback61 = (*value).Value
	} else {
		__callback61 = js.Null()
	}
	input := __callback61
	_this.Value_JS.Set("onmousedown", input)
}

// Onmouseenter returning attribute 'onmouseenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onmouseenter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseenter")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseenter setting attribute 'onmouseenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnmouseenter(value *domcore.EventHandler) {
	var __callback62 js.Value
	if value != nil {
		__callback62 = (*value).Value
	} else {
		__callback62 = js.Null()
	}
	input := __callback62
	_this.Value_JS.Set("onmouseenter", input)
}

// Onmouseleave returning attribute 'onmouseleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onmouseleave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseleave")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseleave setting attribute 'onmouseleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnmouseleave(value *domcore.EventHandler) {
	var __callback63 js.Value
	if value != nil {
		__callback63 = (*value).Value
	} else {
		__callback63 = js.Null()
	}
	input := __callback63
	_this.Value_JS.Set("onmouseleave", input)
}

// Onmousemove returning attribute 'onmousemove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onmousemove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmousemove")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmousemove setting attribute 'onmousemove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnmousemove(value *domcore.EventHandler) {
	var __callback64 js.Value
	if value != nil {
		__callback64 = (*value).Value
	} else {
		__callback64 = js.Null()
	}
	input := __callback64
	_this.Value_JS.Set("onmousemove", input)
}

// Onmouseout returning attribute 'onmouseout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onmouseout() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseout")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseout setting attribute 'onmouseout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnmouseout(value *domcore.EventHandler) {
	var __callback65 js.Value
	if value != nil {
		__callback65 = (*value).Value
	} else {
		__callback65 = js.Null()
	}
	input := __callback65
	_this.Value_JS.Set("onmouseout", input)
}

// Onmouseover returning attribute 'onmouseover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onmouseover() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseover")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseover setting attribute 'onmouseover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnmouseover(value *domcore.EventHandler) {
	var __callback66 js.Value
	if value != nil {
		__callback66 = (*value).Value
	} else {
		__callback66 = js.Null()
	}
	input := __callback66
	_this.Value_JS.Set("onmouseover", input)
}

// Onmouseup returning attribute 'onmouseup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onmouseup() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseup")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseup setting attribute 'onmouseup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnmouseup(value *domcore.EventHandler) {
	var __callback67 js.Value
	if value != nil {
		__callback67 = (*value).Value
	} else {
		__callback67 = js.Null()
	}
	input := __callback67
	_this.Value_JS.Set("onmouseup", input)
}

// Onwheel returning attribute 'onwheel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onwheel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onwheel")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnwheel setting attribute 'onwheel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnwheel(value *domcore.EventHandler) {
	var __callback68 js.Value
	if value != nil {
		__callback68 = (*value).Value
	} else {
		__callback68 = js.Null()
	}
	input := __callback68
	_this.Value_JS.Set("onwheel", input)
}

// Onpause returning attribute 'onpause' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onpause() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpause")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpause setting attribute 'onpause' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnpause(value *domcore.EventHandler) {
	var __callback69 js.Value
	if value != nil {
		__callback69 = (*value).Value
	} else {
		__callback69 = js.Null()
	}
	input := __callback69
	_this.Value_JS.Set("onpause", input)
}

// Onplay returning attribute 'onplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onplay() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onplay")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnplay setting attribute 'onplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnplay(value *domcore.EventHandler) {
	var __callback70 js.Value
	if value != nil {
		__callback70 = (*value).Value
	} else {
		__callback70 = js.Null()
	}
	input := __callback70
	_this.Value_JS.Set("onplay", input)
}

// Onplaying returning attribute 'onplaying' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onplaying() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onplaying")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnplaying setting attribute 'onplaying' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnplaying(value *domcore.EventHandler) {
	var __callback71 js.Value
	if value != nil {
		__callback71 = (*value).Value
	} else {
		__callback71 = js.Null()
	}
	input := __callback71
	_this.Value_JS.Set("onplaying", input)
}

// Onprogress returning attribute 'onprogress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onprogress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onprogress")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnprogress setting attribute 'onprogress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnprogress(value *domcore.EventHandler) {
	var __callback72 js.Value
	if value != nil {
		__callback72 = (*value).Value
	} else {
		__callback72 = js.Null()
	}
	input := __callback72
	_this.Value_JS.Set("onprogress", input)
}

// Onratechange returning attribute 'onratechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onratechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onratechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnratechange setting attribute 'onratechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnratechange(value *domcore.EventHandler) {
	var __callback73 js.Value
	if value != nil {
		__callback73 = (*value).Value
	} else {
		__callback73 = js.Null()
	}
	input := __callback73
	_this.Value_JS.Set("onratechange", input)
}

// Onreset returning attribute 'onreset' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onreset() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onreset")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnreset setting attribute 'onreset' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnreset(value *domcore.EventHandler) {
	var __callback74 js.Value
	if value != nil {
		__callback74 = (*value).Value
	} else {
		__callback74 = js.Null()
	}
	input := __callback74
	_this.Value_JS.Set("onreset", input)
}

// Onresize returning attribute 'onresize' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onresize() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onresize")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnresize setting attribute 'onresize' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnresize(value *domcore.EventHandler) {
	var __callback75 js.Value
	if value != nil {
		__callback75 = (*value).Value
	} else {
		__callback75 = js.Null()
	}
	input := __callback75
	_this.Value_JS.Set("onresize", input)
}

// Onscroll returning attribute 'onscroll' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onscroll() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onscroll")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnscroll setting attribute 'onscroll' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnscroll(value *domcore.EventHandler) {
	var __callback76 js.Value
	if value != nil {
		__callback76 = (*value).Value
	} else {
		__callback76 = js.Null()
	}
	input := __callback76
	_this.Value_JS.Set("onscroll", input)
}

// Onsecuritypolicyviolation returning attribute 'onsecuritypolicyviolation' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onsecuritypolicyviolation() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsecuritypolicyviolation")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnsecuritypolicyviolation setting attribute 'onsecuritypolicyviolation' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnsecuritypolicyviolation(value *domcore.EventHandler) {
	var __callback77 js.Value
	if value != nil {
		__callback77 = (*value).Value
	} else {
		__callback77 = js.Null()
	}
	input := __callback77
	_this.Value_JS.Set("onsecuritypolicyviolation", input)
}

// Onseeked returning attribute 'onseeked' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onseeked() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onseeked")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnseeked setting attribute 'onseeked' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnseeked(value *domcore.EventHandler) {
	var __callback78 js.Value
	if value != nil {
		__callback78 = (*value).Value
	} else {
		__callback78 = js.Null()
	}
	input := __callback78
	_this.Value_JS.Set("onseeked", input)
}

// Onseeking returning attribute 'onseeking' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onseeking() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onseeking")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnseeking setting attribute 'onseeking' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnseeking(value *domcore.EventHandler) {
	var __callback79 js.Value
	if value != nil {
		__callback79 = (*value).Value
	} else {
		__callback79 = js.Null()
	}
	input := __callback79
	_this.Value_JS.Set("onseeking", input)
}

// Onselect returning attribute 'onselect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onselect() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselect")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnselect setting attribute 'onselect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnselect(value *domcore.EventHandler) {
	var __callback80 js.Value
	if value != nil {
		__callback80 = (*value).Value
	} else {
		__callback80 = js.Null()
	}
	input := __callback80
	_this.Value_JS.Set("onselect", input)
}

// Onstalled returning attribute 'onstalled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onstalled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onstalled")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnstalled setting attribute 'onstalled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnstalled(value *domcore.EventHandler) {
	var __callback81 js.Value
	if value != nil {
		__callback81 = (*value).Value
	} else {
		__callback81 = js.Null()
	}
	input := __callback81
	_this.Value_JS.Set("onstalled", input)
}

// Onsubmit returning attribute 'onsubmit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onsubmit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsubmit")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnsubmit setting attribute 'onsubmit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnsubmit(value *domcore.EventHandler) {
	var __callback82 js.Value
	if value != nil {
		__callback82 = (*value).Value
	} else {
		__callback82 = js.Null()
	}
	input := __callback82
	_this.Value_JS.Set("onsubmit", input)
}

// Onsuspend returning attribute 'onsuspend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onsuspend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsuspend")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnsuspend setting attribute 'onsuspend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnsuspend(value *domcore.EventHandler) {
	var __callback83 js.Value
	if value != nil {
		__callback83 = (*value).Value
	} else {
		__callback83 = js.Null()
	}
	input := __callback83
	_this.Value_JS.Set("onsuspend", input)
}

// Ontimeupdate returning attribute 'ontimeupdate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Ontimeupdate() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontimeupdate")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOntimeupdate setting attribute 'ontimeupdate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOntimeupdate(value *domcore.EventHandler) {
	var __callback84 js.Value
	if value != nil {
		__callback84 = (*value).Value
	} else {
		__callback84 = js.Null()
	}
	input := __callback84
	_this.Value_JS.Set("ontimeupdate", input)
}

// Ontoggle returning attribute 'ontoggle' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Ontoggle() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontoggle")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOntoggle setting attribute 'ontoggle' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOntoggle(value *domcore.EventHandler) {
	var __callback85 js.Value
	if value != nil {
		__callback85 = (*value).Value
	} else {
		__callback85 = js.Null()
	}
	input := __callback85
	_this.Value_JS.Set("ontoggle", input)
}

// Onvolumechange returning attribute 'onvolumechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onvolumechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvolumechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnvolumechange setting attribute 'onvolumechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnvolumechange(value *domcore.EventHandler) {
	var __callback86 js.Value
	if value != nil {
		__callback86 = (*value).Value
	} else {
		__callback86 = js.Null()
	}
	input := __callback86
	_this.Value_JS.Set("onvolumechange", input)
}

// Onwaiting returning attribute 'onwaiting' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onwaiting() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onwaiting")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnwaiting setting attribute 'onwaiting' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnwaiting(value *domcore.EventHandler) {
	var __callback87 js.Value
	if value != nil {
		__callback87 = (*value).Value
	} else {
		__callback87 = js.Null()
	}
	input := __callback87
	_this.Value_JS.Set("onwaiting", input)
}

// Onafterprint returning attribute 'onafterprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onafterprint() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onafterprint")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnafterprint setting attribute 'onafterprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnafterprint(value *domcore.EventHandler) {
	var __callback88 js.Value
	if value != nil {
		__callback88 = (*value).Value
	} else {
		__callback88 = js.Null()
	}
	input := __callback88
	_this.Value_JS.Set("onafterprint", input)
}

// Onbeforeprint returning attribute 'onbeforeprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onbeforeprint() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbeforeprint")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnbeforeprint setting attribute 'onbeforeprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnbeforeprint(value *domcore.EventHandler) {
	var __callback89 js.Value
	if value != nil {
		__callback89 = (*value).Value
	} else {
		__callback89 = js.Null()
	}
	input := __callback89
	_this.Value_JS.Set("onbeforeprint", input)
}

// Onbeforeunload returning attribute 'onbeforeunload' with
// type html.OnBeforeUnloadEventHandler (idl: OnBeforeUnloadEventHandlerNonNull).
func (_this *Window) Onbeforeunload() html.OnBeforeUnloadEventHandlerFunc {
	var ret html.OnBeforeUnloadEventHandlerFunc
	value := _this.Value_JS.Get("onbeforeunload")
	if value.Type() != js.TypeNull {
		ret = html.OnBeforeUnloadEventHandlerFromJS(value)
	}
	return ret
}

// SetOnbeforeunload setting attribute 'onbeforeunload' with
// type html.OnBeforeUnloadEventHandler (idl: OnBeforeUnloadEventHandlerNonNull).
func (_this *Window) SetOnbeforeunload(value *html.OnBeforeUnloadEventHandler) {
	var __callback90 js.Value
	if value != nil {
		__callback90 = (*value).Value
	} else {
		__callback90 = js.Null()
	}
	input := __callback90
	_this.Value_JS.Set("onbeforeunload", input)
}

// Onhashchange returning attribute 'onhashchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onhashchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onhashchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnhashchange setting attribute 'onhashchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnhashchange(value *domcore.EventHandler) {
	var __callback91 js.Value
	if value != nil {
		__callback91 = (*value).Value
	} else {
		__callback91 = js.Null()
	}
	input := __callback91
	_this.Value_JS.Set("onhashchange", input)
}

// Onlanguagechange returning attribute 'onlanguagechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onlanguagechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onlanguagechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnlanguagechange setting attribute 'onlanguagechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnlanguagechange(value *domcore.EventHandler) {
	var __callback92 js.Value
	if value != nil {
		__callback92 = (*value).Value
	} else {
		__callback92 = js.Null()
	}
	input := __callback92
	_this.Value_JS.Set("onlanguagechange", input)
}

// Onmessage returning attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onmessage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessage")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmessage setting attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnmessage(value *domcore.EventHandler) {
	var __callback93 js.Value
	if value != nil {
		__callback93 = (*value).Value
	} else {
		__callback93 = js.Null()
	}
	input := __callback93
	_this.Value_JS.Set("onmessage", input)
}

// Onmessageerror returning attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onmessageerror() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessageerror")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmessageerror setting attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnmessageerror(value *domcore.EventHandler) {
	var __callback94 js.Value
	if value != nil {
		__callback94 = (*value).Value
	} else {
		__callback94 = js.Null()
	}
	input := __callback94
	_this.Value_JS.Set("onmessageerror", input)
}

// Onoffline returning attribute 'onoffline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onoffline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onoffline")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnoffline setting attribute 'onoffline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnoffline(value *domcore.EventHandler) {
	var __callback95 js.Value
	if value != nil {
		__callback95 = (*value).Value
	} else {
		__callback95 = js.Null()
	}
	input := __callback95
	_this.Value_JS.Set("onoffline", input)
}

// Ononline returning attribute 'ononline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Ononline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ononline")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnonline setting attribute 'ononline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnonline(value *domcore.EventHandler) {
	var __callback96 js.Value
	if value != nil {
		__callback96 = (*value).Value
	} else {
		__callback96 = js.Null()
	}
	input := __callback96
	_this.Value_JS.Set("ononline", input)
}

// Onpagehide returning attribute 'onpagehide' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onpagehide() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpagehide")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpagehide setting attribute 'onpagehide' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnpagehide(value *domcore.EventHandler) {
	var __callback97 js.Value
	if value != nil {
		__callback97 = (*value).Value
	} else {
		__callback97 = js.Null()
	}
	input := __callback97
	_this.Value_JS.Set("onpagehide", input)
}

// Onpageshow returning attribute 'onpageshow' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onpageshow() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpageshow")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpageshow setting attribute 'onpageshow' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnpageshow(value *domcore.EventHandler) {
	var __callback98 js.Value
	if value != nil {
		__callback98 = (*value).Value
	} else {
		__callback98 = js.Null()
	}
	input := __callback98
	_this.Value_JS.Set("onpageshow", input)
}

// Onpopstate returning attribute 'onpopstate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onpopstate() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpopstate")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpopstate setting attribute 'onpopstate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnpopstate(value *domcore.EventHandler) {
	var __callback99 js.Value
	if value != nil {
		__callback99 = (*value).Value
	} else {
		__callback99 = js.Null()
	}
	input := __callback99
	_this.Value_JS.Set("onpopstate", input)
}

// Onrejectionhandled returning attribute 'onrejectionhandled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onrejectionhandled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onrejectionhandled")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnrejectionhandled setting attribute 'onrejectionhandled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnrejectionhandled(value *domcore.EventHandler) {
	var __callback100 js.Value
	if value != nil {
		__callback100 = (*value).Value
	} else {
		__callback100 = js.Null()
	}
	input := __callback100
	_this.Value_JS.Set("onrejectionhandled", input)
}

// Onstorage returning attribute 'onstorage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onstorage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onstorage")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnstorage setting attribute 'onstorage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnstorage(value *domcore.EventHandler) {
	var __callback101 js.Value
	if value != nil {
		__callback101 = (*value).Value
	} else {
		__callback101 = js.Null()
	}
	input := __callback101
	_this.Value_JS.Set("onstorage", input)
}

// Onunhandledrejection returning attribute 'onunhandledrejection' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onunhandledrejection() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunhandledrejection")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnunhandledrejection setting attribute 'onunhandledrejection' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnunhandledrejection(value *domcore.EventHandler) {
	var __callback102 js.Value
	if value != nil {
		__callback102 = (*value).Value
	} else {
		__callback102 = js.Null()
	}
	input := __callback102
	_this.Value_JS.Set("onunhandledrejection", input)
}

// Onunload returning attribute 'onunload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) Onunload() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunload")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnunload setting attribute 'onunload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) SetOnunload(value *domcore.EventHandler) {
	var __callback103 js.Value
	if value != nil {
		__callback103 = (*value).Value
	} else {
		__callback103 = js.Null()
	}
	input := __callback103
	_this.Value_JS.Set("onunload", input)
}

// Origin returning attribute 'origin' with
// type string (idl: USVString).
func (_this *Window) Origin() string {
	var ret string
	value := _this.Value_JS.Get("origin")
	ret = (value).String()
	return ret
}

// SessionStorage returning attribute 'sessionStorage' with
// type htmlmisc.Storage (idl: Storage).
func (_this *Window) SessionStorage() *htmlmisc.Storage {
	var ret *htmlmisc.Storage
	value := _this.Value_JS.Get("sessionStorage")
	ret = htmlmisc.StorageFromJS(value)
	return ret
}

// LocalStorage returning attribute 'localStorage' with
// type htmlmisc.Storage (idl: Storage).
func (_this *Window) LocalStorage() *htmlmisc.Storage {
	var ret *htmlmisc.Storage
	value := _this.Value_JS.Get("localStorage")
	ret = htmlmisc.StorageFromJS(value)
	return ret
}

func (_this *Window) Close() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("close", _args[0:_end]...)
	return
}

func (_this *Window) Stop() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("stop", _args[0:_end]...)
	return
}

func (_this *Window) Focus() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("focus", _args[0:_end]...)
	return
}

func (_this *Window) Blur() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("blur", _args[0:_end]...)
	return
}

func (_this *Window) Open(url *string, target *string, features *string) (_result *Window) {
	var (
		_args [3]interface{}
		_end  int
	)
	if url != nil {
		_p0 := url
		_args[0] = _p0
		_end++
	}
	if target != nil {
		_p1 := target
		_args[1] = _p1
		_end++
	}
	if features != nil {
		_p2 := features
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("open", _args[0:_end]...)
	var (
		_converted *Window // javascript: Window _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WindowFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Window) Alert() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("alert", _args[0:_end]...)
	return
}

func (_this *Window) Alert2(message string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := message
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("alert", _args[0:_end]...)
	return
}

func (_this *Window) Confirm(message *string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	if message != nil {
		_p0 := message
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("confirm", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Window) Prompt(message *string, _default *string) (_result *string) {
	var (
		_args [2]interface{}
		_end  int
	)
	if message != nil {
		_p0 := message
		_args[0] = _p0
		_end++
	}
	if _default != nil {
		_p1 := _default
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("prompt", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *Window) Print() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("print", _args[0:_end]...)
	return
}

func (_this *Window) PostMessage(message interface{}, targetOrigin string, transfer []*javascript.Object) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := message
	_args[0] = _p0
	_end++
	_p1 := targetOrigin
	_args[1] = _p1
	_end++
	if transfer != nil {
		_p2 := js.Global().Get("Array").New(len(transfer))
		for __idx2, __seq_in2 := range transfer {
			__seq_out2 := __seq_in2.JSValue()
			_p2.SetIndex(__idx2, __seq_out2)
		}
		_args[2] = _p2
		_end++
	}
	_this.Value_JS.Call("postMessage", _args[0:_end]...)
	return
}

func (_this *Window) PostMessage2(message interface{}, options *WindowPostMessageOptions) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := message
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("postMessage", _args[0:_end]...)
	return
}

func (_this *Window) CaptureEvents() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("captureEvents", _args[0:_end]...)
	return
}

func (_this *Window) ReleaseEvents() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("releaseEvents", _args[0:_end]...)
	return
}

func (_this *Window) Btoa(data string) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("btoa", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *Window) Atob(data string) (_result *patch.ByteString) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("atob", _args[0:_end]...)
	var (
		_converted *patch.ByteString // javascript: ByteString _what_return_name
	)
	_converted = patch.ByteStringFromJS(_returned)
	_result = _converted
	return
}

func (_this *Window) SetTimeout(handler *Union, timeout *int, arguments ...interface{}) (_result int) {
	var (
		_args []interface{} = make([]interface{}, 2+len(arguments))
		_end  int
	)
	_p0 := handler.JSValue()
	_args[0] = _p0
	_end++
	if timeout != nil {
		_p1 := timeout
		_args[1] = _p1
		_end++
	}
	for _, __in := range arguments {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_returned := _this.Value_JS.Call("setTimeout", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *Window) ClearTimeout(handle *int) {
	var (
		_args [1]interface{}
		_end  int
	)
	if handle != nil {
		_p0 := handle
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("clearTimeout", _args[0:_end]...)
	return
}

func (_this *Window) SetInterval(handler *Union, timeout *int, arguments ...interface{}) (_result int) {
	var (
		_args []interface{} = make([]interface{}, 2+len(arguments))
		_end  int
	)
	_p0 := handler.JSValue()
	_args[0] = _p0
	_end++
	if timeout != nil {
		_p1 := timeout
		_args[1] = _p1
		_end++
	}
	for _, __in := range arguments {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_returned := _this.Value_JS.Call("setInterval", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *Window) ClearInterval(handle *int) {
	var (
		_args [1]interface{}
		_end  int
	)
	if handle != nil {
		_p0 := handle
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("clearInterval", _args[0:_end]...)
	return
}

func (_this *Window) QueueMicrotask(callback *webidl.VoidFunction) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("queueMicrotask", _args[0:_end]...)
	return
}

func (_this *Window) CreateImageBitmap(image *Union, options *canvas.ImageBitmapOptions) (_result *javascript.Promise) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("createImageBitmap", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *Window) CreateImageBitmap2(image *Union, sx int, sy int, sw int, sh int, options *canvas.ImageBitmapOptions) (_result *javascript.Promise) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	_p1 := sx
	_args[1] = _p1
	_end++
	_p2 := sy
	_args[2] = _p2
	_end++
	_p3 := sw
	_args[3] = _p3
	_end++
	_p4 := sh
	_args[4] = _p4
	_end++
	if options != nil {
		_p5 := options.JSValue()
		_args[5] = _p5
		_end++
	}
	_returned := _this.Value_JS.Call("createImageBitmap", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *Window) RequestAnimationFrame(callback *htmlmisc.FrameRequestCallback) (_result uint) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("requestAnimationFrame", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *Window) CancelAnimationFrame(handle uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := handle
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("cancelAnimationFrame", _args[0:_end]...)
	return
}

// interface: HTMLFrameElement
type HTMLFrameElement struct {
	html.HTMLElement
}

// HTMLFrameElementFromJS is casting a js.Wrapper into HTMLFrameElement.
func HTMLFrameElementFromJS(value js.Wrapper) *HTMLFrameElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &HTMLFrameElement{}
	ret.Value_JS = input
	return ret
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Scrolling returning attribute 'scrolling' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) Scrolling() string {
	var ret string
	value := _this.Value_JS.Get("scrolling")
	ret = (value).String()
	return ret
}

// SetScrolling setting attribute 'scrolling' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) SetScrolling(value string) {
	input := value
	_this.Value_JS.Set("scrolling", input)
}

// Src returning attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLFrameElement) Src() string {
	var ret string
	value := _this.Value_JS.Get("src")
	ret = (value).String()
	return ret
}

// SetSrc setting attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLFrameElement) SetSrc(value string) {
	input := value
	_this.Value_JS.Set("src", input)
}

// FrameBorder returning attribute 'frameBorder' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) FrameBorder() string {
	var ret string
	value := _this.Value_JS.Get("frameBorder")
	ret = (value).String()
	return ret
}

// SetFrameBorder setting attribute 'frameBorder' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) SetFrameBorder(value string) {
	input := value
	_this.Value_JS.Set("frameBorder", input)
}

// LongDesc returning attribute 'longDesc' with
// type string (idl: USVString).
func (_this *HTMLFrameElement) LongDesc() string {
	var ret string
	value := _this.Value_JS.Get("longDesc")
	ret = (value).String()
	return ret
}

// SetLongDesc setting attribute 'longDesc' with
// type string (idl: USVString).
func (_this *HTMLFrameElement) SetLongDesc(value string) {
	input := value
	_this.Value_JS.Set("longDesc", input)
}

// NoResize returning attribute 'noResize' with
// type bool (idl: boolean).
func (_this *HTMLFrameElement) NoResize() bool {
	var ret bool
	value := _this.Value_JS.Get("noResize")
	ret = (value).Bool()
	return ret
}

// SetNoResize setting attribute 'noResize' with
// type bool (idl: boolean).
func (_this *HTMLFrameElement) SetNoResize(value bool) {
	input := value
	_this.Value_JS.Set("noResize", input)
}

// ContentDocument returning attribute 'contentDocument' with
// type Document (idl: Document).
func (_this *HTMLFrameElement) ContentDocument() *Document {
	var ret *Document
	value := _this.Value_JS.Get("contentDocument")
	if value.Type() != js.TypeNull {
		ret = DocumentFromJS(value)
	}
	return ret
}

// ContentWindow returning attribute 'contentWindow' with
// type Window (idl: Window).
func (_this *HTMLFrameElement) ContentWindow() *Window {
	var ret *Window
	value := _this.Value_JS.Get("contentWindow")
	if value.Type() != js.TypeNull {
		ret = WindowFromJS(value)
	}
	return ret
}

// MarginHeight returning attribute 'marginHeight' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) MarginHeight() string {
	var ret string
	value := _this.Value_JS.Get("marginHeight")
	ret = (value).String()
	return ret
}

// SetMarginHeight setting attribute 'marginHeight' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) SetMarginHeight(value string) {
	input := value
	_this.Value_JS.Set("marginHeight", input)
}

// MarginWidth returning attribute 'marginWidth' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) MarginWidth() string {
	var ret string
	value := _this.Value_JS.Get("marginWidth")
	ret = (value).String()
	return ret
}

// SetMarginWidth setting attribute 'marginWidth' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) SetMarginWidth(value string) {
	input := value
	_this.Value_JS.Set("marginWidth", input)
}
