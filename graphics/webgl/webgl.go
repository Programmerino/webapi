// Code generated by webidl-bind. DO NOT EDIT.

// +build !js

package webgl

import js "github.com/gowebapi/webapi/core/js"

import (
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// domcore.Event
// javascript.Object
// javascript.Promise

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: WebGLPowerPreference
type PowerPreference int

const (
	DefaultWebGLPowerPreference PowerPreference = iota
	LowPowerWebGLPowerPreference
	HighPerformanceWebGLPowerPreference
)

var webGLPowerPreferenceToWasmTable = []string{
	"default", "low-power", "high-performance",
}

var webGLPowerPreferenceFromWasmTable = map[string]PowerPreference{
	"default": DefaultWebGLPowerPreference, "low-power": LowPowerWebGLPowerPreference, "high-performance": HighPerformanceWebGLPowerPreference,
}

// JSValue is converting this enum into a java object
func (this *PowerPreference) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this PowerPreference) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(webGLPowerPreferenceToWasmTable) {
		return webGLPowerPreferenceToWasmTable[idx]
	}
	panic("unknown input value")
}

// PowerPreferenceFromJS is converting a javascript value into
// a PowerPreference enum value.
func PowerPreferenceFromJS(value js.Value) PowerPreference {
	key := value.String()
	conv, ok := webGLPowerPreferenceFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// dictionary: WebGLContextAttributes
type ContextAttributes struct {
	Alpha                        bool
	Depth                        bool
	Stencil                      bool
	Antialias                    bool
	PremultipliedAlpha           bool
	PreserveDrawingBuffer        bool
	PowerPreference              PowerPreference
	FailIfMajorPerformanceCaveat bool
	XrCompatible                 bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *ContextAttributes) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Alpha
	out.Set("alpha", value0)
	value1 := _this.Depth
	out.Set("depth", value1)
	value2 := _this.Stencil
	out.Set("stencil", value2)
	value3 := _this.Antialias
	out.Set("antialias", value3)
	value4 := _this.PremultipliedAlpha
	out.Set("premultipliedAlpha", value4)
	value5 := _this.PreserveDrawingBuffer
	out.Set("preserveDrawingBuffer", value5)
	value6 := _this.PowerPreference.JSValue()
	out.Set("powerPreference", value6)
	value7 := _this.FailIfMajorPerformanceCaveat
	out.Set("failIfMajorPerformanceCaveat", value7)
	value8 := _this.XrCompatible
	out.Set("xrCompatible", value8)
	return out
}

// ContextAttributesFromJS is allocating a new
// ContextAttributes object and copy all values from
// input javascript object
func ContextAttributesFromJS(value js.Wrapper) *ContextAttributes {
	input := value.JSValue()
	var out ContextAttributes
	var (
		value0 bool            // javascript: boolean {alpha Alpha alpha}
		value1 bool            // javascript: boolean {depth Depth depth}
		value2 bool            // javascript: boolean {stencil Stencil stencil}
		value3 bool            // javascript: boolean {antialias Antialias antialias}
		value4 bool            // javascript: boolean {premultipliedAlpha PremultipliedAlpha premultipliedAlpha}
		value5 bool            // javascript: boolean {preserveDrawingBuffer PreserveDrawingBuffer preserveDrawingBuffer}
		value6 PowerPreference // javascript: WebGLPowerPreference {powerPreference PowerPreference powerPreference}
		value7 bool            // javascript: boolean {failIfMajorPerformanceCaveat FailIfMajorPerformanceCaveat failIfMajorPerformanceCaveat}
		value8 bool            // javascript: boolean {xrCompatible XrCompatible xrCompatible}
	)
	value0 = (input.Get("alpha")).Bool()
	out.Alpha = value0
	value1 = (input.Get("depth")).Bool()
	out.Depth = value1
	value2 = (input.Get("stencil")).Bool()
	out.Stencil = value2
	value3 = (input.Get("antialias")).Bool()
	out.Antialias = value3
	value4 = (input.Get("premultipliedAlpha")).Bool()
	out.PremultipliedAlpha = value4
	value5 = (input.Get("preserveDrawingBuffer")).Bool()
	out.PreserveDrawingBuffer = value5
	value6 = PowerPreferenceFromJS(input.Get("powerPreference"))
	out.PowerPreference = value6
	value7 = (input.Get("failIfMajorPerformanceCaveat")).Bool()
	out.FailIfMajorPerformanceCaveat = value7
	value8 = (input.Get("xrCompatible")).Bool()
	out.XrCompatible = value8
	return &out
}

// dictionary: WebGLContextEventInit
type ContextEventInit struct {
	Bubbles       bool
	Cancelable    bool
	Composed      bool
	StatusMessage string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *ContextEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.StatusMessage
	out.Set("statusMessage", value3)
	return out
}

// ContextEventInitFromJS is allocating a new
// ContextEventInit object and copy all values from
// input javascript object
func ContextEventInitFromJS(value js.Wrapper) *ContextEventInit {
	input := value.JSValue()
	var out ContextEventInit
	var (
		value0 bool   // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool   // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool   // javascript: boolean {composed Composed composed}
		value3 string // javascript: DOMString {statusMessage StatusMessage statusMessage}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = (input.Get("statusMessage")).String()
	out.StatusMessage = value3
	return &out
}

// interface: WebGLActiveInfo
type ActiveInfo struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *ActiveInfo) JSValue() js.Value {
	return _this.Value_JS
}

// ActiveInfoFromJS is casting a js.Wrapper into ActiveInfo.
func ActiveInfoFromJS(value js.Wrapper) *ActiveInfo {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &ActiveInfo{}
	ret.Value_JS = input
	return ret
}

// Size returning attribute 'size' with
// type int (idl: long).
func (_this *ActiveInfo) Size() int {
	var ret int
	value := _this.Value_JS.Get("size")
	ret = (value).Int()
	return ret
}

// Type returning attribute 'type' with
// type uint (idl: unsigned long).
func (_this *ActiveInfo) Type() uint {
	var ret uint
	value := _this.Value_JS.Get("type")
	ret = (uint)((value).Int())
	return ret
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *ActiveInfo) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// interface: WebGLBuffer
type Buffer struct {
	Object
}

// BufferFromJS is casting a js.Wrapper into Buffer.
func BufferFromJS(value js.Wrapper) *Buffer {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Buffer{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLContextEvent
type ContextEvent struct {
	domcore.Event
}

// ContextEventFromJS is casting a js.Wrapper into ContextEvent.
func ContextEventFromJS(value js.Wrapper) *ContextEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &ContextEvent{}
	ret.Value_JS = input
	return ret
}

func NewWebGLContextEvent(_type string, eventInit *ContextEventInit) (_result *ContextEvent) {
	_klass := js.Global().Get("WebGLContextEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInit != nil {
		_p1 := eventInit.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *ContextEvent // javascript: WebGLContextEvent _what_return_name
	)
	_converted = ContextEventFromJS(_returned)
	_result = _converted
	return
}

// StatusMessage returning attribute 'statusMessage' with
// type string (idl: DOMString).
func (_this *ContextEvent) StatusMessage() string {
	var ret string
	value := _this.Value_JS.Get("statusMessage")
	ret = (value).String()
	return ret
}

// interface: WebGLFramebuffer
type Framebuffer struct {
	Object
}

// FramebufferFromJS is casting a js.Wrapper into Framebuffer.
func FramebufferFromJS(value js.Wrapper) *Framebuffer {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Framebuffer{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLObject
type Object struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *Object) JSValue() js.Value {
	return _this.Value_JS
}

// ObjectFromJS is casting a js.Wrapper into Object.
func ObjectFromJS(value js.Wrapper) *Object {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Object{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLProgram
type Program struct {
	Object
}

// ProgramFromJS is casting a js.Wrapper into Program.
func ProgramFromJS(value js.Wrapper) *Program {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Program{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLRenderbuffer
type Renderbuffer struct {
	Object
}

// RenderbufferFromJS is casting a js.Wrapper into Renderbuffer.
func RenderbufferFromJS(value js.Wrapper) *Renderbuffer {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Renderbuffer{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLRenderingContext
type RenderingContext struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *RenderingContext) JSValue() js.Value {
	return _this.Value_JS
}

// RenderingContextFromJS is casting a js.Wrapper into RenderingContext.
func RenderingContextFromJS(value js.Wrapper) *RenderingContext {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &RenderingContext{}
	ret.Value_JS = input
	return ret
}

const DEPTH_BUFFER_BIT uint = 0x00000100
const STENCIL_BUFFER_BIT uint = 0x00000400
const COLOR_BUFFER_BIT uint = 0x00004000
const POINTS uint = 0x0000
const LINES uint = 0x0001
const LINE_LOOP uint = 0x0002
const LINE_STRIP uint = 0x0003
const TRIANGLES uint = 0x0004
const TRIANGLE_STRIP uint = 0x0005
const TRIANGLE_FAN uint = 0x0006
const ZERO uint = 0
const ONE uint = 1
const SRC_COLOR uint = 0x0300
const ONE_MINUS_SRC_COLOR uint = 0x0301
const SRC_ALPHA uint = 0x0302
const ONE_MINUS_SRC_ALPHA uint = 0x0303
const DST_ALPHA uint = 0x0304
const ONE_MINUS_DST_ALPHA uint = 0x0305
const DST_COLOR uint = 0x0306
const ONE_MINUS_DST_COLOR uint = 0x0307
const SRC_ALPHA_SATURATE uint = 0x0308
const FUNC_ADD uint = 0x8006
const BLEND_EQUATION uint = 0x8009
const BLEND_EQUATION_RGB uint = 0x8009
const BLEND_EQUATION_ALPHA uint = 0x883D
const FUNC_SUBTRACT uint = 0x800A
const FUNC_REVERSE_SUBTRACT uint = 0x800B
const BLEND_DST_RGB uint = 0x80C8
const BLEND_SRC_RGB uint = 0x80C9
const BLEND_DST_ALPHA uint = 0x80CA
const BLEND_SRC_ALPHA uint = 0x80CB
const CONSTANT_COLOR uint = 0x8001
const ONE_MINUS_CONSTANT_COLOR uint = 0x8002
const CONSTANT_ALPHA uint = 0x8003
const ONE_MINUS_CONSTANT_ALPHA uint = 0x8004
const BLEND_COLOR uint = 0x8005
const ARRAY_BUFFER uint = 0x8892
const ELEMENT_ARRAY_BUFFER uint = 0x8893
const ARRAY_BUFFER_BINDING uint = 0x8894
const ELEMENT_ARRAY_BUFFER_BINDING uint = 0x8895
const STREAM_DRAW uint = 0x88E0
const STATIC_DRAW uint = 0x88E4
const DYNAMIC_DRAW uint = 0x88E8
const BUFFER_SIZE uint = 0x8764
const BUFFER_USAGE uint = 0x8765
const CURRENT_VERTEX_ATTRIB uint = 0x8626
const FRONT uint = 0x0404
const BACK uint = 0x0405
const FRONT_AND_BACK uint = 0x0408
const CULL_FACE uint = 0x0B44
const BLEND uint = 0x0BE2
const DITHER uint = 0x0BD0
const STENCIL_TEST uint = 0x0B90
const DEPTH_TEST uint = 0x0B71
const SCISSOR_TEST uint = 0x0C11
const POLYGON_OFFSET_FILL uint = 0x8037
const SAMPLE_ALPHA_TO_COVERAGE uint = 0x809E
const SAMPLE_COVERAGE uint = 0x80A0
const NO_ERROR uint = 0
const INVALID_ENUM uint = 0x0500
const INVALID_VALUE uint = 0x0501
const INVALID_OPERATION uint = 0x0502
const OUT_OF_MEMORY uint = 0x0505
const CW uint = 0x0900
const CCW uint = 0x0901
const LINE_WIDTH uint = 0x0B21
const ALIASED_POINT_SIZE_RANGE uint = 0x846D
const ALIASED_LINE_WIDTH_RANGE uint = 0x846E
const CULL_FACE_MODE uint = 0x0B45
const FRONT_FACE uint = 0x0B46
const DEPTH_RANGE uint = 0x0B70
const DEPTH_WRITEMASK uint = 0x0B72
const DEPTH_CLEAR_VALUE uint = 0x0B73
const DEPTH_FUNC uint = 0x0B74
const STENCIL_CLEAR_VALUE uint = 0x0B91
const STENCIL_FUNC uint = 0x0B92
const STENCIL_FAIL uint = 0x0B94
const STENCIL_PASS_DEPTH_FAIL uint = 0x0B95
const STENCIL_PASS_DEPTH_PASS uint = 0x0B96
const STENCIL_REF uint = 0x0B97
const STENCIL_VALUE_MASK uint = 0x0B93
const STENCIL_WRITEMASK uint = 0x0B98
const STENCIL_BACK_FUNC uint = 0x8800
const STENCIL_BACK_FAIL uint = 0x8801
const STENCIL_BACK_PASS_DEPTH_FAIL uint = 0x8802
const STENCIL_BACK_PASS_DEPTH_PASS uint = 0x8803
const STENCIL_BACK_REF uint = 0x8CA3
const STENCIL_BACK_VALUE_MASK uint = 0x8CA4
const STENCIL_BACK_WRITEMASK uint = 0x8CA5
const VIEWPORT uint = 0x0BA2
const SCISSOR_BOX uint = 0x0C10
const COLOR_CLEAR_VALUE uint = 0x0C22
const COLOR_WRITEMASK uint = 0x0C23
const UNPACK_ALIGNMENT uint = 0x0CF5
const PACK_ALIGNMENT uint = 0x0D05
const MAX_TEXTURE_SIZE uint = 0x0D33
const MAX_VIEWPORT_DIMS uint = 0x0D3A
const SUBPIXEL_BITS uint = 0x0D50
const RED_BITS uint = 0x0D52
const GREEN_BITS uint = 0x0D53
const BLUE_BITS uint = 0x0D54
const ALPHA_BITS uint = 0x0D55
const DEPTH_BITS uint = 0x0D56
const STENCIL_BITS uint = 0x0D57
const POLYGON_OFFSET_UNITS uint = 0x2A00
const POLYGON_OFFSET_FACTOR uint = 0x8038
const TEXTURE_BINDING_2D uint = 0x8069
const SAMPLE_BUFFERS uint = 0x80A8
const SAMPLES uint = 0x80A9
const SAMPLE_COVERAGE_VALUE uint = 0x80AA
const SAMPLE_COVERAGE_INVERT uint = 0x80AB
const COMPRESSED_TEXTURE_FORMATS uint = 0x86A3
const DONT_CARE uint = 0x1100
const FASTEST uint = 0x1101
const NICEST uint = 0x1102
const GENERATE_MIPMAP_HINT uint = 0x8192
const BYTE uint = 0x1400
const UNSIGNED_BYTE uint = 0x1401
const SHORT uint = 0x1402
const UNSIGNED_SHORT uint = 0x1403
const INT uint = 0x1404
const UNSIGNED_INT uint = 0x1405
const FLOAT uint = 0x1406
const DEPTH_COMPONENT uint = 0x1902
const ALPHA uint = 0x1906
const RGB uint = 0x1907
const RGBA uint = 0x1908
const LUMINANCE uint = 0x1909
const LUMINANCE_ALPHA uint = 0x190A
const UNSIGNED_SHORT_4_4_4_4 uint = 0x8033
const UNSIGNED_SHORT_5_5_5_1 uint = 0x8034
const UNSIGNED_SHORT_5_6_5 uint = 0x8363
const FRAGMENT_SHADER uint = 0x8B30
const VERTEX_SHADER uint = 0x8B31
const MAX_VERTEX_ATTRIBS uint = 0x8869
const MAX_VERTEX_UNIFORM_VECTORS uint = 0x8DFB
const MAX_VARYING_VECTORS uint = 0x8DFC
const MAX_COMBINED_TEXTURE_IMAGE_UNITS uint = 0x8B4D
const MAX_VERTEX_TEXTURE_IMAGE_UNITS uint = 0x8B4C
const MAX_TEXTURE_IMAGE_UNITS uint = 0x8872
const MAX_FRAGMENT_UNIFORM_VECTORS uint = 0x8DFD
const SHADER_TYPE uint = 0x8B4F
const DELETE_STATUS uint = 0x8B80
const LINK_STATUS uint = 0x8B82
const VALIDATE_STATUS uint = 0x8B83
const ATTACHED_SHADERS uint = 0x8B85
const ACTIVE_UNIFORMS uint = 0x8B86
const ACTIVE_ATTRIBUTES uint = 0x8B89
const SHADING_LANGUAGE_VERSION uint = 0x8B8C
const CURRENT_PROGRAM uint = 0x8B8D
const NEVER uint = 0x0200
const LESS uint = 0x0201
const EQUAL uint = 0x0202
const LEQUAL uint = 0x0203
const GREATER uint = 0x0204
const NOTEQUAL uint = 0x0205
const GEQUAL uint = 0x0206
const ALWAYS uint = 0x0207
const KEEP uint = 0x1E00
const REPLACE uint = 0x1E01
const INCR uint = 0x1E02
const DECR uint = 0x1E03
const INVERT uint = 0x150A
const INCR_WRAP uint = 0x8507
const DECR_WRAP uint = 0x8508
const VENDOR uint = 0x1F00
const RENDERER uint = 0x1F01
const VERSION uint = 0x1F02
const NEAREST uint = 0x2600
const LINEAR uint = 0x2601
const NEAREST_MIPMAP_NEAREST uint = 0x2700
const LINEAR_MIPMAP_NEAREST uint = 0x2701
const NEAREST_MIPMAP_LINEAR uint = 0x2702
const LINEAR_MIPMAP_LINEAR uint = 0x2703
const TEXTURE_MAG_FILTER uint = 0x2800
const TEXTURE_MIN_FILTER uint = 0x2801
const TEXTURE_WRAP_S uint = 0x2802
const TEXTURE_WRAP_T uint = 0x2803
const TEXTURE_2D uint = 0x0DE1
const TEXTURE uint = 0x1702
const TEXTURE_CUBE_MAP uint = 0x8513
const TEXTURE_BINDING_CUBE_MAP uint = 0x8514
const TEXTURE_CUBE_MAP_POSITIVE_X uint = 0x8515
const TEXTURE_CUBE_MAP_NEGATIVE_X uint = 0x8516
const TEXTURE_CUBE_MAP_POSITIVE_Y uint = 0x8517
const TEXTURE_CUBE_MAP_NEGATIVE_Y uint = 0x8518
const TEXTURE_CUBE_MAP_POSITIVE_Z uint = 0x8519
const TEXTURE_CUBE_MAP_NEGATIVE_Z uint = 0x851A
const MAX_CUBE_MAP_TEXTURE_SIZE uint = 0x851C
const TEXTURE0 uint = 0x84C0
const TEXTURE1 uint = 0x84C1
const TEXTURE2 uint = 0x84C2
const TEXTURE3 uint = 0x84C3
const TEXTURE4 uint = 0x84C4
const TEXTURE5 uint = 0x84C5
const TEXTURE6 uint = 0x84C6
const TEXTURE7 uint = 0x84C7
const TEXTURE8 uint = 0x84C8
const TEXTURE9 uint = 0x84C9
const TEXTURE10 uint = 0x84CA
const TEXTURE11 uint = 0x84CB
const TEXTURE12 uint = 0x84CC
const TEXTURE13 uint = 0x84CD
const TEXTURE14 uint = 0x84CE
const TEXTURE15 uint = 0x84CF
const TEXTURE16 uint = 0x84D0
const TEXTURE17 uint = 0x84D1
const TEXTURE18 uint = 0x84D2
const TEXTURE19 uint = 0x84D3
const TEXTURE20 uint = 0x84D4
const TEXTURE21 uint = 0x84D5
const TEXTURE22 uint = 0x84D6
const TEXTURE23 uint = 0x84D7
const TEXTURE24 uint = 0x84D8
const TEXTURE25 uint = 0x84D9
const TEXTURE26 uint = 0x84DA
const TEXTURE27 uint = 0x84DB
const TEXTURE28 uint = 0x84DC
const TEXTURE29 uint = 0x84DD
const TEXTURE30 uint = 0x84DE
const TEXTURE31 uint = 0x84DF
const ACTIVE_TEXTURE uint = 0x84E0
const REPEAT uint = 0x2901
const CLAMP_TO_EDGE uint = 0x812F
const MIRRORED_REPEAT uint = 0x8370
const FLOAT_VEC2 uint = 0x8B50
const FLOAT_VEC3 uint = 0x8B51
const FLOAT_VEC4 uint = 0x8B52
const INT_VEC2 uint = 0x8B53
const INT_VEC3 uint = 0x8B54
const INT_VEC4 uint = 0x8B55
const BOOL uint = 0x8B56
const BOOL_VEC2 uint = 0x8B57
const BOOL_VEC3 uint = 0x8B58
const BOOL_VEC4 uint = 0x8B59
const FLOAT_MAT2 uint = 0x8B5A
const FLOAT_MAT3 uint = 0x8B5B
const FLOAT_MAT4 uint = 0x8B5C
const SAMPLER_2D uint = 0x8B5E
const SAMPLER_CUBE uint = 0x8B60
const VERTEX_ATTRIB_ARRAY_ENABLED uint = 0x8622
const VERTEX_ATTRIB_ARRAY_SIZE uint = 0x8623
const VERTEX_ATTRIB_ARRAY_STRIDE uint = 0x8624
const VERTEX_ATTRIB_ARRAY_TYPE uint = 0x8625
const VERTEX_ATTRIB_ARRAY_NORMALIZED uint = 0x886A
const VERTEX_ATTRIB_ARRAY_POINTER uint = 0x8645
const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING uint = 0x889F
const IMPLEMENTATION_COLOR_READ_TYPE uint = 0x8B9A
const IMPLEMENTATION_COLOR_READ_FORMAT uint = 0x8B9B
const COMPILE_STATUS uint = 0x8B81
const LOW_FLOAT uint = 0x8DF0
const MEDIUM_FLOAT uint = 0x8DF1
const HIGH_FLOAT uint = 0x8DF2
const LOW_INT uint = 0x8DF3
const MEDIUM_INT uint = 0x8DF4
const HIGH_INT uint = 0x8DF5
const FRAMEBUFFER uint = 0x8D40
const RENDERBUFFER uint = 0x8D41
const RGBA4 uint = 0x8056
const RGB5_A1 uint = 0x8057
const RGB565 uint = 0x8D62
const DEPTH_COMPONENT16 uint = 0x81A5
const STENCIL_INDEX8 uint = 0x8D48
const DEPTH_STENCIL uint = 0x84F9
const RENDERBUFFER_WIDTH uint = 0x8D42
const RENDERBUFFER_HEIGHT uint = 0x8D43
const RENDERBUFFER_INTERNAL_FORMAT uint = 0x8D44
const RENDERBUFFER_RED_SIZE uint = 0x8D50
const RENDERBUFFER_GREEN_SIZE uint = 0x8D51
const RENDERBUFFER_BLUE_SIZE uint = 0x8D52
const RENDERBUFFER_ALPHA_SIZE uint = 0x8D53
const RENDERBUFFER_DEPTH_SIZE uint = 0x8D54
const RENDERBUFFER_STENCIL_SIZE uint = 0x8D55
const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE uint = 0x8CD0
const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME uint = 0x8CD1
const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL uint = 0x8CD2
const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE uint = 0x8CD3
const COLOR_ATTACHMENT0 uint = 0x8CE0
const DEPTH_ATTACHMENT uint = 0x8D00
const STENCIL_ATTACHMENT uint = 0x8D20
const DEPTH_STENCIL_ATTACHMENT uint = 0x821A
const NONE uint = 0
const FRAMEBUFFER_COMPLETE uint = 0x8CD5
const FRAMEBUFFER_INCOMPLETE_ATTACHMENT uint = 0x8CD6
const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT uint = 0x8CD7
const FRAMEBUFFER_INCOMPLETE_DIMENSIONS uint = 0x8CD9
const FRAMEBUFFER_UNSUPPORTED uint = 0x8CDD
const FRAMEBUFFER_BINDING uint = 0x8CA6
const RENDERBUFFER_BINDING uint = 0x8CA7
const MAX_RENDERBUFFER_SIZE uint = 0x84E8
const INVALID_FRAMEBUFFER_OPERATION uint = 0x0506
const UNPACK_FLIP_Y_WEBGL uint = 0x9240
const UNPACK_PREMULTIPLY_ALPHA_WEBGL uint = 0x9241
const CONTEXT_LOST_WEBGL uint = 0x9242
const UNPACK_COLORSPACE_CONVERSION_WEBGL uint = 0x9243
const BROWSER_DEFAULT_WEBGL uint = 0x9244

// Canvas returning attribute 'canvas' with
// type Union (idl: Union).
func (_this *RenderingContext) Canvas() *Union {
	var ret *Union
	value := _this.Value_JS.Get("canvas")
	ret = UnionFromJS(value)
	return ret
}

// DrawingBufferWidth returning attribute 'drawingBufferWidth' with
// type int (idl: long).
func (_this *RenderingContext) DrawingBufferWidth() int {
	var ret int
	value := _this.Value_JS.Get("drawingBufferWidth")
	ret = (value).Int()
	return ret
}

// DrawingBufferHeight returning attribute 'drawingBufferHeight' with
// type int (idl: long).
func (_this *RenderingContext) DrawingBufferHeight() int {
	var ret int
	value := _this.Value_JS.Get("drawingBufferHeight")
	ret = (value).Int()
	return ret
}

func (_this *RenderingContext) GetContextAttributes() (_result *ContextAttributes) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getContextAttributes", _args[0:_end]...)
	var (
		_converted *ContextAttributes // javascript: WebGLContextAttributes _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = ContextAttributesFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) IsContextLost() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("isContextLost", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) GetSupportedExtensions() (_result []string) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSupportedExtensions", _args[0:_end]...)
	var (
		_converted []string // javascript: sequence<DOMString> _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__length0 := _returned.Length()
		__array0 := make([]string, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 string
			__seq_in0 := _returned.Index(__idx0)
			__seq_out0 = (__seq_in0).String()
			__array0[__idx0] = __seq_out0
		}
		_converted = __array0
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetExtension(name string) (_result *javascript.Object) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getExtension", _args[0:_end]...)
	var (
		_converted *javascript.Object // javascript: object _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = javascript.ObjectFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) ActiveTexture(texture uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := texture
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("activeTexture", _args[0:_end]...)
	return
}

func (_this *RenderingContext) AttachShader(program *Program, shader *Shader) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := shader.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("attachShader", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BindAttribLocation(program *Program, index uint, name string) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_p2 := name
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bindAttribLocation", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BindBuffer(target uint, buffer *Buffer) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := buffer.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindBuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BindFramebuffer(target uint, framebuffer *Framebuffer) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := framebuffer.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindFramebuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BindRenderbuffer(target uint, renderbuffer *Renderbuffer) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := renderbuffer.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindRenderbuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BindTexture(target uint, texture *Texture) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := texture.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindTexture", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BlendColor(red float32, green float32, blue float32, alpha float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := red
	_args[0] = _p0
	_end++
	_p1 := green
	_args[1] = _p1
	_end++
	_p2 := blue
	_args[2] = _p2
	_end++
	_p3 := alpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("blendColor", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BlendEquation(mode uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("blendEquation", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BlendEquationSeparate(modeRGB uint, modeAlpha uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := modeRGB
	_args[0] = _p0
	_end++
	_p1 := modeAlpha
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("blendEquationSeparate", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BlendFunc(sfactor uint, dfactor uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := sfactor
	_args[0] = _p0
	_end++
	_p1 := dfactor
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("blendFunc", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BlendFuncSeparate(srcRGB uint, dstRGB uint, srcAlpha uint, dstAlpha uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := srcRGB
	_args[0] = _p0
	_end++
	_p1 := dstRGB
	_args[1] = _p1
	_end++
	_p2 := srcAlpha
	_args[2] = _p2
	_end++
	_p3 := dstAlpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("blendFuncSeparate", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BufferData(target uint, size int, usage uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := size
	_args[1] = _p1
	_end++
	_p2 := usage
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferData", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BufferData2(target uint, data *Union, usage uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	_p2 := usage
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferData", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BufferSubData(target uint, offset int, data *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := offset
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferSubData", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CheckFramebufferStatus(target uint) (_result uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("checkFramebufferStatus", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *RenderingContext) Clear(mask uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mask
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ClearColor(red float32, green float32, blue float32, alpha float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := red
	_args[0] = _p0
	_end++
	_p1 := green
	_args[1] = _p1
	_end++
	_p2 := blue
	_args[2] = _p2
	_end++
	_p3 := alpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("clearColor", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ClearDepth(depth float32) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := depth
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("clearDepth", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ClearStencil(s int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := s
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("clearStencil", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ColorMask(red bool, green bool, blue bool, alpha bool) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := red
	_args[0] = _p0
	_end++
	_p1 := green
	_args[1] = _p1
	_end++
	_p2 := blue
	_args[2] = _p2
	_end++
	_p3 := alpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("colorMask", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CompileShader(shader *Shader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("compileShader", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CompressedTexImage2D(target uint, level int, internalformat uint, width int, height int, border int, data *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := data.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("compressedTexImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CompressedTexSubImage2D(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, data *Union) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := data.JSValue()
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("compressedTexSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CopyTexImage2D(target uint, level int, internalformat uint, x int, y int, width int, height int, border int) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := x
	_args[3] = _p3
	_end++
	_p4 := y
	_args[4] = _p4
	_end++
	_p5 := width
	_args[5] = _p5
	_end++
	_p6 := height
	_args[6] = _p6
	_end++
	_p7 := border
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("copyTexImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CopyTexSubImage2D(target uint, level int, xoffset int, yoffset int, x int, y int, width int, height int) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := x
	_args[4] = _p4
	_end++
	_p5 := y
	_args[5] = _p5
	_end++
	_p6 := width
	_args[6] = _p6
	_end++
	_p7 := height
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("copyTexSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CreateBuffer() (_result *Buffer) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createBuffer", _args[0:_end]...)
	var (
		_converted *Buffer // javascript: WebGLBuffer _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = BufferFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) CreateFramebuffer() (_result *Framebuffer) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createFramebuffer", _args[0:_end]...)
	var (
		_converted *Framebuffer // javascript: WebGLFramebuffer _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = FramebufferFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) CreateProgram() (_result *Program) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createProgram", _args[0:_end]...)
	var (
		_converted *Program // javascript: WebGLProgram _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = ProgramFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) CreateRenderbuffer() (_result *Renderbuffer) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createRenderbuffer", _args[0:_end]...)
	var (
		_converted *Renderbuffer // javascript: WebGLRenderbuffer _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = RenderbufferFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) CreateShader(_type uint) (_result *Shader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createShader", _args[0:_end]...)
	var (
		_converted *Shader // javascript: WebGLShader _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = ShaderFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) CreateTexture() (_result *Texture) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createTexture", _args[0:_end]...)
	var (
		_converted *Texture // javascript: WebGLTexture _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = TextureFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) CullFace(mode uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("cullFace", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DeleteBuffer(buffer *Buffer) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := buffer.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteBuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DeleteFramebuffer(framebuffer *Framebuffer) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := framebuffer.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteFramebuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DeleteProgram(program *Program) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteProgram", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DeleteRenderbuffer(renderbuffer *Renderbuffer) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := renderbuffer.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteRenderbuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DeleteShader(shader *Shader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteShader", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DeleteTexture(texture *Texture) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := texture.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteTexture", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DepthFunc(_func uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _func
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("depthFunc", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DepthMask(flag bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := flag
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("depthMask", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DepthRange(zNear float32, zFar float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := zNear
	_args[0] = _p0
	_end++
	_p1 := zFar
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("depthRange", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DetachShader(program *Program, shader *Shader) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := shader.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("detachShader", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Disable(cap uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := cap
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("disable", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DisableVertexAttribArray(index uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("disableVertexAttribArray", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DrawArrays(mode uint, first int, count int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_p1 := first
	_args[1] = _p1
	_end++
	_p2 := count
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("drawArrays", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DrawElements(mode uint, count int, _type uint, offset int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_p1 := count
	_args[1] = _p1
	_end++
	_p2 := _type
	_args[2] = _p2
	_end++
	_p3 := offset
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("drawElements", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Enable(cap uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := cap
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("enable", _args[0:_end]...)
	return
}

func (_this *RenderingContext) EnableVertexAttribArray(index uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("enableVertexAttribArray", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Finish() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("finish", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Flush() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("flush", _args[0:_end]...)
	return
}

func (_this *RenderingContext) FramebufferRenderbuffer(target uint, attachment uint, renderbuffertarget uint, renderbuffer *Renderbuffer) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := attachment
	_args[1] = _p1
	_end++
	_p2 := renderbuffertarget
	_args[2] = _p2
	_end++
	_p3 := renderbuffer.JSValue()
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("framebufferRenderbuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) FramebufferTexture2D(target uint, attachment uint, textarget uint, texture *Texture, level int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := attachment
	_args[1] = _p1
	_end++
	_p2 := textarget
	_args[2] = _p2
	_end++
	_p3 := texture.JSValue()
	_args[3] = _p3
	_end++
	_p4 := level
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("framebufferTexture2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) FrontFace(mode uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("frontFace", _args[0:_end]...)
	return
}

func (_this *RenderingContext) GenerateMipmap(target uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("generateMipmap", _args[0:_end]...)
	return
}

func (_this *RenderingContext) GetActiveAttrib(program *Program, index uint) (_result *ActiveInfo) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getActiveAttrib", _args[0:_end]...)
	var (
		_converted *ActiveInfo // javascript: WebGLActiveInfo _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = ActiveInfoFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetActiveUniform(program *Program, index uint) (_result *ActiveInfo) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getActiveUniform", _args[0:_end]...)
	var (
		_converted *ActiveInfo // javascript: WebGLActiveInfo _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = ActiveInfoFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetAttachedShaders(program *Program) (_result []*Shader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getAttachedShaders", _args[0:_end]...)
	var (
		_converted []*Shader // javascript: sequence<WebGLShader> _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__length0 := _returned.Length()
		__array0 := make([]*Shader, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 *Shader
			__seq_in0 := _returned.Index(__idx0)
			__seq_out0 = ShaderFromJS(__seq_in0)
			__array0[__idx0] = __seq_out0
		}
		_converted = __array0
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetAttribLocation(program *Program, name string) (_result int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := name
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getAttribLocation", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *RenderingContext) GetBufferParameter(target uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getBufferParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetParameter(pname uint) (_result js.Value) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := pname
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetError() (_result uint) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getError", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *RenderingContext) GetFramebufferAttachmentParameter(target uint, attachment uint, pname uint) (_result js.Value) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := attachment
	_args[1] = _p1
	_end++
	_p2 := pname
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("getFramebufferAttachmentParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetProgramParameter(program *Program, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getProgramParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetProgramInfoLog(program *Program) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getProgramInfoLog", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetRenderbufferParameter(target uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getRenderbufferParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetShaderParameter(shader *Shader, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getShaderParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetShaderPrecisionFormat(shadertype uint, precisiontype uint) (_result *ShaderPrecisionFormat) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := shadertype
	_args[0] = _p0
	_end++
	_p1 := precisiontype
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getShaderPrecisionFormat", _args[0:_end]...)
	var (
		_converted *ShaderPrecisionFormat // javascript: WebGLShaderPrecisionFormat _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = ShaderPrecisionFormatFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetShaderInfoLog(shader *Shader) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getShaderInfoLog", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetShaderSource(shader *Shader) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getShaderSource", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetTexParameter(target uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getTexParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetUniform(program *Program, location *UniformLocation) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := location.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getUniform", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetUniformLocation(program *Program, name string) (_result *UniformLocation) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := name
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getUniformLocation", _args[0:_end]...)
	var (
		_converted *UniformLocation // javascript: WebGLUniformLocation _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = UniformLocationFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetVertexAttrib(index uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getVertexAttrib", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetVertexAttribOffset(index uint, pname uint) (_result int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getVertexAttribOffset", _args[0:_end]...)
	var (
		_converted int // javascript: long long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *RenderingContext) Hint(target uint, mode uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := mode
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("hint", _args[0:_end]...)
	return
}

func (_this *RenderingContext) IsBuffer(buffer *Buffer) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := buffer.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isBuffer", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) IsEnabled(cap uint) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := cap
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isEnabled", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) IsFramebuffer(framebuffer *Framebuffer) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := framebuffer.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isFramebuffer", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) IsProgram(program *Program) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isProgram", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) IsRenderbuffer(renderbuffer *Renderbuffer) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := renderbuffer.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isRenderbuffer", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) IsShader(shader *Shader) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isShader", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) IsTexture(texture *Texture) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := texture.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isTexture", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) LineWidth(width float32) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := width
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("lineWidth", _args[0:_end]...)
	return
}

func (_this *RenderingContext) LinkProgram(program *Program) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("linkProgram", _args[0:_end]...)
	return
}

func (_this *RenderingContext) PixelStorei(pname uint, param int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := pname
	_args[0] = _p0
	_end++
	_p1 := param
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("pixelStorei", _args[0:_end]...)
	return
}

func (_this *RenderingContext) PolygonOffset(factor float32, units float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := factor
	_args[0] = _p0
	_end++
	_p1 := units
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("polygonOffset", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ReadPixels(x int, y int, width int, height int, format uint, _type uint, pixels *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := pixels.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("readPixels", _args[0:_end]...)
	return
}

func (_this *RenderingContext) RenderbufferStorage(target uint, internalformat uint, width int, height int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := internalformat
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("renderbufferStorage", _args[0:_end]...)
	return
}

func (_this *RenderingContext) SampleCoverage(value float32, invert bool) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := value
	_args[0] = _p0
	_end++
	_p1 := invert
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("sampleCoverage", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Scissor(x int, y int, width int, height int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("scissor", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ShaderSource(shader *Shader, source string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_p1 := source
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("shaderSource", _args[0:_end]...)
	return
}

func (_this *RenderingContext) StencilFunc(_func uint, ref int, mask uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := _func
	_args[0] = _p0
	_end++
	_p1 := ref
	_args[1] = _p1
	_end++
	_p2 := mask
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("stencilFunc", _args[0:_end]...)
	return
}

func (_this *RenderingContext) StencilFuncSeparate(face uint, _func uint, ref int, mask uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := face
	_args[0] = _p0
	_end++
	_p1 := _func
	_args[1] = _p1
	_end++
	_p2 := ref
	_args[2] = _p2
	_end++
	_p3 := mask
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("stencilFuncSeparate", _args[0:_end]...)
	return
}

func (_this *RenderingContext) StencilMask(mask uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mask
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("stencilMask", _args[0:_end]...)
	return
}

func (_this *RenderingContext) StencilMaskSeparate(face uint, mask uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := face
	_args[0] = _p0
	_end++
	_p1 := mask
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("stencilMaskSeparate", _args[0:_end]...)
	return
}

func (_this *RenderingContext) StencilOp(fail uint, zfail uint, zpass uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := fail
	_args[0] = _p0
	_end++
	_p1 := zfail
	_args[1] = _p1
	_end++
	_p2 := zpass
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("stencilOp", _args[0:_end]...)
	return
}

func (_this *RenderingContext) StencilOpSeparate(face uint, fail uint, zfail uint, zpass uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := face
	_args[0] = _p0
	_end++
	_p1 := fail
	_args[1] = _p1
	_end++
	_p2 := zfail
	_args[2] = _p2
	_end++
	_p3 := zpass
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("stencilOpSeparate", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexImage2D(target uint, level int, internalformat int, width int, height int, border int, format uint, _type uint, pixels *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pixels.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexImage2D2(target uint, level int, internalformat int, format uint, _type uint, source *Union) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := format
	_args[3] = _p3
	_end++
	_p4 := _type
	_args[4] = _p4
	_end++
	_p5 := source.JSValue()
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexParameterf(target uint, pname uint, param float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_p2 := param
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("texParameterf", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexParameteri(target uint, pname uint, param int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_p2 := param
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("texParameteri", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexSubImage2D(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, _type uint, pixels *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pixels.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexSubImage2D2(target uint, level int, xoffset int, yoffset int, format uint, _type uint, source *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := source.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform1f(location *UniformLocation, x float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform2f(location *UniformLocation, x float32, y float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniform2f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform3f(location *UniformLocation, x float32, y float32, z float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("uniform3f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform4f(location *UniformLocation, x float32, y float32, z float32, w float32) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("uniform4f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform1i(location *UniformLocation, x int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1i", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform2i(location *UniformLocation, x int, y int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniform2i", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform3i(location *UniformLocation, x int, y int, z int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("uniform3i", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform4i(location *UniformLocation, x int, y int, z int, w int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("uniform4i", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform1fv(location *UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform2fv(location *UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform2fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform3fv(location *UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform3fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform4fv(location *UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform4fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform1iv(location *UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1iv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform2iv(location *UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform2iv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform3iv(location *UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform3iv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform4iv(location *UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform4iv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix2fv(location *UniformLocation, transpose bool, value *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := value.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniformMatrix2fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix3fv(location *UniformLocation, transpose bool, value *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := value.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniformMatrix3fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix4fv(location *UniformLocation, transpose bool, value *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := value.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniformMatrix4fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UseProgram(program *Program) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("useProgram", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ValidateProgram(program *Program) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("validateProgram", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib1f(index uint, x float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib1f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib2f(index uint, x float32, y float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("vertexAttrib2f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib3f(index uint, x float32, y float32, z float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("vertexAttrib3f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib4f(index uint, x float32, y float32, z float32, w float32) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("vertexAttrib4f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib1fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib1fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib2fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib2fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib3fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib3fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib4fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib4fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttribPointer(index uint, size int, _type uint, normalized bool, stride int, offset int) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := size
	_args[1] = _p1
	_end++
	_p2 := _type
	_args[2] = _p2
	_end++
	_p3 := normalized
	_args[3] = _p3
	_end++
	_p4 := stride
	_args[4] = _p4
	_end++
	_p5 := offset
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("vertexAttribPointer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Viewport(x int, y int, width int, height int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("viewport", _args[0:_end]...)
	return
}

func (_this *RenderingContext) MakeXRCompatible() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("makeXRCompatible", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

// interface: WebGLShader
type Shader struct {
	Object
}

// ShaderFromJS is casting a js.Wrapper into Shader.
func ShaderFromJS(value js.Wrapper) *Shader {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Shader{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLShaderPrecisionFormat
type ShaderPrecisionFormat struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *ShaderPrecisionFormat) JSValue() js.Value {
	return _this.Value_JS
}

// ShaderPrecisionFormatFromJS is casting a js.Wrapper into ShaderPrecisionFormat.
func ShaderPrecisionFormatFromJS(value js.Wrapper) *ShaderPrecisionFormat {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &ShaderPrecisionFormat{}
	ret.Value_JS = input
	return ret
}

// RangeMin returning attribute 'rangeMin' with
// type int (idl: long).
func (_this *ShaderPrecisionFormat) RangeMin() int {
	var ret int
	value := _this.Value_JS.Get("rangeMin")
	ret = (value).Int()
	return ret
}

// RangeMax returning attribute 'rangeMax' with
// type int (idl: long).
func (_this *ShaderPrecisionFormat) RangeMax() int {
	var ret int
	value := _this.Value_JS.Get("rangeMax")
	ret = (value).Int()
	return ret
}

// Precision returning attribute 'precision' with
// type int (idl: long).
func (_this *ShaderPrecisionFormat) Precision() int {
	var ret int
	value := _this.Value_JS.Get("precision")
	ret = (value).Int()
	return ret
}

// interface: WebGLTexture
type Texture struct {
	Object
}

// TextureFromJS is casting a js.Wrapper into Texture.
func TextureFromJS(value js.Wrapper) *Texture {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Texture{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLUniformLocation
type UniformLocation struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *UniformLocation) JSValue() js.Value {
	return _this.Value_JS
}

// UniformLocationFromJS is casting a js.Wrapper into UniformLocation.
func UniformLocationFromJS(value js.Wrapper) *UniformLocation {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &UniformLocation{}
	ret.Value_JS = input
	return ret
}
