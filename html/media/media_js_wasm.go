// Code generated by webidl-bind. DO NOT EDIT.

package media

import "syscall/js"

import (
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/html"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// domcore.EventHandler
// domcore.EventTarget
// html.HTMLElement
// html.TimeRanges
// javascript.Object
// javascript.Promise

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: CanPlayTypeResult
type CanPlayTypeResult int

const (
	EmptyString0CanPlayTypeResult CanPlayTypeResult = iota
	MaybeCanPlayTypeResult
	ProbablyCanPlayTypeResult
)

var canPlayTypeResultToWasmTable = []string{
	"", "maybe", "probably",
}

var canPlayTypeResultFromWasmTable = map[string]CanPlayTypeResult{
	"": EmptyString0CanPlayTypeResult, "maybe": MaybeCanPlayTypeResult, "probably": ProbablyCanPlayTypeResult,
}

// JSValue is converting this enum into a java object
func (this *CanPlayTypeResult) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this CanPlayTypeResult) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(canPlayTypeResultToWasmTable) {
		return canPlayTypeResultToWasmTable[idx]
	}
	panic("unknown input value")
}

// CanPlayTypeResultFromJS is converting a javascript value into
// a CanPlayTypeResult enum value.
func CanPlayTypeResultFromJS(value js.Value) CanPlayTypeResult {
	key := value.String()
	conv, ok := canPlayTypeResultFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: TextTrackKind
type TextTrackKind int

const (
	SubtitlesTextTrackKind TextTrackKind = iota
	CaptionsTextTrackKind
	DescriptionsTextTrackKind
	ChaptersTextTrackKind
	MetadataTextTrackKind
)

var textTrackKindToWasmTable = []string{
	"subtitles", "captions", "descriptions", "chapters", "metadata",
}

var textTrackKindFromWasmTable = map[string]TextTrackKind{
	"subtitles": SubtitlesTextTrackKind, "captions": CaptionsTextTrackKind, "descriptions": DescriptionsTextTrackKind, "chapters": ChaptersTextTrackKind, "metadata": MetadataTextTrackKind,
}

// JSValue is converting this enum into a java object
func (this *TextTrackKind) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this TextTrackKind) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(textTrackKindToWasmTable) {
		return textTrackKindToWasmTable[idx]
	}
	panic("unknown input value")
}

// TextTrackKindFromJS is converting a javascript value into
// a TextTrackKind enum value.
func TextTrackKindFromJS(value js.Value) TextTrackKind {
	key := value.String()
	conv, ok := textTrackKindFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: TextTrackMode
type TextTrackMode int

const (
	DisabledTextTrackMode TextTrackMode = iota
	HiddenTextTrackMode
	ShowingTextTrackMode
)

var textTrackModeToWasmTable = []string{
	"disabled", "hidden", "showing",
}

var textTrackModeFromWasmTable = map[string]TextTrackMode{
	"disabled": DisabledTextTrackMode, "hidden": HiddenTextTrackMode, "showing": ShowingTextTrackMode,
}

// JSValue is converting this enum into a java object
func (this *TextTrackMode) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this TextTrackMode) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(textTrackModeToWasmTable) {
		return textTrackModeToWasmTable[idx]
	}
	panic("unknown input value")
}

// TextTrackModeFromJS is converting a javascript value into
// a TextTrackMode enum value.
func TextTrackModeFromJS(value js.Value) TextTrackMode {
	key := value.String()
	conv, ok := textTrackModeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// interface: AudioTrack
type AudioTrack struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *AudioTrack) JSValue() js.Value {
	return _this.Value_JS
}

// AudioTrackFromJS is casting a js.Wrapper into AudioTrack.
func AudioTrackFromJS(value js.Wrapper) *AudioTrack {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &AudioTrack{}
	ret.Value_JS = input
	return ret
}

// Id returning attribute 'id' with
// type string (idl: DOMString).
func (_this *AudioTrack) Id() string {
	var ret string
	value := _this.Value_JS.Get("id")
	ret = (value).String()
	return ret
}

// Kind returning attribute 'kind' with
// type string (idl: DOMString).
func (_this *AudioTrack) Kind() string {
	var ret string
	value := _this.Value_JS.Get("kind")
	ret = (value).String()
	return ret
}

// Label returning attribute 'label' with
// type string (idl: DOMString).
func (_this *AudioTrack) Label() string {
	var ret string
	value := _this.Value_JS.Get("label")
	ret = (value).String()
	return ret
}

// Language returning attribute 'language' with
// type string (idl: DOMString).
func (_this *AudioTrack) Language() string {
	var ret string
	value := _this.Value_JS.Get("language")
	ret = (value).String()
	return ret
}

// Enabled returning attribute 'enabled' with
// type bool (idl: boolean).
func (_this *AudioTrack) Enabled() bool {
	var ret bool
	value := _this.Value_JS.Get("enabled")
	ret = (value).Bool()
	return ret
}

// SetEnabled setting attribute 'enabled' with
// type bool (idl: boolean).
func (_this *AudioTrack) SetEnabled(value bool) {
	input := value
	_this.Value_JS.Set("enabled", input)
}

// interface: AudioTrackList
type AudioTrackList struct {
	domcore.EventTarget
}

// AudioTrackListFromJS is casting a js.Wrapper into AudioTrackList.
func AudioTrackListFromJS(value js.Wrapper) *AudioTrackList {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &AudioTrackList{}
	ret.Value_JS = input
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *AudioTrackList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// Onchange returning attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *AudioTrackList) Onchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnchange setting attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *AudioTrackList) SetOnchange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onchange", input)
}

// Onaddtrack returning attribute 'onaddtrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *AudioTrackList) Onaddtrack() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onaddtrack")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnaddtrack setting attribute 'onaddtrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *AudioTrackList) SetOnaddtrack(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onaddtrack", input)
}

// Onremovetrack returning attribute 'onremovetrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *AudioTrackList) Onremovetrack() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onremovetrack")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnremovetrack setting attribute 'onremovetrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *AudioTrackList) SetOnremovetrack(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onremovetrack", input)
}

func (_this *AudioTrackList) GetTrackById(id string) (_result *AudioTrack) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := id
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getTrackById", _args[0:_end]...)
	var (
		_converted *AudioTrack // javascript: AudioTrack _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = AudioTrackFromJS(_returned)
	}
	_result = _converted
	return
}

// interface: HTMLAudioElement
type HTMLAudioElement struct {
	HTMLMediaElement
}

// HTMLAudioElementFromJS is casting a js.Wrapper into HTMLAudioElement.
func HTMLAudioElementFromJS(value js.Wrapper) *HTMLAudioElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &HTMLAudioElement{}
	ret.Value_JS = input
	return ret
}

// interface: HTMLMediaElement
type HTMLMediaElement struct {
	html.HTMLElement
}

// HTMLMediaElementFromJS is casting a js.Wrapper into HTMLMediaElement.
func HTMLMediaElementFromJS(value js.Wrapper) *HTMLMediaElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &HTMLMediaElement{}
	ret.Value_JS = input
	return ret
}

const NETWORKEMPTY_HTMLMediaElement int = 0
const NETWORKIDLE_HTMLMediaElement int = 1
const NETWORKLOADING_HTMLMediaElement int = 2
const NETWORKNOSOURCE_HTMLMediaElement int = 3
const HAVENOTHING_HTMLMediaElement int = 0
const HAVEMETADATA_HTMLMediaElement int = 1
const HAVECURRENTDATA_HTMLMediaElement int = 2
const HAVEFUTUREDATA_HTMLMediaElement int = 3
const HAVEENOUGHDATA_HTMLMediaElement int = 4

// Error returning attribute 'error' with
// type MediaError (idl: MediaError).
func (_this *HTMLMediaElement) Error() *MediaError {
	var ret *MediaError
	value := _this.Value_JS.Get("error")
	if value.Type() != js.TypeNull {
		ret = MediaErrorFromJS(value)
	}
	return ret
}

// Src returning attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLMediaElement) Src() string {
	var ret string
	value := _this.Value_JS.Get("src")
	ret = (value).String()
	return ret
}

// SetSrc setting attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLMediaElement) SetSrc(value string) {
	input := value
	_this.Value_JS.Set("src", input)
}

// SrcObject returning attribute 'srcObject' with
// type Union (idl: Union).
func (_this *HTMLMediaElement) SrcObject() *Union {
	var ret *Union
	value := _this.Value_JS.Get("srcObject")
	if value.Type() != js.TypeNull {
		ret = UnionFromJS(value)
	}
	return ret
}

// SetSrcObject setting attribute 'srcObject' with
// type Union (idl: Union).
func (_this *HTMLMediaElement) SetSrcObject(value *Union) {
	input := value.JSValue()
	_this.Value_JS.Set("srcObject", input)
}

// CurrentSrc returning attribute 'currentSrc' with
// type string (idl: USVString).
func (_this *HTMLMediaElement) CurrentSrc() string {
	var ret string
	value := _this.Value_JS.Get("currentSrc")
	ret = (value).String()
	return ret
}

// CrossOrigin returning attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *HTMLMediaElement) CrossOrigin() *string {
	var ret *string
	value := _this.Value_JS.Get("crossOrigin")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetCrossOrigin setting attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *HTMLMediaElement) SetCrossOrigin(value *string) {
	input := value
	_this.Value_JS.Set("crossOrigin", input)
}

// NetworkState returning attribute 'networkState' with
// type int (idl: unsigned short).
func (_this *HTMLMediaElement) NetworkState() int {
	var ret int
	value := _this.Value_JS.Get("networkState")
	ret = (value).Int()
	return ret
}

// Preload returning attribute 'preload' with
// type string (idl: DOMString).
func (_this *HTMLMediaElement) Preload() string {
	var ret string
	value := _this.Value_JS.Get("preload")
	ret = (value).String()
	return ret
}

// SetPreload setting attribute 'preload' with
// type string (idl: DOMString).
func (_this *HTMLMediaElement) SetPreload(value string) {
	input := value
	_this.Value_JS.Set("preload", input)
}

// Buffered returning attribute 'buffered' with
// type html.TimeRanges (idl: TimeRanges).
func (_this *HTMLMediaElement) Buffered() *html.TimeRanges {
	var ret *html.TimeRanges
	value := _this.Value_JS.Get("buffered")
	ret = html.TimeRangesFromJS(value)
	return ret
}

// ReadyState returning attribute 'readyState' with
// type int (idl: unsigned short).
func (_this *HTMLMediaElement) ReadyState() int {
	var ret int
	value := _this.Value_JS.Get("readyState")
	ret = (value).Int()
	return ret
}

// Seeking returning attribute 'seeking' with
// type bool (idl: boolean).
func (_this *HTMLMediaElement) Seeking() bool {
	var ret bool
	value := _this.Value_JS.Get("seeking")
	ret = (value).Bool()
	return ret
}

// CurrentTime returning attribute 'currentTime' with
// type float64 (idl: double).
func (_this *HTMLMediaElement) CurrentTime() float64 {
	var ret float64
	value := _this.Value_JS.Get("currentTime")
	ret = (value).Float()
	return ret
}

// SetCurrentTime setting attribute 'currentTime' with
// type float64 (idl: double).
func (_this *HTMLMediaElement) SetCurrentTime(value float64) {
	input := value
	_this.Value_JS.Set("currentTime", input)
}

// Duration returning attribute 'duration' with
// type float64 (idl: unrestricted double).
func (_this *HTMLMediaElement) Duration() float64 {
	var ret float64
	value := _this.Value_JS.Get("duration")
	ret = (value).Float()
	return ret
}

// Paused returning attribute 'paused' with
// type bool (idl: boolean).
func (_this *HTMLMediaElement) Paused() bool {
	var ret bool
	value := _this.Value_JS.Get("paused")
	ret = (value).Bool()
	return ret
}

// DefaultPlaybackRate returning attribute 'defaultPlaybackRate' with
// type float64 (idl: double).
func (_this *HTMLMediaElement) DefaultPlaybackRate() float64 {
	var ret float64
	value := _this.Value_JS.Get("defaultPlaybackRate")
	ret = (value).Float()
	return ret
}

// SetDefaultPlaybackRate setting attribute 'defaultPlaybackRate' with
// type float64 (idl: double).
func (_this *HTMLMediaElement) SetDefaultPlaybackRate(value float64) {
	input := value
	_this.Value_JS.Set("defaultPlaybackRate", input)
}

// PlaybackRate returning attribute 'playbackRate' with
// type float64 (idl: double).
func (_this *HTMLMediaElement) PlaybackRate() float64 {
	var ret float64
	value := _this.Value_JS.Get("playbackRate")
	ret = (value).Float()
	return ret
}

// SetPlaybackRate setting attribute 'playbackRate' with
// type float64 (idl: double).
func (_this *HTMLMediaElement) SetPlaybackRate(value float64) {
	input := value
	_this.Value_JS.Set("playbackRate", input)
}

// Played returning attribute 'played' with
// type html.TimeRanges (idl: TimeRanges).
func (_this *HTMLMediaElement) Played() *html.TimeRanges {
	var ret *html.TimeRanges
	value := _this.Value_JS.Get("played")
	ret = html.TimeRangesFromJS(value)
	return ret
}

// Seekable returning attribute 'seekable' with
// type html.TimeRanges (idl: TimeRanges).
func (_this *HTMLMediaElement) Seekable() *html.TimeRanges {
	var ret *html.TimeRanges
	value := _this.Value_JS.Get("seekable")
	ret = html.TimeRangesFromJS(value)
	return ret
}

// Ended returning attribute 'ended' with
// type bool (idl: boolean).
func (_this *HTMLMediaElement) Ended() bool {
	var ret bool
	value := _this.Value_JS.Get("ended")
	ret = (value).Bool()
	return ret
}

// Autoplay returning attribute 'autoplay' with
// type bool (idl: boolean).
func (_this *HTMLMediaElement) Autoplay() bool {
	var ret bool
	value := _this.Value_JS.Get("autoplay")
	ret = (value).Bool()
	return ret
}

// SetAutoplay setting attribute 'autoplay' with
// type bool (idl: boolean).
func (_this *HTMLMediaElement) SetAutoplay(value bool) {
	input := value
	_this.Value_JS.Set("autoplay", input)
}

// Loop returning attribute 'loop' with
// type bool (idl: boolean).
func (_this *HTMLMediaElement) Loop() bool {
	var ret bool
	value := _this.Value_JS.Get("loop")
	ret = (value).Bool()
	return ret
}

// SetLoop setting attribute 'loop' with
// type bool (idl: boolean).
func (_this *HTMLMediaElement) SetLoop(value bool) {
	input := value
	_this.Value_JS.Set("loop", input)
}

// Controls returning attribute 'controls' with
// type bool (idl: boolean).
func (_this *HTMLMediaElement) Controls() bool {
	var ret bool
	value := _this.Value_JS.Get("controls")
	ret = (value).Bool()
	return ret
}

// SetControls setting attribute 'controls' with
// type bool (idl: boolean).
func (_this *HTMLMediaElement) SetControls(value bool) {
	input := value
	_this.Value_JS.Set("controls", input)
}

// Volume returning attribute 'volume' with
// type float64 (idl: double).
func (_this *HTMLMediaElement) Volume() float64 {
	var ret float64
	value := _this.Value_JS.Get("volume")
	ret = (value).Float()
	return ret
}

// SetVolume setting attribute 'volume' with
// type float64 (idl: double).
func (_this *HTMLMediaElement) SetVolume(value float64) {
	input := value
	_this.Value_JS.Set("volume", input)
}

// Muted returning attribute 'muted' with
// type bool (idl: boolean).
func (_this *HTMLMediaElement) Muted() bool {
	var ret bool
	value := _this.Value_JS.Get("muted")
	ret = (value).Bool()
	return ret
}

// SetMuted setting attribute 'muted' with
// type bool (idl: boolean).
func (_this *HTMLMediaElement) SetMuted(value bool) {
	input := value
	_this.Value_JS.Set("muted", input)
}

// DefaultMuted returning attribute 'defaultMuted' with
// type bool (idl: boolean).
func (_this *HTMLMediaElement) DefaultMuted() bool {
	var ret bool
	value := _this.Value_JS.Get("defaultMuted")
	ret = (value).Bool()
	return ret
}

// SetDefaultMuted setting attribute 'defaultMuted' with
// type bool (idl: boolean).
func (_this *HTMLMediaElement) SetDefaultMuted(value bool) {
	input := value
	_this.Value_JS.Set("defaultMuted", input)
}

// AudioTracks returning attribute 'audioTracks' with
// type AudioTrackList (idl: AudioTrackList).
func (_this *HTMLMediaElement) AudioTracks() *AudioTrackList {
	var ret *AudioTrackList
	value := _this.Value_JS.Get("audioTracks")
	ret = AudioTrackListFromJS(value)
	return ret
}

// VideoTracks returning attribute 'videoTracks' with
// type VideoTrackList (idl: VideoTrackList).
func (_this *HTMLMediaElement) VideoTracks() *VideoTrackList {
	var ret *VideoTrackList
	value := _this.Value_JS.Get("videoTracks")
	ret = VideoTrackListFromJS(value)
	return ret
}

// TextTracks returning attribute 'textTracks' with
// type TextTrackList (idl: TextTrackList).
func (_this *HTMLMediaElement) TextTracks() *TextTrackList {
	var ret *TextTrackList
	value := _this.Value_JS.Get("textTracks")
	ret = TextTrackListFromJS(value)
	return ret
}

func (_this *HTMLMediaElement) Load() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("load", _args[0:_end]...)
	return
}

func (_this *HTMLMediaElement) CanPlayType(_type string) (_result CanPlayTypeResult) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("canPlayType", _args[0:_end]...)
	var (
		_converted CanPlayTypeResult // javascript: CanPlayTypeResult _what_return_name
	)
	_converted = CanPlayTypeResultFromJS(_returned)
	_result = _converted
	return
}

func (_this *HTMLMediaElement) FastSeek(time float64) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := time
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("fastSeek", _args[0:_end]...)
	return
}

func (_this *HTMLMediaElement) GetStartDate() (_result *javascript.Object) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getStartDate", _args[0:_end]...)
	var (
		_converted *javascript.Object // javascript: object _what_return_name
	)
	_converted = javascript.ObjectFromJS(_returned)
	_result = _converted
	return
}

func (_this *HTMLMediaElement) Play() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("play", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *HTMLMediaElement) Pause() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("pause", _args[0:_end]...)
	return
}

func (_this *HTMLMediaElement) AddTextTrack(kind TextTrackKind, label *string, language *string) (_result *TextTrack) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := kind.JSValue()
	_args[0] = _p0
	_end++
	if label != nil {
		_p1 := label
		_args[1] = _p1
		_end++
	}
	if language != nil {
		_p2 := language
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("addTextTrack", _args[0:_end]...)
	var (
		_converted *TextTrack // javascript: TextTrack _what_return_name
	)
	_converted = TextTrackFromJS(_returned)
	_result = _converted
	return
}

// interface: HTMLTrackElement
type HTMLTrackElement struct {
	html.HTMLElement
}

// HTMLTrackElementFromJS is casting a js.Wrapper into HTMLTrackElement.
func HTMLTrackElementFromJS(value js.Wrapper) *HTMLTrackElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &HTMLTrackElement{}
	ret.Value_JS = input
	return ret
}

const NONE_HTMLTrackElement int = 0
const LOADING_HTMLTrackElement int = 1
const LOADED_HTMLTrackElement int = 2
const ERROR_HTMLTrackElement int = 3

// Kind returning attribute 'kind' with
// type string (idl: DOMString).
func (_this *HTMLTrackElement) Kind() string {
	var ret string
	value := _this.Value_JS.Get("kind")
	ret = (value).String()
	return ret
}

// SetKind setting attribute 'kind' with
// type string (idl: DOMString).
func (_this *HTMLTrackElement) SetKind(value string) {
	input := value
	_this.Value_JS.Set("kind", input)
}

// Src returning attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLTrackElement) Src() string {
	var ret string
	value := _this.Value_JS.Get("src")
	ret = (value).String()
	return ret
}

// SetSrc setting attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLTrackElement) SetSrc(value string) {
	input := value
	_this.Value_JS.Set("src", input)
}

// Srclang returning attribute 'srclang' with
// type string (idl: DOMString).
func (_this *HTMLTrackElement) Srclang() string {
	var ret string
	value := _this.Value_JS.Get("srclang")
	ret = (value).String()
	return ret
}

// SetSrclang setting attribute 'srclang' with
// type string (idl: DOMString).
func (_this *HTMLTrackElement) SetSrclang(value string) {
	input := value
	_this.Value_JS.Set("srclang", input)
}

// Label returning attribute 'label' with
// type string (idl: DOMString).
func (_this *HTMLTrackElement) Label() string {
	var ret string
	value := _this.Value_JS.Get("label")
	ret = (value).String()
	return ret
}

// SetLabel setting attribute 'label' with
// type string (idl: DOMString).
func (_this *HTMLTrackElement) SetLabel(value string) {
	input := value
	_this.Value_JS.Set("label", input)
}

// Default returning attribute 'default' with
// type bool (idl: boolean).
func (_this *HTMLTrackElement) Default() bool {
	var ret bool
	value := _this.Value_JS.Get("default")
	ret = (value).Bool()
	return ret
}

// SetDefault setting attribute 'default' with
// type bool (idl: boolean).
func (_this *HTMLTrackElement) SetDefault(value bool) {
	input := value
	_this.Value_JS.Set("default", input)
}

// ReadyState returning attribute 'readyState' with
// type int (idl: unsigned short).
func (_this *HTMLTrackElement) ReadyState() int {
	var ret int
	value := _this.Value_JS.Get("readyState")
	ret = (value).Int()
	return ret
}

// Track returning attribute 'track' with
// type TextTrack (idl: TextTrack).
func (_this *HTMLTrackElement) Track() *TextTrack {
	var ret *TextTrack
	value := _this.Value_JS.Get("track")
	ret = TextTrackFromJS(value)
	return ret
}

// interface: HTMLVideoElement
type HTMLVideoElement struct {
	HTMLMediaElement
}

// HTMLVideoElementFromJS is casting a js.Wrapper into HTMLVideoElement.
func HTMLVideoElementFromJS(value js.Wrapper) *HTMLVideoElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &HTMLVideoElement{}
	ret.Value_JS = input
	return ret
}

// Width returning attribute 'width' with
// type uint (idl: unsigned long).
func (_this *HTMLVideoElement) Width() uint {
	var ret uint
	value := _this.Value_JS.Get("width")
	ret = (uint)((value).Int())
	return ret
}

// SetWidth setting attribute 'width' with
// type uint (idl: unsigned long).
func (_this *HTMLVideoElement) SetWidth(value uint) {
	input := value
	_this.Value_JS.Set("width", input)
}

// Height returning attribute 'height' with
// type uint (idl: unsigned long).
func (_this *HTMLVideoElement) Height() uint {
	var ret uint
	value := _this.Value_JS.Get("height")
	ret = (uint)((value).Int())
	return ret
}

// SetHeight setting attribute 'height' with
// type uint (idl: unsigned long).
func (_this *HTMLVideoElement) SetHeight(value uint) {
	input := value
	_this.Value_JS.Set("height", input)
}

// VideoWidth returning attribute 'videoWidth' with
// type uint (idl: unsigned long).
func (_this *HTMLVideoElement) VideoWidth() uint {
	var ret uint
	value := _this.Value_JS.Get("videoWidth")
	ret = (uint)((value).Int())
	return ret
}

// VideoHeight returning attribute 'videoHeight' with
// type uint (idl: unsigned long).
func (_this *HTMLVideoElement) VideoHeight() uint {
	var ret uint
	value := _this.Value_JS.Get("videoHeight")
	ret = (uint)((value).Int())
	return ret
}

// Poster returning attribute 'poster' with
// type string (idl: USVString).
func (_this *HTMLVideoElement) Poster() string {
	var ret string
	value := _this.Value_JS.Get("poster")
	ret = (value).String()
	return ret
}

// SetPoster setting attribute 'poster' with
// type string (idl: USVString).
func (_this *HTMLVideoElement) SetPoster(value string) {
	input := value
	_this.Value_JS.Set("poster", input)
}

// PlaysInline returning attribute 'playsInline' with
// type bool (idl: boolean).
func (_this *HTMLVideoElement) PlaysInline() bool {
	var ret bool
	value := _this.Value_JS.Get("playsInline")
	ret = (value).Bool()
	return ret
}

// SetPlaysInline setting attribute 'playsInline' with
// type bool (idl: boolean).
func (_this *HTMLVideoElement) SetPlaysInline(value bool) {
	input := value
	_this.Value_JS.Set("playsInline", input)
}

// interface: MediaError
type MediaError struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *MediaError) JSValue() js.Value {
	return _this.Value_JS
}

// MediaErrorFromJS is casting a js.Wrapper into MediaError.
func MediaErrorFromJS(value js.Wrapper) *MediaError {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaError{}
	ret.Value_JS = input
	return ret
}

const MEDIAERRABORTED_MediaError int = 1
const MEDIAERRNETWORK_MediaError int = 2
const MEDIAERRDECODE_MediaError int = 3
const MEDIAERRSRCNOTSUPPORTED_MediaError int = 4

// Code returning attribute 'code' with
// type int (idl: unsigned short).
func (_this *MediaError) Code() int {
	var ret int
	value := _this.Value_JS.Get("code")
	ret = (value).Int()
	return ret
}

// Message returning attribute 'message' with
// type string (idl: DOMString).
func (_this *MediaError) Message() string {
	var ret string
	value := _this.Value_JS.Get("message")
	ret = (value).String()
	return ret
}

// interface: TextTrack
type TextTrack struct {
	domcore.EventTarget
}

// TextTrackFromJS is casting a js.Wrapper into TextTrack.
func TextTrackFromJS(value js.Wrapper) *TextTrack {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &TextTrack{}
	ret.Value_JS = input
	return ret
}

// Kind returning attribute 'kind' with
// type TextTrackKind (idl: TextTrackKind).
func (_this *TextTrack) Kind() TextTrackKind {
	var ret TextTrackKind
	value := _this.Value_JS.Get("kind")
	ret = TextTrackKindFromJS(value)
	return ret
}

// Label returning attribute 'label' with
// type string (idl: DOMString).
func (_this *TextTrack) Label() string {
	var ret string
	value := _this.Value_JS.Get("label")
	ret = (value).String()
	return ret
}

// Language returning attribute 'language' with
// type string (idl: DOMString).
func (_this *TextTrack) Language() string {
	var ret string
	value := _this.Value_JS.Get("language")
	ret = (value).String()
	return ret
}

// Id returning attribute 'id' with
// type string (idl: DOMString).
func (_this *TextTrack) Id() string {
	var ret string
	value := _this.Value_JS.Get("id")
	ret = (value).String()
	return ret
}

// InBandMetadataTrackDispatchType returning attribute 'inBandMetadataTrackDispatchType' with
// type string (idl: DOMString).
func (_this *TextTrack) InBandMetadataTrackDispatchType() string {
	var ret string
	value := _this.Value_JS.Get("inBandMetadataTrackDispatchType")
	ret = (value).String()
	return ret
}

// Mode returning attribute 'mode' with
// type TextTrackMode (idl: TextTrackMode).
func (_this *TextTrack) Mode() TextTrackMode {
	var ret TextTrackMode
	value := _this.Value_JS.Get("mode")
	ret = TextTrackModeFromJS(value)
	return ret
}

// SetMode setting attribute 'mode' with
// type TextTrackMode (idl: TextTrackMode).
func (_this *TextTrack) SetMode(value TextTrackMode) {
	input := value.JSValue()
	_this.Value_JS.Set("mode", input)
}

// Cues returning attribute 'cues' with
// type TextTrackCueList (idl: TextTrackCueList).
func (_this *TextTrack) Cues() *TextTrackCueList {
	var ret *TextTrackCueList
	value := _this.Value_JS.Get("cues")
	if value.Type() != js.TypeNull {
		ret = TextTrackCueListFromJS(value)
	}
	return ret
}

// ActiveCues returning attribute 'activeCues' with
// type TextTrackCueList (idl: TextTrackCueList).
func (_this *TextTrack) ActiveCues() *TextTrackCueList {
	var ret *TextTrackCueList
	value := _this.Value_JS.Get("activeCues")
	if value.Type() != js.TypeNull {
		ret = TextTrackCueListFromJS(value)
	}
	return ret
}

// Oncuechange returning attribute 'oncuechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *TextTrack) Oncuechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncuechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncuechange setting attribute 'oncuechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *TextTrack) SetOncuechange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("oncuechange", input)
}

func (_this *TextTrack) AddCue(cue *TextTrackCue) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := cue.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("addCue", _args[0:_end]...)
	return
}

func (_this *TextTrack) RemoveCue(cue *TextTrackCue) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := cue.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("removeCue", _args[0:_end]...)
	return
}

// interface: TextTrackCue
type TextTrackCue struct {
	domcore.EventTarget
}

// TextTrackCueFromJS is casting a js.Wrapper into TextTrackCue.
func TextTrackCueFromJS(value js.Wrapper) *TextTrackCue {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &TextTrackCue{}
	ret.Value_JS = input
	return ret
}

// Track returning attribute 'track' with
// type TextTrack (idl: TextTrack).
func (_this *TextTrackCue) Track() *TextTrack {
	var ret *TextTrack
	value := _this.Value_JS.Get("track")
	if value.Type() != js.TypeNull {
		ret = TextTrackFromJS(value)
	}
	return ret
}

// Id returning attribute 'id' with
// type string (idl: DOMString).
func (_this *TextTrackCue) Id() string {
	var ret string
	value := _this.Value_JS.Get("id")
	ret = (value).String()
	return ret
}

// SetId setting attribute 'id' with
// type string (idl: DOMString).
func (_this *TextTrackCue) SetId(value string) {
	input := value
	_this.Value_JS.Set("id", input)
}

// StartTime returning attribute 'startTime' with
// type float64 (idl: double).
func (_this *TextTrackCue) StartTime() float64 {
	var ret float64
	value := _this.Value_JS.Get("startTime")
	ret = (value).Float()
	return ret
}

// SetStartTime setting attribute 'startTime' with
// type float64 (idl: double).
func (_this *TextTrackCue) SetStartTime(value float64) {
	input := value
	_this.Value_JS.Set("startTime", input)
}

// EndTime returning attribute 'endTime' with
// type float64 (idl: double).
func (_this *TextTrackCue) EndTime() float64 {
	var ret float64
	value := _this.Value_JS.Get("endTime")
	ret = (value).Float()
	return ret
}

// SetEndTime setting attribute 'endTime' with
// type float64 (idl: double).
func (_this *TextTrackCue) SetEndTime(value float64) {
	input := value
	_this.Value_JS.Set("endTime", input)
}

// PauseOnExit returning attribute 'pauseOnExit' with
// type bool (idl: boolean).
func (_this *TextTrackCue) PauseOnExit() bool {
	var ret bool
	value := _this.Value_JS.Get("pauseOnExit")
	ret = (value).Bool()
	return ret
}

// SetPauseOnExit setting attribute 'pauseOnExit' with
// type bool (idl: boolean).
func (_this *TextTrackCue) SetPauseOnExit(value bool) {
	input := value
	_this.Value_JS.Set("pauseOnExit", input)
}

// Onenter returning attribute 'onenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *TextTrackCue) Onenter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onenter")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnenter setting attribute 'onenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *TextTrackCue) SetOnenter(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onenter", input)
}

// Onexit returning attribute 'onexit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *TextTrackCue) Onexit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onexit")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnexit setting attribute 'onexit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *TextTrackCue) SetOnexit(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onexit", input)
}

// interface: TextTrackCueList
type TextTrackCueList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *TextTrackCueList) JSValue() js.Value {
	return _this.Value_JS
}

// TextTrackCueListFromJS is casting a js.Wrapper into TextTrackCueList.
func TextTrackCueListFromJS(value js.Wrapper) *TextTrackCueList {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &TextTrackCueList{}
	ret.Value_JS = input
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *TextTrackCueList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

func (_this *TextTrackCueList) GetCueById(id string) (_result *TextTrackCue) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := id
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getCueById", _args[0:_end]...)
	var (
		_converted *TextTrackCue // javascript: TextTrackCue _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = TextTrackCueFromJS(_returned)
	}
	_result = _converted
	return
}

// interface: TextTrackList
type TextTrackList struct {
	domcore.EventTarget
}

// TextTrackListFromJS is casting a js.Wrapper into TextTrackList.
func TextTrackListFromJS(value js.Wrapper) *TextTrackList {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &TextTrackList{}
	ret.Value_JS = input
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *TextTrackList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// Onchange returning attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *TextTrackList) Onchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnchange setting attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *TextTrackList) SetOnchange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onchange", input)
}

// Onaddtrack returning attribute 'onaddtrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *TextTrackList) Onaddtrack() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onaddtrack")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnaddtrack setting attribute 'onaddtrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *TextTrackList) SetOnaddtrack(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onaddtrack", input)
}

// Onremovetrack returning attribute 'onremovetrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *TextTrackList) Onremovetrack() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onremovetrack")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnremovetrack setting attribute 'onremovetrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *TextTrackList) SetOnremovetrack(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onremovetrack", input)
}

func (_this *TextTrackList) GetTrackById(id string) (_result *TextTrack) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := id
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getTrackById", _args[0:_end]...)
	var (
		_converted *TextTrack // javascript: TextTrack _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = TextTrackFromJS(_returned)
	}
	_result = _converted
	return
}

// interface: VideoTrack
type VideoTrack struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *VideoTrack) JSValue() js.Value {
	return _this.Value_JS
}

// VideoTrackFromJS is casting a js.Wrapper into VideoTrack.
func VideoTrackFromJS(value js.Wrapper) *VideoTrack {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &VideoTrack{}
	ret.Value_JS = input
	return ret
}

// Id returning attribute 'id' with
// type string (idl: DOMString).
func (_this *VideoTrack) Id() string {
	var ret string
	value := _this.Value_JS.Get("id")
	ret = (value).String()
	return ret
}

// Kind returning attribute 'kind' with
// type string (idl: DOMString).
func (_this *VideoTrack) Kind() string {
	var ret string
	value := _this.Value_JS.Get("kind")
	ret = (value).String()
	return ret
}

// Label returning attribute 'label' with
// type string (idl: DOMString).
func (_this *VideoTrack) Label() string {
	var ret string
	value := _this.Value_JS.Get("label")
	ret = (value).String()
	return ret
}

// Language returning attribute 'language' with
// type string (idl: DOMString).
func (_this *VideoTrack) Language() string {
	var ret string
	value := _this.Value_JS.Get("language")
	ret = (value).String()
	return ret
}

// Selected returning attribute 'selected' with
// type bool (idl: boolean).
func (_this *VideoTrack) Selected() bool {
	var ret bool
	value := _this.Value_JS.Get("selected")
	ret = (value).Bool()
	return ret
}

// SetSelected setting attribute 'selected' with
// type bool (idl: boolean).
func (_this *VideoTrack) SetSelected(value bool) {
	input := value
	_this.Value_JS.Set("selected", input)
}

// interface: VideoTrackList
type VideoTrackList struct {
	domcore.EventTarget
}

// VideoTrackListFromJS is casting a js.Wrapper into VideoTrackList.
func VideoTrackListFromJS(value js.Wrapper) *VideoTrackList {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &VideoTrackList{}
	ret.Value_JS = input
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *VideoTrackList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// SelectedIndex returning attribute 'selectedIndex' with
// type int (idl: long).
func (_this *VideoTrackList) SelectedIndex() int {
	var ret int
	value := _this.Value_JS.Get("selectedIndex")
	ret = (value).Int()
	return ret
}

// Onchange returning attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *VideoTrackList) Onchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnchange setting attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *VideoTrackList) SetOnchange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onchange", input)
}

// Onaddtrack returning attribute 'onaddtrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *VideoTrackList) Onaddtrack() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onaddtrack")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnaddtrack setting attribute 'onaddtrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *VideoTrackList) SetOnaddtrack(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onaddtrack", input)
}

// Onremovetrack returning attribute 'onremovetrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *VideoTrackList) Onremovetrack() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onremovetrack")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnremovetrack setting attribute 'onremovetrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *VideoTrackList) SetOnremovetrack(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onremovetrack", input)
}

func (_this *VideoTrackList) GetTrackById(id string) (_result *VideoTrack) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := id
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getTrackById", _args[0:_end]...)
	var (
		_converted *VideoTrack // javascript: VideoTrack _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = VideoTrackFromJS(_returned)
	}
	_result = _converted
	return
}
