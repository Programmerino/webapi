// Code generated by webidl-bind. DO NOT EDIT.

// +build !js

package htmlevent

import js "github.com/gowebapi/webapi/core/failjs"

import (
	"github.com/gowebapi/webapi"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/javascript"
	"github.com/gowebapi/webapi/xhr"
)

// using following types:
// domcore.Event
// domcore.EventTarget
// javascript.Promise
// webapi.Window
// xhr.FormData

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// dictionary: CompositionEventInit
type CompositionEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	View       *webapi.Window
	Detail     int
	Data       string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *CompositionEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View.JSValue()
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.Data
	out.Set("data", value5)
	return out
}

// CompositionEventInitFromJS is allocating a new
// CompositionEventInit object and copy all values from
// input javascript object
func CompositionEventInitFromJS(value js.Wrapper) *CompositionEventInit {
	input := value.JSValue()
	var out CompositionEventInit
	var (
		value0 bool           // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool           // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool           // javascript: boolean {composed Composed composed}
		value3 *webapi.Window // javascript: Window {view View view}
		value4 int            // javascript: long {detail Detail detail}
		value5 string         // javascript: DOMString {data Data data}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	if input.Get("view").Type() != js.TypeNull {
		value3 = webapi.WindowFromJS(input.Get("view"))
	}
	out.View = value3
	value4 = (input.Get("detail")).Int()
	out.Detail = value4
	value5 = (input.Get("data")).String()
	out.Data = value5
	return &out
}

// dictionary: ErrorEventInit
type ErrorEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Message    string
	Filename   string
	Lineno     uint
	Colno      uint
	Error      js.Value
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *ErrorEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Message
	out.Set("message", value3)
	value4 := _this.Filename
	out.Set("filename", value4)
	value5 := _this.Lineno
	out.Set("lineno", value5)
	value6 := _this.Colno
	out.Set("colno", value6)
	value7 := _this.Error
	out.Set("error", value7)
	return out
}

// ErrorEventInitFromJS is allocating a new
// ErrorEventInit object and copy all values from
// input javascript object
func ErrorEventInitFromJS(value js.Wrapper) *ErrorEventInit {
	input := value.JSValue()
	var out ErrorEventInit
	var (
		value0 bool     // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool     // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool     // javascript: boolean {composed Composed composed}
		value3 string   // javascript: DOMString {message Message message}
		value4 string   // javascript: USVString {filename Filename filename}
		value5 uint     // javascript: unsigned long {lineno Lineno lineno}
		value6 uint     // javascript: unsigned long {colno Colno colno}
		value7 js.Value // javascript: any {error Error _error}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = (input.Get("message")).String()
	out.Message = value3
	value4 = (input.Get("filename")).String()
	out.Filename = value4
	value5 = (uint)((input.Get("lineno")).Int())
	out.Lineno = value5
	value6 = (uint)((input.Get("colno")).Int())
	out.Colno = value6
	value7 = input.Get("error")
	out.Error = value7
	return &out
}

// dictionary: EventModifierInit
type EventModifierInit struct {
	Bubbles            bool
	Cancelable         bool
	Composed           bool
	View               *webapi.Window
	Detail             int
	CtrlKey            bool
	ShiftKey           bool
	AltKey             bool
	MetaKey            bool
	ModifierAltGraph   bool
	ModifierCapsLock   bool
	ModifierFn         bool
	ModifierFnLock     bool
	ModifierHyper      bool
	ModifierNumLock    bool
	ModifierScrollLock bool
	ModifierSuper      bool
	ModifierSymbol     bool
	ModifierSymbolLock bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *EventModifierInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View.JSValue()
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.CtrlKey
	out.Set("ctrlKey", value5)
	value6 := _this.ShiftKey
	out.Set("shiftKey", value6)
	value7 := _this.AltKey
	out.Set("altKey", value7)
	value8 := _this.MetaKey
	out.Set("metaKey", value8)
	value9 := _this.ModifierAltGraph
	out.Set("modifierAltGraph", value9)
	value10 := _this.ModifierCapsLock
	out.Set("modifierCapsLock", value10)
	value11 := _this.ModifierFn
	out.Set("modifierFn", value11)
	value12 := _this.ModifierFnLock
	out.Set("modifierFnLock", value12)
	value13 := _this.ModifierHyper
	out.Set("modifierHyper", value13)
	value14 := _this.ModifierNumLock
	out.Set("modifierNumLock", value14)
	value15 := _this.ModifierScrollLock
	out.Set("modifierScrollLock", value15)
	value16 := _this.ModifierSuper
	out.Set("modifierSuper", value16)
	value17 := _this.ModifierSymbol
	out.Set("modifierSymbol", value17)
	value18 := _this.ModifierSymbolLock
	out.Set("modifierSymbolLock", value18)
	return out
}

// EventModifierInitFromJS is allocating a new
// EventModifierInit object and copy all values from
// input javascript object
func EventModifierInitFromJS(value js.Wrapper) *EventModifierInit {
	input := value.JSValue()
	var out EventModifierInit
	var (
		value0  bool           // javascript: boolean {bubbles Bubbles bubbles}
		value1  bool           // javascript: boolean {cancelable Cancelable cancelable}
		value2  bool           // javascript: boolean {composed Composed composed}
		value3  *webapi.Window // javascript: Window {view View view}
		value4  int            // javascript: long {detail Detail detail}
		value5  bool           // javascript: boolean {ctrlKey CtrlKey ctrlKey}
		value6  bool           // javascript: boolean {shiftKey ShiftKey shiftKey}
		value7  bool           // javascript: boolean {altKey AltKey altKey}
		value8  bool           // javascript: boolean {metaKey MetaKey metaKey}
		value9  bool           // javascript: boolean {modifierAltGraph ModifierAltGraph modifierAltGraph}
		value10 bool           // javascript: boolean {modifierCapsLock ModifierCapsLock modifierCapsLock}
		value11 bool           // javascript: boolean {modifierFn ModifierFn modifierFn}
		value12 bool           // javascript: boolean {modifierFnLock ModifierFnLock modifierFnLock}
		value13 bool           // javascript: boolean {modifierHyper ModifierHyper modifierHyper}
		value14 bool           // javascript: boolean {modifierNumLock ModifierNumLock modifierNumLock}
		value15 bool           // javascript: boolean {modifierScrollLock ModifierScrollLock modifierScrollLock}
		value16 bool           // javascript: boolean {modifierSuper ModifierSuper modifierSuper}
		value17 bool           // javascript: boolean {modifierSymbol ModifierSymbol modifierSymbol}
		value18 bool           // javascript: boolean {modifierSymbolLock ModifierSymbolLock modifierSymbolLock}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	if input.Get("view").Type() != js.TypeNull {
		value3 = webapi.WindowFromJS(input.Get("view"))
	}
	out.View = value3
	value4 = (input.Get("detail")).Int()
	out.Detail = value4
	value5 = (input.Get("ctrlKey")).Bool()
	out.CtrlKey = value5
	value6 = (input.Get("shiftKey")).Bool()
	out.ShiftKey = value6
	value7 = (input.Get("altKey")).Bool()
	out.AltKey = value7
	value8 = (input.Get("metaKey")).Bool()
	out.MetaKey = value8
	value9 = (input.Get("modifierAltGraph")).Bool()
	out.ModifierAltGraph = value9
	value10 = (input.Get("modifierCapsLock")).Bool()
	out.ModifierCapsLock = value10
	value11 = (input.Get("modifierFn")).Bool()
	out.ModifierFn = value11
	value12 = (input.Get("modifierFnLock")).Bool()
	out.ModifierFnLock = value12
	value13 = (input.Get("modifierHyper")).Bool()
	out.ModifierHyper = value13
	value14 = (input.Get("modifierNumLock")).Bool()
	out.ModifierNumLock = value14
	value15 = (input.Get("modifierScrollLock")).Bool()
	out.ModifierScrollLock = value15
	value16 = (input.Get("modifierSuper")).Bool()
	out.ModifierSuper = value16
	value17 = (input.Get("modifierSymbol")).Bool()
	out.ModifierSymbol = value17
	value18 = (input.Get("modifierSymbolLock")).Bool()
	out.ModifierSymbolLock = value18
	return &out
}

// dictionary: FocusEventInit
type FocusEventInit struct {
	Bubbles       bool
	Cancelable    bool
	Composed      bool
	View          *webapi.Window
	Detail        int
	RelatedTarget *domcore.EventTarget
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *FocusEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View.JSValue()
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.RelatedTarget.JSValue()
	out.Set("relatedTarget", value5)
	return out
}

// FocusEventInitFromJS is allocating a new
// FocusEventInit object and copy all values from
// input javascript object
func FocusEventInitFromJS(value js.Wrapper) *FocusEventInit {
	input := value.JSValue()
	var out FocusEventInit
	var (
		value0 bool                 // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool                 // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool                 // javascript: boolean {composed Composed composed}
		value3 *webapi.Window       // javascript: Window {view View view}
		value4 int                  // javascript: long {detail Detail detail}
		value5 *domcore.EventTarget // javascript: EventTarget {relatedTarget RelatedTarget relatedTarget}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	if input.Get("view").Type() != js.TypeNull {
		value3 = webapi.WindowFromJS(input.Get("view"))
	}
	out.View = value3
	value4 = (input.Get("detail")).Int()
	out.Detail = value4
	if input.Get("relatedTarget").Type() != js.TypeNull {
		value5 = domcore.EventTargetFromJS(input.Get("relatedTarget"))
	}
	out.RelatedTarget = value5
	return &out
}

// dictionary: FormDataEventInit
type FormDataEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	FormData   *xhr.FormData
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *FormDataEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.FormData.JSValue()
	out.Set("formData", value3)
	return out
}

// FormDataEventInitFromJS is allocating a new
// FormDataEventInit object and copy all values from
// input javascript object
func FormDataEventInitFromJS(value js.Wrapper) *FormDataEventInit {
	input := value.JSValue()
	var out FormDataEventInit
	var (
		value0 bool          // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool          // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool          // javascript: boolean {composed Composed composed}
		value3 *xhr.FormData // javascript: FormData {formData FormData formData}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = xhr.FormDataFromJS(input.Get("formData"))
	out.FormData = value3
	return &out
}

// dictionary: HashChangeEventInit
type HashChangeEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	OldURL     string
	NewURL     string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *HashChangeEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.OldURL
	out.Set("oldURL", value3)
	value4 := _this.NewURL
	out.Set("newURL", value4)
	return out
}

// HashChangeEventInitFromJS is allocating a new
// HashChangeEventInit object and copy all values from
// input javascript object
func HashChangeEventInitFromJS(value js.Wrapper) *HashChangeEventInit {
	input := value.JSValue()
	var out HashChangeEventInit
	var (
		value0 bool   // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool   // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool   // javascript: boolean {composed Composed composed}
		value3 string // javascript: USVString {oldURL OldURL oldURL}
		value4 string // javascript: USVString {newURL NewURL newURL}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = (input.Get("oldURL")).String()
	out.OldURL = value3
	value4 = (input.Get("newURL")).String()
	out.NewURL = value4
	return &out
}

// dictionary: InputEventInit
type InputEventInit struct {
	Bubbles     bool
	Cancelable  bool
	Composed    bool
	View        *webapi.Window
	Detail      int
	Data        *string
	IsComposing bool
	InputType   string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *InputEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View.JSValue()
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.Data
	out.Set("data", value5)
	value6 := _this.IsComposing
	out.Set("isComposing", value6)
	value7 := _this.InputType
	out.Set("inputType", value7)
	return out
}

// InputEventInitFromJS is allocating a new
// InputEventInit object and copy all values from
// input javascript object
func InputEventInitFromJS(value js.Wrapper) *InputEventInit {
	input := value.JSValue()
	var out InputEventInit
	var (
		value0 bool           // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool           // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool           // javascript: boolean {composed Composed composed}
		value3 *webapi.Window // javascript: Window {view View view}
		value4 int            // javascript: long {detail Detail detail}
		value5 *string        // javascript: DOMString {data Data data}
		value6 bool           // javascript: boolean {isComposing IsComposing isComposing}
		value7 string         // javascript: DOMString {inputType InputType inputType}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	if input.Get("view").Type() != js.TypeNull {
		value3 = webapi.WindowFromJS(input.Get("view"))
	}
	out.View = value3
	value4 = (input.Get("detail")).Int()
	out.Detail = value4
	if input.Get("data").Type() != js.TypeNull {
		__tmp := (input.Get("data")).String()
		value5 = &__tmp
	}
	out.Data = value5
	value6 = (input.Get("isComposing")).Bool()
	out.IsComposing = value6
	value7 = (input.Get("inputType")).String()
	out.InputType = value7
	return &out
}

// dictionary: KeyboardEventInit
type KeyboardEventInit struct {
	Bubbles            bool
	Cancelable         bool
	Composed           bool
	View               *webapi.Window
	Detail             int
	CtrlKey            bool
	ShiftKey           bool
	AltKey             bool
	MetaKey            bool
	ModifierAltGraph   bool
	ModifierCapsLock   bool
	ModifierFn         bool
	ModifierFnLock     bool
	ModifierHyper      bool
	ModifierNumLock    bool
	ModifierScrollLock bool
	ModifierSuper      bool
	ModifierSymbol     bool
	ModifierSymbolLock bool
	Key                string
	Code               string
	Location           uint
	Repeat             bool
	IsComposing        bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *KeyboardEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View.JSValue()
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.CtrlKey
	out.Set("ctrlKey", value5)
	value6 := _this.ShiftKey
	out.Set("shiftKey", value6)
	value7 := _this.AltKey
	out.Set("altKey", value7)
	value8 := _this.MetaKey
	out.Set("metaKey", value8)
	value9 := _this.ModifierAltGraph
	out.Set("modifierAltGraph", value9)
	value10 := _this.ModifierCapsLock
	out.Set("modifierCapsLock", value10)
	value11 := _this.ModifierFn
	out.Set("modifierFn", value11)
	value12 := _this.ModifierFnLock
	out.Set("modifierFnLock", value12)
	value13 := _this.ModifierHyper
	out.Set("modifierHyper", value13)
	value14 := _this.ModifierNumLock
	out.Set("modifierNumLock", value14)
	value15 := _this.ModifierScrollLock
	out.Set("modifierScrollLock", value15)
	value16 := _this.ModifierSuper
	out.Set("modifierSuper", value16)
	value17 := _this.ModifierSymbol
	out.Set("modifierSymbol", value17)
	value18 := _this.ModifierSymbolLock
	out.Set("modifierSymbolLock", value18)
	value19 := _this.Key
	out.Set("key", value19)
	value20 := _this.Code
	out.Set("code", value20)
	value21 := _this.Location
	out.Set("location", value21)
	value22 := _this.Repeat
	out.Set("repeat", value22)
	value23 := _this.IsComposing
	out.Set("isComposing", value23)
	return out
}

// KeyboardEventInitFromJS is allocating a new
// KeyboardEventInit object and copy all values from
// input javascript object
func KeyboardEventInitFromJS(value js.Wrapper) *KeyboardEventInit {
	input := value.JSValue()
	var out KeyboardEventInit
	var (
		value0  bool           // javascript: boolean {bubbles Bubbles bubbles}
		value1  bool           // javascript: boolean {cancelable Cancelable cancelable}
		value2  bool           // javascript: boolean {composed Composed composed}
		value3  *webapi.Window // javascript: Window {view View view}
		value4  int            // javascript: long {detail Detail detail}
		value5  bool           // javascript: boolean {ctrlKey CtrlKey ctrlKey}
		value6  bool           // javascript: boolean {shiftKey ShiftKey shiftKey}
		value7  bool           // javascript: boolean {altKey AltKey altKey}
		value8  bool           // javascript: boolean {metaKey MetaKey metaKey}
		value9  bool           // javascript: boolean {modifierAltGraph ModifierAltGraph modifierAltGraph}
		value10 bool           // javascript: boolean {modifierCapsLock ModifierCapsLock modifierCapsLock}
		value11 bool           // javascript: boolean {modifierFn ModifierFn modifierFn}
		value12 bool           // javascript: boolean {modifierFnLock ModifierFnLock modifierFnLock}
		value13 bool           // javascript: boolean {modifierHyper ModifierHyper modifierHyper}
		value14 bool           // javascript: boolean {modifierNumLock ModifierNumLock modifierNumLock}
		value15 bool           // javascript: boolean {modifierScrollLock ModifierScrollLock modifierScrollLock}
		value16 bool           // javascript: boolean {modifierSuper ModifierSuper modifierSuper}
		value17 bool           // javascript: boolean {modifierSymbol ModifierSymbol modifierSymbol}
		value18 bool           // javascript: boolean {modifierSymbolLock ModifierSymbolLock modifierSymbolLock}
		value19 string         // javascript: DOMString {key Key key}
		value20 string         // javascript: DOMString {code Code code}
		value21 uint           // javascript: unsigned long {location Location location}
		value22 bool           // javascript: boolean {repeat Repeat repeat}
		value23 bool           // javascript: boolean {isComposing IsComposing isComposing}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	if input.Get("view").Type() != js.TypeNull {
		value3 = webapi.WindowFromJS(input.Get("view"))
	}
	out.View = value3
	value4 = (input.Get("detail")).Int()
	out.Detail = value4
	value5 = (input.Get("ctrlKey")).Bool()
	out.CtrlKey = value5
	value6 = (input.Get("shiftKey")).Bool()
	out.ShiftKey = value6
	value7 = (input.Get("altKey")).Bool()
	out.AltKey = value7
	value8 = (input.Get("metaKey")).Bool()
	out.MetaKey = value8
	value9 = (input.Get("modifierAltGraph")).Bool()
	out.ModifierAltGraph = value9
	value10 = (input.Get("modifierCapsLock")).Bool()
	out.ModifierCapsLock = value10
	value11 = (input.Get("modifierFn")).Bool()
	out.ModifierFn = value11
	value12 = (input.Get("modifierFnLock")).Bool()
	out.ModifierFnLock = value12
	value13 = (input.Get("modifierHyper")).Bool()
	out.ModifierHyper = value13
	value14 = (input.Get("modifierNumLock")).Bool()
	out.ModifierNumLock = value14
	value15 = (input.Get("modifierScrollLock")).Bool()
	out.ModifierScrollLock = value15
	value16 = (input.Get("modifierSuper")).Bool()
	out.ModifierSuper = value16
	value17 = (input.Get("modifierSymbol")).Bool()
	out.ModifierSymbol = value17
	value18 = (input.Get("modifierSymbolLock")).Bool()
	out.ModifierSymbolLock = value18
	value19 = (input.Get("key")).String()
	out.Key = value19
	value20 = (input.Get("code")).String()
	out.Code = value20
	value21 = (uint)((input.Get("location")).Int())
	out.Location = value21
	value22 = (input.Get("repeat")).Bool()
	out.Repeat = value22
	value23 = (input.Get("isComposing")).Bool()
	out.IsComposing = value23
	return &out
}

// dictionary: MouseEventInit
type MouseEventInit struct {
	Bubbles            bool
	Cancelable         bool
	Composed           bool
	View               *webapi.Window
	Detail             int
	CtrlKey            bool
	ShiftKey           bool
	AltKey             bool
	MetaKey            bool
	ModifierAltGraph   bool
	ModifierCapsLock   bool
	ModifierFn         bool
	ModifierFnLock     bool
	ModifierHyper      bool
	ModifierNumLock    bool
	ModifierScrollLock bool
	ModifierSuper      bool
	ModifierSymbol     bool
	ModifierSymbolLock bool
	ScreenX            int
	ScreenY            int
	ClientX            int
	ClientY            int
	Button             int
	Buttons            int
	RelatedTarget      *domcore.EventTarget
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MouseEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View.JSValue()
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.CtrlKey
	out.Set("ctrlKey", value5)
	value6 := _this.ShiftKey
	out.Set("shiftKey", value6)
	value7 := _this.AltKey
	out.Set("altKey", value7)
	value8 := _this.MetaKey
	out.Set("metaKey", value8)
	value9 := _this.ModifierAltGraph
	out.Set("modifierAltGraph", value9)
	value10 := _this.ModifierCapsLock
	out.Set("modifierCapsLock", value10)
	value11 := _this.ModifierFn
	out.Set("modifierFn", value11)
	value12 := _this.ModifierFnLock
	out.Set("modifierFnLock", value12)
	value13 := _this.ModifierHyper
	out.Set("modifierHyper", value13)
	value14 := _this.ModifierNumLock
	out.Set("modifierNumLock", value14)
	value15 := _this.ModifierScrollLock
	out.Set("modifierScrollLock", value15)
	value16 := _this.ModifierSuper
	out.Set("modifierSuper", value16)
	value17 := _this.ModifierSymbol
	out.Set("modifierSymbol", value17)
	value18 := _this.ModifierSymbolLock
	out.Set("modifierSymbolLock", value18)
	value19 := _this.ScreenX
	out.Set("screenX", value19)
	value20 := _this.ScreenY
	out.Set("screenY", value20)
	value21 := _this.ClientX
	out.Set("clientX", value21)
	value22 := _this.ClientY
	out.Set("clientY", value22)
	value23 := _this.Button
	out.Set("button", value23)
	value24 := _this.Buttons
	out.Set("buttons", value24)
	value25 := _this.RelatedTarget.JSValue()
	out.Set("relatedTarget", value25)
	return out
}

// MouseEventInitFromJS is allocating a new
// MouseEventInit object and copy all values from
// input javascript object
func MouseEventInitFromJS(value js.Wrapper) *MouseEventInit {
	input := value.JSValue()
	var out MouseEventInit
	var (
		value0  bool                 // javascript: boolean {bubbles Bubbles bubbles}
		value1  bool                 // javascript: boolean {cancelable Cancelable cancelable}
		value2  bool                 // javascript: boolean {composed Composed composed}
		value3  *webapi.Window       // javascript: Window {view View view}
		value4  int                  // javascript: long {detail Detail detail}
		value5  bool                 // javascript: boolean {ctrlKey CtrlKey ctrlKey}
		value6  bool                 // javascript: boolean {shiftKey ShiftKey shiftKey}
		value7  bool                 // javascript: boolean {altKey AltKey altKey}
		value8  bool                 // javascript: boolean {metaKey MetaKey metaKey}
		value9  bool                 // javascript: boolean {modifierAltGraph ModifierAltGraph modifierAltGraph}
		value10 bool                 // javascript: boolean {modifierCapsLock ModifierCapsLock modifierCapsLock}
		value11 bool                 // javascript: boolean {modifierFn ModifierFn modifierFn}
		value12 bool                 // javascript: boolean {modifierFnLock ModifierFnLock modifierFnLock}
		value13 bool                 // javascript: boolean {modifierHyper ModifierHyper modifierHyper}
		value14 bool                 // javascript: boolean {modifierNumLock ModifierNumLock modifierNumLock}
		value15 bool                 // javascript: boolean {modifierScrollLock ModifierScrollLock modifierScrollLock}
		value16 bool                 // javascript: boolean {modifierSuper ModifierSuper modifierSuper}
		value17 bool                 // javascript: boolean {modifierSymbol ModifierSymbol modifierSymbol}
		value18 bool                 // javascript: boolean {modifierSymbolLock ModifierSymbolLock modifierSymbolLock}
		value19 int                  // javascript: long {screenX ScreenX screenX}
		value20 int                  // javascript: long {screenY ScreenY screenY}
		value21 int                  // javascript: long {clientX ClientX clientX}
		value22 int                  // javascript: long {clientY ClientY clientY}
		value23 int                  // javascript: short {button Button button}
		value24 int                  // javascript: unsigned short {buttons Buttons buttons}
		value25 *domcore.EventTarget // javascript: EventTarget {relatedTarget RelatedTarget relatedTarget}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	if input.Get("view").Type() != js.TypeNull {
		value3 = webapi.WindowFromJS(input.Get("view"))
	}
	out.View = value3
	value4 = (input.Get("detail")).Int()
	out.Detail = value4
	value5 = (input.Get("ctrlKey")).Bool()
	out.CtrlKey = value5
	value6 = (input.Get("shiftKey")).Bool()
	out.ShiftKey = value6
	value7 = (input.Get("altKey")).Bool()
	out.AltKey = value7
	value8 = (input.Get("metaKey")).Bool()
	out.MetaKey = value8
	value9 = (input.Get("modifierAltGraph")).Bool()
	out.ModifierAltGraph = value9
	value10 = (input.Get("modifierCapsLock")).Bool()
	out.ModifierCapsLock = value10
	value11 = (input.Get("modifierFn")).Bool()
	out.ModifierFn = value11
	value12 = (input.Get("modifierFnLock")).Bool()
	out.ModifierFnLock = value12
	value13 = (input.Get("modifierHyper")).Bool()
	out.ModifierHyper = value13
	value14 = (input.Get("modifierNumLock")).Bool()
	out.ModifierNumLock = value14
	value15 = (input.Get("modifierScrollLock")).Bool()
	out.ModifierScrollLock = value15
	value16 = (input.Get("modifierSuper")).Bool()
	out.ModifierSuper = value16
	value17 = (input.Get("modifierSymbol")).Bool()
	out.ModifierSymbol = value17
	value18 = (input.Get("modifierSymbolLock")).Bool()
	out.ModifierSymbolLock = value18
	value19 = (input.Get("screenX")).Int()
	out.ScreenX = value19
	value20 = (input.Get("screenY")).Int()
	out.ScreenY = value20
	value21 = (input.Get("clientX")).Int()
	out.ClientX = value21
	value22 = (input.Get("clientY")).Int()
	out.ClientY = value22
	value23 = (input.Get("button")).Int()
	out.Button = value23
	value24 = (input.Get("buttons")).Int()
	out.Buttons = value24
	if input.Get("relatedTarget").Type() != js.TypeNull {
		value25 = domcore.EventTargetFromJS(input.Get("relatedTarget"))
	}
	out.RelatedTarget = value25
	return &out
}

// dictionary: PageTransitionEventInit
type PageTransitionEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Persisted  bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PageTransitionEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Persisted
	out.Set("persisted", value3)
	return out
}

// PageTransitionEventInitFromJS is allocating a new
// PageTransitionEventInit object and copy all values from
// input javascript object
func PageTransitionEventInitFromJS(value js.Wrapper) *PageTransitionEventInit {
	input := value.JSValue()
	var out PageTransitionEventInit
	var (
		value0 bool // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool // javascript: boolean {composed Composed composed}
		value3 bool // javascript: boolean {persisted Persisted persisted}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = (input.Get("persisted")).Bool()
	out.Persisted = value3
	return &out
}

// dictionary: PopStateEventInit
type PopStateEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	State      js.Value
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PopStateEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.State
	out.Set("state", value3)
	return out
}

// PopStateEventInitFromJS is allocating a new
// PopStateEventInit object and copy all values from
// input javascript object
func PopStateEventInitFromJS(value js.Wrapper) *PopStateEventInit {
	input := value.JSValue()
	var out PopStateEventInit
	var (
		value0 bool     // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool     // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool     // javascript: boolean {composed Composed composed}
		value3 js.Value // javascript: any {state State state}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = input.Get("state")
	out.State = value3
	return &out
}

// dictionary: PromiseRejectionEventInit
type PromiseRejectionEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Promise    *javascript.Promise
	Reason     js.Value
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PromiseRejectionEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Promise.JSValue()
	out.Set("promise", value3)
	value4 := _this.Reason
	out.Set("reason", value4)
	return out
}

// PromiseRejectionEventInitFromJS is allocating a new
// PromiseRejectionEventInit object and copy all values from
// input javascript object
func PromiseRejectionEventInitFromJS(value js.Wrapper) *PromiseRejectionEventInit {
	input := value.JSValue()
	var out PromiseRejectionEventInit
	var (
		value0 bool                // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool                // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool                // javascript: boolean {composed Composed composed}
		value3 *javascript.Promise // javascript: Promise {promise Promise promise}
		value4 js.Value            // javascript: any {reason Reason reason}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = javascript.PromiseFromJS(input.Get("promise"))
	out.Promise = value3
	value4 = input.Get("reason")
	out.Reason = value4
	return &out
}

// dictionary: TrackEventInit
type TrackEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Track      *Union
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *TrackEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Track.JSValue()
	out.Set("track", value3)
	return out
}

// TrackEventInitFromJS is allocating a new
// TrackEventInit object and copy all values from
// input javascript object
func TrackEventInitFromJS(value js.Wrapper) *TrackEventInit {
	input := value.JSValue()
	var out TrackEventInit
	var (
		value0 bool   // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool   // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool   // javascript: boolean {composed Composed composed}
		value3 *Union // javascript: Union {track Track track}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	if input.Get("track").Type() != js.TypeNull {
		value3 = UnionFromJS(input.Get("track"))
	}
	out.Track = value3
	return &out
}

// dictionary: UIEventInit
type UIEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	View       *webapi.Window
	Detail     int
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *UIEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View.JSValue()
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	return out
}

// UIEventInitFromJS is allocating a new
// UIEventInit object and copy all values from
// input javascript object
func UIEventInitFromJS(value js.Wrapper) *UIEventInit {
	input := value.JSValue()
	var out UIEventInit
	var (
		value0 bool           // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool           // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool           // javascript: boolean {composed Composed composed}
		value3 *webapi.Window // javascript: Window {view View view}
		value4 int            // javascript: long {detail Detail detail}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	if input.Get("view").Type() != js.TypeNull {
		value3 = webapi.WindowFromJS(input.Get("view"))
	}
	out.View = value3
	value4 = (input.Get("detail")).Int()
	out.Detail = value4
	return &out
}

// dictionary: WheelEventInit
type WheelEventInit struct {
	Bubbles            bool
	Cancelable         bool
	Composed           bool
	View               *webapi.Window
	Detail             int
	CtrlKey            bool
	ShiftKey           bool
	AltKey             bool
	MetaKey            bool
	ModifierAltGraph   bool
	ModifierCapsLock   bool
	ModifierFn         bool
	ModifierFnLock     bool
	ModifierHyper      bool
	ModifierNumLock    bool
	ModifierScrollLock bool
	ModifierSuper      bool
	ModifierSymbol     bool
	ModifierSymbolLock bool
	ScreenX            int
	ScreenY            int
	ClientX            int
	ClientY            int
	Button             int
	Buttons            int
	RelatedTarget      *domcore.EventTarget
	DeltaX             float64
	DeltaY             float64
	DeltaZ             float64
	DeltaMode          uint
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *WheelEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View.JSValue()
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.CtrlKey
	out.Set("ctrlKey", value5)
	value6 := _this.ShiftKey
	out.Set("shiftKey", value6)
	value7 := _this.AltKey
	out.Set("altKey", value7)
	value8 := _this.MetaKey
	out.Set("metaKey", value8)
	value9 := _this.ModifierAltGraph
	out.Set("modifierAltGraph", value9)
	value10 := _this.ModifierCapsLock
	out.Set("modifierCapsLock", value10)
	value11 := _this.ModifierFn
	out.Set("modifierFn", value11)
	value12 := _this.ModifierFnLock
	out.Set("modifierFnLock", value12)
	value13 := _this.ModifierHyper
	out.Set("modifierHyper", value13)
	value14 := _this.ModifierNumLock
	out.Set("modifierNumLock", value14)
	value15 := _this.ModifierScrollLock
	out.Set("modifierScrollLock", value15)
	value16 := _this.ModifierSuper
	out.Set("modifierSuper", value16)
	value17 := _this.ModifierSymbol
	out.Set("modifierSymbol", value17)
	value18 := _this.ModifierSymbolLock
	out.Set("modifierSymbolLock", value18)
	value19 := _this.ScreenX
	out.Set("screenX", value19)
	value20 := _this.ScreenY
	out.Set("screenY", value20)
	value21 := _this.ClientX
	out.Set("clientX", value21)
	value22 := _this.ClientY
	out.Set("clientY", value22)
	value23 := _this.Button
	out.Set("button", value23)
	value24 := _this.Buttons
	out.Set("buttons", value24)
	value25 := _this.RelatedTarget.JSValue()
	out.Set("relatedTarget", value25)
	value26 := _this.DeltaX
	out.Set("deltaX", value26)
	value27 := _this.DeltaY
	out.Set("deltaY", value27)
	value28 := _this.DeltaZ
	out.Set("deltaZ", value28)
	value29 := _this.DeltaMode
	out.Set("deltaMode", value29)
	return out
}

// WheelEventInitFromJS is allocating a new
// WheelEventInit object and copy all values from
// input javascript object
func WheelEventInitFromJS(value js.Wrapper) *WheelEventInit {
	input := value.JSValue()
	var out WheelEventInit
	var (
		value0  bool                 // javascript: boolean {bubbles Bubbles bubbles}
		value1  bool                 // javascript: boolean {cancelable Cancelable cancelable}
		value2  bool                 // javascript: boolean {composed Composed composed}
		value3  *webapi.Window       // javascript: Window {view View view}
		value4  int                  // javascript: long {detail Detail detail}
		value5  bool                 // javascript: boolean {ctrlKey CtrlKey ctrlKey}
		value6  bool                 // javascript: boolean {shiftKey ShiftKey shiftKey}
		value7  bool                 // javascript: boolean {altKey AltKey altKey}
		value8  bool                 // javascript: boolean {metaKey MetaKey metaKey}
		value9  bool                 // javascript: boolean {modifierAltGraph ModifierAltGraph modifierAltGraph}
		value10 bool                 // javascript: boolean {modifierCapsLock ModifierCapsLock modifierCapsLock}
		value11 bool                 // javascript: boolean {modifierFn ModifierFn modifierFn}
		value12 bool                 // javascript: boolean {modifierFnLock ModifierFnLock modifierFnLock}
		value13 bool                 // javascript: boolean {modifierHyper ModifierHyper modifierHyper}
		value14 bool                 // javascript: boolean {modifierNumLock ModifierNumLock modifierNumLock}
		value15 bool                 // javascript: boolean {modifierScrollLock ModifierScrollLock modifierScrollLock}
		value16 bool                 // javascript: boolean {modifierSuper ModifierSuper modifierSuper}
		value17 bool                 // javascript: boolean {modifierSymbol ModifierSymbol modifierSymbol}
		value18 bool                 // javascript: boolean {modifierSymbolLock ModifierSymbolLock modifierSymbolLock}
		value19 int                  // javascript: long {screenX ScreenX screenX}
		value20 int                  // javascript: long {screenY ScreenY screenY}
		value21 int                  // javascript: long {clientX ClientX clientX}
		value22 int                  // javascript: long {clientY ClientY clientY}
		value23 int                  // javascript: short {button Button button}
		value24 int                  // javascript: unsigned short {buttons Buttons buttons}
		value25 *domcore.EventTarget // javascript: EventTarget {relatedTarget RelatedTarget relatedTarget}
		value26 float64              // javascript: double {deltaX DeltaX deltaX}
		value27 float64              // javascript: double {deltaY DeltaY deltaY}
		value28 float64              // javascript: double {deltaZ DeltaZ deltaZ}
		value29 uint                 // javascript: unsigned long {deltaMode DeltaMode deltaMode}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	if input.Get("view").Type() != js.TypeNull {
		value3 = webapi.WindowFromJS(input.Get("view"))
	}
	out.View = value3
	value4 = (input.Get("detail")).Int()
	out.Detail = value4
	value5 = (input.Get("ctrlKey")).Bool()
	out.CtrlKey = value5
	value6 = (input.Get("shiftKey")).Bool()
	out.ShiftKey = value6
	value7 = (input.Get("altKey")).Bool()
	out.AltKey = value7
	value8 = (input.Get("metaKey")).Bool()
	out.MetaKey = value8
	value9 = (input.Get("modifierAltGraph")).Bool()
	out.ModifierAltGraph = value9
	value10 = (input.Get("modifierCapsLock")).Bool()
	out.ModifierCapsLock = value10
	value11 = (input.Get("modifierFn")).Bool()
	out.ModifierFn = value11
	value12 = (input.Get("modifierFnLock")).Bool()
	out.ModifierFnLock = value12
	value13 = (input.Get("modifierHyper")).Bool()
	out.ModifierHyper = value13
	value14 = (input.Get("modifierNumLock")).Bool()
	out.ModifierNumLock = value14
	value15 = (input.Get("modifierScrollLock")).Bool()
	out.ModifierScrollLock = value15
	value16 = (input.Get("modifierSuper")).Bool()
	out.ModifierSuper = value16
	value17 = (input.Get("modifierSymbol")).Bool()
	out.ModifierSymbol = value17
	value18 = (input.Get("modifierSymbolLock")).Bool()
	out.ModifierSymbolLock = value18
	value19 = (input.Get("screenX")).Int()
	out.ScreenX = value19
	value20 = (input.Get("screenY")).Int()
	out.ScreenY = value20
	value21 = (input.Get("clientX")).Int()
	out.ClientX = value21
	value22 = (input.Get("clientY")).Int()
	out.ClientY = value22
	value23 = (input.Get("button")).Int()
	out.Button = value23
	value24 = (input.Get("buttons")).Int()
	out.Buttons = value24
	if input.Get("relatedTarget").Type() != js.TypeNull {
		value25 = domcore.EventTargetFromJS(input.Get("relatedTarget"))
	}
	out.RelatedTarget = value25
	value26 = (input.Get("deltaX")).Float()
	out.DeltaX = value26
	value27 = (input.Get("deltaY")).Float()
	out.DeltaY = value27
	value28 = (input.Get("deltaZ")).Float()
	out.DeltaZ = value28
	value29 = (uint)((input.Get("deltaMode")).Int())
	out.DeltaMode = value29
	return &out
}

// interface: CompositionEvent
type CompositionEvent struct {
	UIEvent
}

// CompositionEventFromJS is casting a js.Wrapper into CompositionEvent.
func CompositionEventFromJS(value js.Wrapper) *CompositionEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &CompositionEvent{}
	ret.Value_JS = input
	return ret
}

func NewCompositionEvent(_type string, eventInitDict *CompositionEventInit) (_result *CompositionEvent) {
	_klass := js.Global().Get("CompositionEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *CompositionEvent // javascript: CompositionEvent _what_return_name
	)
	_converted = CompositionEventFromJS(_returned)
	_result = _converted
	return
}

// Data returning attribute 'data' with
// type string (idl: DOMString).
func (_this *CompositionEvent) Data() string {
	var ret string
	value := _this.Value_JS.Get("data")
	ret = (value).String()
	return ret
}

// interface: ErrorEvent
type ErrorEvent struct {
	domcore.Event
}

// ErrorEventFromJS is casting a js.Wrapper into ErrorEvent.
func ErrorEventFromJS(value js.Wrapper) *ErrorEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &ErrorEvent{}
	ret.Value_JS = input
	return ret
}

func NewErrorEvent(_type string, eventInitDict *ErrorEventInit) (_result *ErrorEvent) {
	_klass := js.Global().Get("ErrorEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *ErrorEvent // javascript: ErrorEvent _what_return_name
	)
	_converted = ErrorEventFromJS(_returned)
	_result = _converted
	return
}

// Message returning attribute 'message' with
// type string (idl: DOMString).
func (_this *ErrorEvent) Message() string {
	var ret string
	value := _this.Value_JS.Get("message")
	ret = (value).String()
	return ret
}

// Filename returning attribute 'filename' with
// type string (idl: USVString).
func (_this *ErrorEvent) Filename() string {
	var ret string
	value := _this.Value_JS.Get("filename")
	ret = (value).String()
	return ret
}

// Lineno returning attribute 'lineno' with
// type uint (idl: unsigned long).
func (_this *ErrorEvent) Lineno() uint {
	var ret uint
	value := _this.Value_JS.Get("lineno")
	ret = (uint)((value).Int())
	return ret
}

// Colno returning attribute 'colno' with
// type uint (idl: unsigned long).
func (_this *ErrorEvent) Colno() uint {
	var ret uint
	value := _this.Value_JS.Get("colno")
	ret = (uint)((value).Int())
	return ret
}

// Error returning attribute 'error' with
// type Any (idl: any).
func (_this *ErrorEvent) Error() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("error")
	ret = value
	return ret
}

// interface: FocusEvent
type FocusEvent struct {
	UIEvent
}

// FocusEventFromJS is casting a js.Wrapper into FocusEvent.
func FocusEventFromJS(value js.Wrapper) *FocusEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &FocusEvent{}
	ret.Value_JS = input
	return ret
}

func NewFocusEvent(_type string, eventInitDict *FocusEventInit) (_result *FocusEvent) {
	_klass := js.Global().Get("FocusEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *FocusEvent // javascript: FocusEvent _what_return_name
	)
	_converted = FocusEventFromJS(_returned)
	_result = _converted
	return
}

// RelatedTarget returning attribute 'relatedTarget' with
// type domcore.EventTarget (idl: EventTarget).
func (_this *FocusEvent) RelatedTarget() *domcore.EventTarget {
	var ret *domcore.EventTarget
	value := _this.Value_JS.Get("relatedTarget")
	if value.Type() != js.TypeNull {
		ret = domcore.EventTargetFromJS(value)
	}
	return ret
}

// interface: FormDataEvent
type FormDataEvent struct {
	domcore.Event
}

// FormDataEventFromJS is casting a js.Wrapper into FormDataEvent.
func FormDataEventFromJS(value js.Wrapper) *FormDataEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &FormDataEvent{}
	ret.Value_JS = input
	return ret
}

func NewFormDataEvent(_type string, eventInitDict *FormDataEventInit) (_result *FormDataEvent) {
	_klass := js.Global().Get("FormDataEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *FormDataEvent // javascript: FormDataEvent _what_return_name
	)
	_converted = FormDataEventFromJS(_returned)
	_result = _converted
	return
}

// FormData returning attribute 'formData' with
// type xhr.FormData (idl: FormData).
func (_this *FormDataEvent) FormData() *xhr.FormData {
	var ret *xhr.FormData
	value := _this.Value_JS.Get("formData")
	ret = xhr.FormDataFromJS(value)
	return ret
}

// interface: HashChangeEvent
type HashChangeEvent struct {
	domcore.Event
}

// HashChangeEventFromJS is casting a js.Wrapper into HashChangeEvent.
func HashChangeEventFromJS(value js.Wrapper) *HashChangeEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &HashChangeEvent{}
	ret.Value_JS = input
	return ret
}

func NewHashChangeEvent(_type string, eventInitDict *HashChangeEventInit) (_result *HashChangeEvent) {
	_klass := js.Global().Get("HashChangeEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *HashChangeEvent // javascript: HashChangeEvent _what_return_name
	)
	_converted = HashChangeEventFromJS(_returned)
	_result = _converted
	return
}

// OldURL returning attribute 'oldURL' with
// type string (idl: USVString).
func (_this *HashChangeEvent) OldURL() string {
	var ret string
	value := _this.Value_JS.Get("oldURL")
	ret = (value).String()
	return ret
}

// NewURL returning attribute 'newURL' with
// type string (idl: USVString).
func (_this *HashChangeEvent) NewURL() string {
	var ret string
	value := _this.Value_JS.Get("newURL")
	ret = (value).String()
	return ret
}

// interface: InputEvent
type InputEvent struct {
	UIEvent
}

// InputEventFromJS is casting a js.Wrapper into InputEvent.
func InputEventFromJS(value js.Wrapper) *InputEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &InputEvent{}
	ret.Value_JS = input
	return ret
}

func NewInputEvent(_type string, eventInitDict *InputEventInit) (_result *InputEvent) {
	_klass := js.Global().Get("InputEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *InputEvent // javascript: InputEvent _what_return_name
	)
	_converted = InputEventFromJS(_returned)
	_result = _converted
	return
}

// Data returning attribute 'data' with
// type string (idl: DOMString).
func (_this *InputEvent) Data() *string {
	var ret *string
	value := _this.Value_JS.Get("data")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// IsComposing returning attribute 'isComposing' with
// type bool (idl: boolean).
func (_this *InputEvent) IsComposing() bool {
	var ret bool
	value := _this.Value_JS.Get("isComposing")
	ret = (value).Bool()
	return ret
}

// InputType returning attribute 'inputType' with
// type string (idl: DOMString).
func (_this *InputEvent) InputType() string {
	var ret string
	value := _this.Value_JS.Get("inputType")
	ret = (value).String()
	return ret
}

// interface: KeyboardEvent
type KeyboardEvent struct {
	UIEvent
}

// KeyboardEventFromJS is casting a js.Wrapper into KeyboardEvent.
func KeyboardEventFromJS(value js.Wrapper) *KeyboardEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &KeyboardEvent{}
	ret.Value_JS = input
	return ret
}

const DOMKEYLOCATIONSTANDARD_KeyboardEvent uint = 0x00
const DOMKEYLOCATIONLEFT_KeyboardEvent uint = 0x01
const DOMKEYLOCATIONRIGHT_KeyboardEvent uint = 0x02
const DOMKEYLOCATIONNUMPAD_KeyboardEvent uint = 0x03

func NewKeyboardEvent(_type string, eventInitDict *KeyboardEventInit) (_result *KeyboardEvent) {
	_klass := js.Global().Get("KeyboardEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *KeyboardEvent // javascript: KeyboardEvent _what_return_name
	)
	_converted = KeyboardEventFromJS(_returned)
	_result = _converted
	return
}

// Key returning attribute 'key' with
// type string (idl: DOMString).
func (_this *KeyboardEvent) Key() string {
	var ret string
	value := _this.Value_JS.Get("key")
	ret = (value).String()
	return ret
}

// Code returning attribute 'code' with
// type string (idl: DOMString).
func (_this *KeyboardEvent) Code() string {
	var ret string
	value := _this.Value_JS.Get("code")
	ret = (value).String()
	return ret
}

// Location returning attribute 'location' with
// type uint (idl: unsigned long).
func (_this *KeyboardEvent) Location() uint {
	var ret uint
	value := _this.Value_JS.Get("location")
	ret = (uint)((value).Int())
	return ret
}

// CtrlKey returning attribute 'ctrlKey' with
// type bool (idl: boolean).
func (_this *KeyboardEvent) CtrlKey() bool {
	var ret bool
	value := _this.Value_JS.Get("ctrlKey")
	ret = (value).Bool()
	return ret
}

// ShiftKey returning attribute 'shiftKey' with
// type bool (idl: boolean).
func (_this *KeyboardEvent) ShiftKey() bool {
	var ret bool
	value := _this.Value_JS.Get("shiftKey")
	ret = (value).Bool()
	return ret
}

// AltKey returning attribute 'altKey' with
// type bool (idl: boolean).
func (_this *KeyboardEvent) AltKey() bool {
	var ret bool
	value := _this.Value_JS.Get("altKey")
	ret = (value).Bool()
	return ret
}

// MetaKey returning attribute 'metaKey' with
// type bool (idl: boolean).
func (_this *KeyboardEvent) MetaKey() bool {
	var ret bool
	value := _this.Value_JS.Get("metaKey")
	ret = (value).Bool()
	return ret
}

// Repeat returning attribute 'repeat' with
// type bool (idl: boolean).
func (_this *KeyboardEvent) Repeat() bool {
	var ret bool
	value := _this.Value_JS.Get("repeat")
	ret = (value).Bool()
	return ret
}

// IsComposing returning attribute 'isComposing' with
// type bool (idl: boolean).
func (_this *KeyboardEvent) IsComposing() bool {
	var ret bool
	value := _this.Value_JS.Get("isComposing")
	ret = (value).Bool()
	return ret
}

// CharCode returning attribute 'charCode' with
// type uint (idl: unsigned long).
func (_this *KeyboardEvent) CharCode() uint {
	var ret uint
	value := _this.Value_JS.Get("charCode")
	ret = (uint)((value).Int())
	return ret
}

// KeyCode returning attribute 'keyCode' with
// type uint (idl: unsigned long).
func (_this *KeyboardEvent) KeyCode() uint {
	var ret uint
	value := _this.Value_JS.Get("keyCode")
	ret = (uint)((value).Int())
	return ret
}

func (_this *KeyboardEvent) GetModifierState(keyArg string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := keyArg
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getModifierState", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

// interface: MouseEvent
type MouseEvent struct {
	UIEvent
}

// MouseEventFromJS is casting a js.Wrapper into MouseEvent.
func MouseEventFromJS(value js.Wrapper) *MouseEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MouseEvent{}
	ret.Value_JS = input
	return ret
}

func NewMouseEvent(_type string, eventInitDict *MouseEventInit) (_result *MouseEvent) {
	_klass := js.Global().Get("MouseEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *MouseEvent // javascript: MouseEvent _what_return_name
	)
	_converted = MouseEventFromJS(_returned)
	_result = _converted
	return
}

// ScreenX returning attribute 'screenX' with
// type int (idl: long).
func (_this *MouseEvent) ScreenX() int {
	var ret int
	value := _this.Value_JS.Get("screenX")
	ret = (value).Int()
	return ret
}

// ScreenY returning attribute 'screenY' with
// type int (idl: long).
func (_this *MouseEvent) ScreenY() int {
	var ret int
	value := _this.Value_JS.Get("screenY")
	ret = (value).Int()
	return ret
}

// ClientX returning attribute 'clientX' with
// type int (idl: long).
func (_this *MouseEvent) ClientX() int {
	var ret int
	value := _this.Value_JS.Get("clientX")
	ret = (value).Int()
	return ret
}

// ClientY returning attribute 'clientY' with
// type int (idl: long).
func (_this *MouseEvent) ClientY() int {
	var ret int
	value := _this.Value_JS.Get("clientY")
	ret = (value).Int()
	return ret
}

// CtrlKey returning attribute 'ctrlKey' with
// type bool (idl: boolean).
func (_this *MouseEvent) CtrlKey() bool {
	var ret bool
	value := _this.Value_JS.Get("ctrlKey")
	ret = (value).Bool()
	return ret
}

// ShiftKey returning attribute 'shiftKey' with
// type bool (idl: boolean).
func (_this *MouseEvent) ShiftKey() bool {
	var ret bool
	value := _this.Value_JS.Get("shiftKey")
	ret = (value).Bool()
	return ret
}

// AltKey returning attribute 'altKey' with
// type bool (idl: boolean).
func (_this *MouseEvent) AltKey() bool {
	var ret bool
	value := _this.Value_JS.Get("altKey")
	ret = (value).Bool()
	return ret
}

// MetaKey returning attribute 'metaKey' with
// type bool (idl: boolean).
func (_this *MouseEvent) MetaKey() bool {
	var ret bool
	value := _this.Value_JS.Get("metaKey")
	ret = (value).Bool()
	return ret
}

// Button returning attribute 'button' with
// type int (idl: short).
func (_this *MouseEvent) Button() int {
	var ret int
	value := _this.Value_JS.Get("button")
	ret = (value).Int()
	return ret
}

// Buttons returning attribute 'buttons' with
// type int (idl: unsigned short).
func (_this *MouseEvent) Buttons() int {
	var ret int
	value := _this.Value_JS.Get("buttons")
	ret = (value).Int()
	return ret
}

// RelatedTarget returning attribute 'relatedTarget' with
// type domcore.EventTarget (idl: EventTarget).
func (_this *MouseEvent) RelatedTarget() *domcore.EventTarget {
	var ret *domcore.EventTarget
	value := _this.Value_JS.Get("relatedTarget")
	if value.Type() != js.TypeNull {
		ret = domcore.EventTargetFromJS(value)
	}
	return ret
}

func (_this *MouseEvent) GetModifierState(keyArg string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := keyArg
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getModifierState", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

// interface: PageTransitionEvent
type PageTransitionEvent struct {
	domcore.Event
}

// PageTransitionEventFromJS is casting a js.Wrapper into PageTransitionEvent.
func PageTransitionEventFromJS(value js.Wrapper) *PageTransitionEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &PageTransitionEvent{}
	ret.Value_JS = input
	return ret
}

func NewPageTransitionEvent(_type string, eventInitDict *PageTransitionEventInit) (_result *PageTransitionEvent) {
	_klass := js.Global().Get("PageTransitionEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *PageTransitionEvent // javascript: PageTransitionEvent _what_return_name
	)
	_converted = PageTransitionEventFromJS(_returned)
	_result = _converted
	return
}

// Persisted returning attribute 'persisted' with
// type bool (idl: boolean).
func (_this *PageTransitionEvent) Persisted() bool {
	var ret bool
	value := _this.Value_JS.Get("persisted")
	ret = (value).Bool()
	return ret
}

// interface: PopStateEvent
type PopStateEvent struct {
	domcore.Event
}

// PopStateEventFromJS is casting a js.Wrapper into PopStateEvent.
func PopStateEventFromJS(value js.Wrapper) *PopStateEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &PopStateEvent{}
	ret.Value_JS = input
	return ret
}

func NewPopStateEvent(_type string, eventInitDict *PopStateEventInit) (_result *PopStateEvent) {
	_klass := js.Global().Get("PopStateEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *PopStateEvent // javascript: PopStateEvent _what_return_name
	)
	_converted = PopStateEventFromJS(_returned)
	_result = _converted
	return
}

// State returning attribute 'state' with
// type Any (idl: any).
func (_this *PopStateEvent) State() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("state")
	ret = value
	return ret
}

// interface: PromiseRejectionEvent
type PromiseRejectionEvent struct {
	domcore.Event
}

// PromiseRejectionEventFromJS is casting a js.Wrapper into PromiseRejectionEvent.
func PromiseRejectionEventFromJS(value js.Wrapper) *PromiseRejectionEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &PromiseRejectionEvent{}
	ret.Value_JS = input
	return ret
}

func NewPromiseRejectionEvent(_type string, eventInitDict *PromiseRejectionEventInit) (_result *PromiseRejectionEvent) {
	_klass := js.Global().Get("PromiseRejectionEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_p1 := eventInitDict.JSValue()
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *PromiseRejectionEvent // javascript: PromiseRejectionEvent _what_return_name
	)
	_converted = PromiseRejectionEventFromJS(_returned)
	_result = _converted
	return
}

// Promise returning attribute 'promise' with
// type javascript.Promise (idl: Promise).
func (_this *PromiseRejectionEvent) Promise() *javascript.Promise {
	var ret *javascript.Promise
	value := _this.Value_JS.Get("promise")
	ret = javascript.PromiseFromJS(value)
	return ret
}

// Reason returning attribute 'reason' with
// type Any (idl: any).
func (_this *PromiseRejectionEvent) Reason() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("reason")
	ret = value
	return ret
}

// interface: TrackEvent
type TrackEvent struct {
	domcore.Event
}

// TrackEventFromJS is casting a js.Wrapper into TrackEvent.
func TrackEventFromJS(value js.Wrapper) *TrackEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &TrackEvent{}
	ret.Value_JS = input
	return ret
}

func NewTrackEvent(_type string, eventInitDict *TrackEventInit) (_result *TrackEvent) {
	_klass := js.Global().Get("TrackEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *TrackEvent // javascript: TrackEvent _what_return_name
	)
	_converted = TrackEventFromJS(_returned)
	_result = _converted
	return
}

// Track returning attribute 'track' with
// type Union (idl: Union).
func (_this *TrackEvent) Track() *Union {
	var ret *Union
	value := _this.Value_JS.Get("track")
	if value.Type() != js.TypeNull {
		ret = UnionFromJS(value)
	}
	return ret
}

// interface: UIEvent
type UIEvent struct {
	domcore.Event
}

// UIEventFromJS is casting a js.Wrapper into UIEvent.
func UIEventFromJS(value js.Wrapper) *UIEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &UIEvent{}
	ret.Value_JS = input
	return ret
}

func NewUIEvent(_type string, eventInitDict *UIEventInit) (_result *UIEvent) {
	_klass := js.Global().Get("UIEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *UIEvent // javascript: UIEvent _what_return_name
	)
	_converted = UIEventFromJS(_returned)
	_result = _converted
	return
}

// View returning attribute 'view' with
// type webapi.Window (idl: Window).
func (_this *UIEvent) View() *webapi.Window {
	var ret *webapi.Window
	value := _this.Value_JS.Get("view")
	if value.Type() != js.TypeNull {
		ret = webapi.WindowFromJS(value)
	}
	return ret
}

// Detail returning attribute 'detail' with
// type int (idl: long).
func (_this *UIEvent) Detail() int {
	var ret int
	value := _this.Value_JS.Get("detail")
	ret = (value).Int()
	return ret
}

// Which returning attribute 'which' with
// type uint (idl: unsigned long).
func (_this *UIEvent) Which() uint {
	var ret uint
	value := _this.Value_JS.Get("which")
	ret = (uint)((value).Int())
	return ret
}

// interface: WheelEvent
type WheelEvent struct {
	MouseEvent
}

// WheelEventFromJS is casting a js.Wrapper into WheelEvent.
func WheelEventFromJS(value js.Wrapper) *WheelEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WheelEvent{}
	ret.Value_JS = input
	return ret
}

const DOMDELTAPIXEL_WheelEvent uint = 0x00
const DOMDELTALINE_WheelEvent uint = 0x01
const DOMDELTAPAGE_WheelEvent uint = 0x02

func NewWheelEvent(_type string, eventInitDict *WheelEventInit) (_result *WheelEvent) {
	_klass := js.Global().Get("WheelEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *WheelEvent // javascript: WheelEvent _what_return_name
	)
	_converted = WheelEventFromJS(_returned)
	_result = _converted
	return
}

// DeltaX returning attribute 'deltaX' with
// type float64 (idl: double).
func (_this *WheelEvent) DeltaX() float64 {
	var ret float64
	value := _this.Value_JS.Get("deltaX")
	ret = (value).Float()
	return ret
}

// DeltaY returning attribute 'deltaY' with
// type float64 (idl: double).
func (_this *WheelEvent) DeltaY() float64 {
	var ret float64
	value := _this.Value_JS.Get("deltaY")
	ret = (value).Float()
	return ret
}

// DeltaZ returning attribute 'deltaZ' with
// type float64 (idl: double).
func (_this *WheelEvent) DeltaZ() float64 {
	var ret float64
	value := _this.Value_JS.Get("deltaZ")
	ret = (value).Float()
	return ret
}

// DeltaMode returning attribute 'deltaMode' with
// type uint (idl: unsigned long).
func (_this *WheelEvent) DeltaMode() uint {
	var ret uint
	value := _this.Value_JS.Get("deltaMode")
	ret = (uint)((value).Int())
	return ret
}
