// Code generated by webidlgenerator. DO NOT EDIT.

// +build !js

package htmlevent

import js "github.com/gowebapi/webapi/core/failjs"

import (
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/html/htmlmisc"
	"github.com/gowebapi/webapi/javascript"
	"github.com/gowebapi/webapi/patch"
)

// using following types:
// domcore.Event
// htmlmisc.HashChangeEventInit
// javascript.Promise
// patch.FormData

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// dictionary: TrackEventInit
type TrackEventInit struct {
	Track *Union
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *TrackEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Track.JSValue()
	out.Set("track", value0)
	return out
}

// TrackEventInitFromJS is allocating a new
// TrackEventInit object and copy all values from
// input javascript object
func TrackEventInitFromJS(value js.Wrapper) *TrackEventInit {
	input := value.JSValue()
	var out TrackEventInit
	var (
		out0 *Union // javascript: Union {track Track track}
	)
	if input.Get("track").Type() != js.TypeNull {
		out0 = UnionFromJS(input.Get("track"))
	}
	out.Track = out0
	return &out
}

// dictionary: FormDataEventInit
type FormDataEventInit struct {
	FormData *patch.FormData
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *FormDataEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.FormData.JSValue()
	out.Set("formData", value0)
	return out
}

// FormDataEventInitFromJS is allocating a new
// FormDataEventInit object and copy all values from
// input javascript object
func FormDataEventInitFromJS(value js.Wrapper) *FormDataEventInit {
	input := value.JSValue()
	var out FormDataEventInit
	var (
		out0 *patch.FormData // javascript: FormData {formData FormData formData}
	)
	out0 = patch.FormDataFromJS(input.Get("formData"))
	out.FormData = out0
	return &out
}

// dictionary: PopStateEventInit
type PopStateEventInit struct {
	State js.Value
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PopStateEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.State
	out.Set("state", value0)
	return out
}

// PopStateEventInitFromJS is allocating a new
// PopStateEventInit object and copy all values from
// input javascript object
func PopStateEventInitFromJS(value js.Wrapper) *PopStateEventInit {
	input := value.JSValue()
	var out PopStateEventInit
	var (
		out0 js.Value // javascript: any {state State state}
	)
	out0 = input.Get("state")
	out.State = out0
	return &out
}

// dictionary: PageTransitionEventInit
type PageTransitionEventInit struct {
	Persisted bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PageTransitionEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Persisted
	out.Set("persisted", value0)
	return out
}

// PageTransitionEventInitFromJS is allocating a new
// PageTransitionEventInit object and copy all values from
// input javascript object
func PageTransitionEventInitFromJS(value js.Wrapper) *PageTransitionEventInit {
	input := value.JSValue()
	var out PageTransitionEventInit
	var (
		out0 bool // javascript: boolean {persisted Persisted persisted}
	)
	out0 = (input.Get("persisted")).Bool()
	out.Persisted = out0
	return &out
}

// dictionary: ErrorEventInit
type ErrorEventInit struct {
	Message  string
	Filename string
	Lineno   uint
	Colno    uint
	Error    js.Value
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *ErrorEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Message
	out.Set("message", value0)
	value1 := _this.Filename
	out.Set("filename", value1)
	value2 := _this.Lineno
	out.Set("lineno", value2)
	value3 := _this.Colno
	out.Set("colno", value3)
	value4 := _this.Error
	out.Set("error", value4)
	return out
}

// ErrorEventInitFromJS is allocating a new
// ErrorEventInit object and copy all values from
// input javascript object
func ErrorEventInitFromJS(value js.Wrapper) *ErrorEventInit {
	input := value.JSValue()
	var out ErrorEventInit
	var (
		out0 string   // javascript: DOMString {message Message message}
		out1 string   // javascript: USVString {filename Filename filename}
		out2 uint     // javascript: unsigned long {lineno Lineno lineno}
		out3 uint     // javascript: unsigned long {colno Colno colno}
		out4 js.Value // javascript: any {error Error _error}
	)
	out0 = (input.Get("message")).String()
	out.Message = out0
	out1 = (input.Get("filename")).String()
	out.Filename = out1
	out2 = (uint)((input.Get("lineno")).Int())
	out.Lineno = out2
	out3 = (uint)((input.Get("colno")).Int())
	out.Colno = out3
	out4 = input.Get("error")
	out.Error = out4
	return &out
}

// dictionary: PromiseRejectionEventInit
type PromiseRejectionEventInit struct {
	Promise *javascript.Promise
	Reason  js.Value
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PromiseRejectionEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Promise.JSValue()
	out.Set("promise", value0)
	value1 := _this.Reason
	out.Set("reason", value1)
	return out
}

// PromiseRejectionEventInitFromJS is allocating a new
// PromiseRejectionEventInit object and copy all values from
// input javascript object
func PromiseRejectionEventInitFromJS(value js.Wrapper) *PromiseRejectionEventInit {
	input := value.JSValue()
	var out PromiseRejectionEventInit
	var (
		out0 *javascript.Promise // javascript: Promise {promise Promise promise}
		out1 js.Value            // javascript: any {reason Reason reason}
	)
	out0 = javascript.PromiseFromJS(input.Get("promise"))
	out.Promise = out0
	out1 = input.Get("reason")
	out.Reason = out1
	return &out
}

// interface: TrackEvent
type TrackEvent struct {
	domcore.Event
}

// TrackEventFromJS is casting a js.Wrapper into TrackEvent.
func TrackEventFromJS(value js.Wrapper) *TrackEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &TrackEvent{}
	ret.Value_JS = input
	return ret
}

func NewTrackEvent(_type string, eventInitDict *TrackEventInit) (_result *TrackEvent) {
	_klass := js.Global().Get("TrackEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *TrackEvent // javascript: TrackEvent _what_return_name
	)
	_converted = TrackEventFromJS(_returned)
	_result = _converted
	return
}

// Track returning attribute 'track' with
// type Union (idl: Union).
func (_this *TrackEvent) Track() *Union {
	var ret *Union
	value := _this.Value_JS.Get("track")
	if value.Type() != js.TypeNull {
		ret = UnionFromJS(value)
	}
	return ret
}

// interface: FormDataEvent
type FormDataEvent struct {
	domcore.Event
}

// FormDataEventFromJS is casting a js.Wrapper into FormDataEvent.
func FormDataEventFromJS(value js.Wrapper) *FormDataEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &FormDataEvent{}
	ret.Value_JS = input
	return ret
}

func NewFormDataEvent(_type string, eventInitDict *FormDataEventInit) (_result *FormDataEvent) {
	_klass := js.Global().Get("FormDataEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *FormDataEvent // javascript: FormDataEvent _what_return_name
	)
	_converted = FormDataEventFromJS(_returned)
	_result = _converted
	return
}

// FormData returning attribute 'formData' with
// type patch.FormData (idl: FormData).
func (_this *FormDataEvent) FormData() *patch.FormData {
	var ret *patch.FormData
	value := _this.Value_JS.Get("formData")
	ret = patch.FormDataFromJS(value)
	return ret
}

// interface: PopStateEvent
type PopStateEvent struct {
	domcore.Event
}

// PopStateEventFromJS is casting a js.Wrapper into PopStateEvent.
func PopStateEventFromJS(value js.Wrapper) *PopStateEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &PopStateEvent{}
	ret.Value_JS = input
	return ret
}

func NewPopStateEvent(_type string, eventInitDict *PopStateEventInit) (_result *PopStateEvent) {
	_klass := js.Global().Get("PopStateEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *PopStateEvent // javascript: PopStateEvent _what_return_name
	)
	_converted = PopStateEventFromJS(_returned)
	_result = _converted
	return
}

// State returning attribute 'state' with
// type js.Value (idl: any).
func (_this *PopStateEvent) State() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("state")
	ret = value
	return ret
}

// interface: HashChangeEvent
type HashChangeEvent struct {
	domcore.Event
}

// HashChangeEventFromJS is casting a js.Wrapper into HashChangeEvent.
func HashChangeEventFromJS(value js.Wrapper) *HashChangeEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &HashChangeEvent{}
	ret.Value_JS = input
	return ret
}

func NewHashChangeEvent(_type string, eventInitDict *htmlmisc.HashChangeEventInit) (_result *HashChangeEvent) {
	_klass := js.Global().Get("HashChangeEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *HashChangeEvent // javascript: HashChangeEvent _what_return_name
	)
	_converted = HashChangeEventFromJS(_returned)
	_result = _converted
	return
}

// OldURL returning attribute 'oldURL' with
// type string (idl: USVString).
func (_this *HashChangeEvent) OldURL() string {
	var ret string
	value := _this.Value_JS.Get("oldURL")
	ret = (value).String()
	return ret
}

// NewURL returning attribute 'newURL' with
// type string (idl: USVString).
func (_this *HashChangeEvent) NewURL() string {
	var ret string
	value := _this.Value_JS.Get("newURL")
	ret = (value).String()
	return ret
}

// interface: PageTransitionEvent
type PageTransitionEvent struct {
	domcore.Event
}

// PageTransitionEventFromJS is casting a js.Wrapper into PageTransitionEvent.
func PageTransitionEventFromJS(value js.Wrapper) *PageTransitionEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &PageTransitionEvent{}
	ret.Value_JS = input
	return ret
}

func NewPageTransitionEvent(_type string, eventInitDict *PageTransitionEventInit) (_result *PageTransitionEvent) {
	_klass := js.Global().Get("PageTransitionEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *PageTransitionEvent // javascript: PageTransitionEvent _what_return_name
	)
	_converted = PageTransitionEventFromJS(_returned)
	_result = _converted
	return
}

// Persisted returning attribute 'persisted' with
// type bool (idl: boolean).
func (_this *PageTransitionEvent) Persisted() bool {
	var ret bool
	value := _this.Value_JS.Get("persisted")
	ret = (value).Bool()
	return ret
}

// interface: BeforeUnloadEvent
type BeforeUnloadEvent struct {
	domcore.Event
}

// BeforeUnloadEventFromJS is casting a js.Wrapper into BeforeUnloadEvent.
func BeforeUnloadEventFromJS(value js.Wrapper) *BeforeUnloadEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &BeforeUnloadEvent{}
	ret.Value_JS = input
	return ret
}

// ReturnValue returning attribute 'returnValue' with
// type string (idl: DOMString).
func (_this *BeforeUnloadEvent) ReturnValue() string {
	var ret string
	value := _this.Value_JS.Get("returnValue")
	ret = (value).String()
	return ret
}

// SetReturnValue setting attribute 'returnValue' with
// type string (idl: DOMString).
func (_this *BeforeUnloadEvent) SetReturnValue(value string) {
	input := value
	_this.Value_JS.Set("returnValue", input)
}

// interface: ErrorEvent
type ErrorEvent struct {
	domcore.Event
}

// ErrorEventFromJS is casting a js.Wrapper into ErrorEvent.
func ErrorEventFromJS(value js.Wrapper) *ErrorEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &ErrorEvent{}
	ret.Value_JS = input
	return ret
}

func NewErrorEvent(_type string, eventInitDict *ErrorEventInit) (_result *ErrorEvent) {
	_klass := js.Global().Get("ErrorEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *ErrorEvent // javascript: ErrorEvent _what_return_name
	)
	_converted = ErrorEventFromJS(_returned)
	_result = _converted
	return
}

// Message returning attribute 'message' with
// type string (idl: DOMString).
func (_this *ErrorEvent) Message() string {
	var ret string
	value := _this.Value_JS.Get("message")
	ret = (value).String()
	return ret
}

// Filename returning attribute 'filename' with
// type string (idl: USVString).
func (_this *ErrorEvent) Filename() string {
	var ret string
	value := _this.Value_JS.Get("filename")
	ret = (value).String()
	return ret
}

// Lineno returning attribute 'lineno' with
// type uint (idl: unsigned long).
func (_this *ErrorEvent) Lineno() uint {
	var ret uint
	value := _this.Value_JS.Get("lineno")
	ret = (uint)((value).Int())
	return ret
}

// Colno returning attribute 'colno' with
// type uint (idl: unsigned long).
func (_this *ErrorEvent) Colno() uint {
	var ret uint
	value := _this.Value_JS.Get("colno")
	ret = (uint)((value).Int())
	return ret
}

// Error returning attribute 'error' with
// type js.Value (idl: any).
func (_this *ErrorEvent) Error() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("error")
	ret = value
	return ret
}

// interface: PromiseRejectionEvent
type PromiseRejectionEvent struct {
	domcore.Event
}

// PromiseRejectionEventFromJS is casting a js.Wrapper into PromiseRejectionEvent.
func PromiseRejectionEventFromJS(value js.Wrapper) *PromiseRejectionEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &PromiseRejectionEvent{}
	ret.Value_JS = input
	return ret
}

func NewPromiseRejectionEvent(_type string, eventInitDict *PromiseRejectionEventInit) (_result *PromiseRejectionEvent) {
	_klass := js.Global().Get("PromiseRejectionEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_p1 := eventInitDict.JSValue()
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *PromiseRejectionEvent // javascript: PromiseRejectionEvent _what_return_name
	)
	_converted = PromiseRejectionEventFromJS(_returned)
	_result = _converted
	return
}

// Promise returning attribute 'promise' with
// type javascript.Promise (idl: Promise).
func (_this *PromiseRejectionEvent) Promise() *javascript.Promise {
	var ret *javascript.Promise
	value := _this.Value_JS.Get("promise")
	ret = javascript.PromiseFromJS(value)
	return ret
}

// Reason returning attribute 'reason' with
// type js.Value (idl: any).
func (_this *PromiseRejectionEvent) Reason() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("reason")
	ret = value
	return ret
}
