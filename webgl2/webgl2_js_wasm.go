// Code generated by webidl-bind. DO NOT EDIT.

package webgl2

import "syscall/js"

import (
	"github.com/gowebapi/webapi/javascript"
	"github.com/gowebapi/webapi/webgl"
)

// using following types:
// javascript.Object
// webgl.WebGLActiveInfo
// webgl.WebGLBuffer
// webgl.WebGLContextAttributes
// webgl.WebGLFramebuffer
// webgl.WebGLObject
// webgl.WebGLProgram
// webgl.WebGLRenderbuffer
// webgl.WebGLShader
// webgl.WebGLShaderPrecisionFormat
// webgl.WebGLTexture
// webgl.WebGLUniformLocation

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// interface: WebGL2RenderingContext
type WebGL2RenderingContext struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *WebGL2RenderingContext) JSValue() js.Value {
	return _this.Value_JS
}

// WebGL2RenderingContextFromJS is casting a js.Wrapper into WebGL2RenderingContext.
func WebGL2RenderingContextFromJS(value js.Wrapper) *WebGL2RenderingContext {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGL2RenderingContext{}
	ret.Value_JS = input
	return ret
}

const DEPTHBUFFERBIT_WebGL2RenderingContext uint = 0x00000100
const STENCILBUFFERBIT_WebGL2RenderingContext uint = 0x00000400
const COLORBUFFERBIT_WebGL2RenderingContext uint = 0x00004000
const POINTS_WebGL2RenderingContext uint = 0x0000
const LINES_WebGL2RenderingContext uint = 0x0001
const LINELOOP_WebGL2RenderingContext uint = 0x0002
const LINESTRIP_WebGL2RenderingContext uint = 0x0003
const TRIANGLES_WebGL2RenderingContext uint = 0x0004
const TRIANGLESTRIP_WebGL2RenderingContext uint = 0x0005
const TRIANGLEFAN_WebGL2RenderingContext uint = 0x0006
const ZERO_WebGL2RenderingContext uint = 0
const ONE_WebGL2RenderingContext uint = 1
const SRCCOLOR_WebGL2RenderingContext uint = 0x0300
const ONEMINUSSRCCOLOR_WebGL2RenderingContext uint = 0x0301
const SRCALPHA_WebGL2RenderingContext uint = 0x0302
const ONEMINUSSRCALPHA_WebGL2RenderingContext uint = 0x0303
const DSTALPHA_WebGL2RenderingContext uint = 0x0304
const ONEMINUSDSTALPHA_WebGL2RenderingContext uint = 0x0305
const DSTCOLOR_WebGL2RenderingContext uint = 0x0306
const ONEMINUSDSTCOLOR_WebGL2RenderingContext uint = 0x0307
const SRCALPHASATURATE_WebGL2RenderingContext uint = 0x0308
const FUNCADD_WebGL2RenderingContext uint = 0x8006
const BLENDEQUATION_WebGL2RenderingContext uint = 0x8009
const BLENDEQUATIONRGB_WebGL2RenderingContext uint = 0x8009
const BLENDEQUATIONALPHA_WebGL2RenderingContext uint = 0x883D
const FUNCSUBTRACT_WebGL2RenderingContext uint = 0x800A
const FUNCREVERSESUBTRACT_WebGL2RenderingContext uint = 0x800B
const BLENDDSTRGB_WebGL2RenderingContext uint = 0x80C8
const BLENDSRCRGB_WebGL2RenderingContext uint = 0x80C9
const BLENDDSTALPHA_WebGL2RenderingContext uint = 0x80CA
const BLENDSRCALPHA_WebGL2RenderingContext uint = 0x80CB
const CONSTANTCOLOR_WebGL2RenderingContext uint = 0x8001
const ONEMINUSCONSTANTCOLOR_WebGL2RenderingContext uint = 0x8002
const CONSTANTALPHA_WebGL2RenderingContext uint = 0x8003
const ONEMINUSCONSTANTALPHA_WebGL2RenderingContext uint = 0x8004
const BLENDCOLOR_WebGL2RenderingContext uint = 0x8005
const ARRAYBUFFER_WebGL2RenderingContext uint = 0x8892
const ELEMENTARRAYBUFFER_WebGL2RenderingContext uint = 0x8893
const ARRAYBUFFERBINDING_WebGL2RenderingContext uint = 0x8894
const ELEMENTARRAYBUFFERBINDING_WebGL2RenderingContext uint = 0x8895
const STREAMDRAW_WebGL2RenderingContext uint = 0x88E0
const STATICDRAW_WebGL2RenderingContext uint = 0x88E4
const DYNAMICDRAW_WebGL2RenderingContext uint = 0x88E8
const BUFFERSIZE_WebGL2RenderingContext uint = 0x8764
const BUFFERUSAGE_WebGL2RenderingContext uint = 0x8765
const CURRENTVERTEXATTRIB_WebGL2RenderingContext uint = 0x8626
const FRONT_WebGL2RenderingContext uint = 0x0404
const BACK_WebGL2RenderingContext uint = 0x0405
const FRONTANDBACK_WebGL2RenderingContext uint = 0x0408
const CULLFACE_WebGL2RenderingContext uint = 0x0B44
const BLEND_WebGL2RenderingContext uint = 0x0BE2
const DITHER_WebGL2RenderingContext uint = 0x0BD0
const STENCILTEST_WebGL2RenderingContext uint = 0x0B90
const DEPTHTEST_WebGL2RenderingContext uint = 0x0B71
const SCISSORTEST_WebGL2RenderingContext uint = 0x0C11
const POLYGONOFFSETFILL_WebGL2RenderingContext uint = 0x8037
const SAMPLEALPHATOCOVERAGE_WebGL2RenderingContext uint = 0x809E
const SAMPLECOVERAGE_WebGL2RenderingContext uint = 0x80A0
const NOERROR_WebGL2RenderingContext uint = 0
const INVALIDENUM_WebGL2RenderingContext uint = 0x0500
const INVALIDVALUE_WebGL2RenderingContext uint = 0x0501
const INVALIDOPERATION_WebGL2RenderingContext uint = 0x0502
const OUTOFMEMORY_WebGL2RenderingContext uint = 0x0505
const CW_WebGL2RenderingContext uint = 0x0900
const CCW_WebGL2RenderingContext uint = 0x0901
const LINEWIDTH_WebGL2RenderingContext uint = 0x0B21
const ALIASEDPOINTSIZERANGE_WebGL2RenderingContext uint = 0x846D
const ALIASEDLINEWIDTHRANGE_WebGL2RenderingContext uint = 0x846E
const CULLFACEMODE_WebGL2RenderingContext uint = 0x0B45
const FRONTFACE_WebGL2RenderingContext uint = 0x0B46
const DEPTHRANGE_WebGL2RenderingContext uint = 0x0B70
const DEPTHWRITEMASK_WebGL2RenderingContext uint = 0x0B72
const DEPTHCLEARVALUE_WebGL2RenderingContext uint = 0x0B73
const DEPTHFUNC_WebGL2RenderingContext uint = 0x0B74
const STENCILCLEARVALUE_WebGL2RenderingContext uint = 0x0B91
const STENCILFUNC_WebGL2RenderingContext uint = 0x0B92
const STENCILFAIL_WebGL2RenderingContext uint = 0x0B94
const STENCILPASSDEPTHFAIL_WebGL2RenderingContext uint = 0x0B95
const STENCILPASSDEPTHPASS_WebGL2RenderingContext uint = 0x0B96
const STENCILREF_WebGL2RenderingContext uint = 0x0B97
const STENCILVALUEMASK_WebGL2RenderingContext uint = 0x0B93
const STENCILWRITEMASK_WebGL2RenderingContext uint = 0x0B98
const STENCILBACKFUNC_WebGL2RenderingContext uint = 0x8800
const STENCILBACKFAIL_WebGL2RenderingContext uint = 0x8801
const STENCILBACKPASSDEPTHFAIL_WebGL2RenderingContext uint = 0x8802
const STENCILBACKPASSDEPTHPASS_WebGL2RenderingContext uint = 0x8803
const STENCILBACKREF_WebGL2RenderingContext uint = 0x8CA3
const STENCILBACKVALUEMASK_WebGL2RenderingContext uint = 0x8CA4
const STENCILBACKWRITEMASK_WebGL2RenderingContext uint = 0x8CA5
const VIEWPORT_WebGL2RenderingContext uint = 0x0BA2
const SCISSORBOX_WebGL2RenderingContext uint = 0x0C10
const COLORCLEARVALUE_WebGL2RenderingContext uint = 0x0C22
const COLORWRITEMASK_WebGL2RenderingContext uint = 0x0C23
const UNPACKALIGNMENT_WebGL2RenderingContext uint = 0x0CF5
const PACKALIGNMENT_WebGL2RenderingContext uint = 0x0D05
const MAXTEXTURESIZE_WebGL2RenderingContext uint = 0x0D33
const MAXVIEWPORTDIMS_WebGL2RenderingContext uint = 0x0D3A
const SUBPIXELBITS_WebGL2RenderingContext uint = 0x0D50
const REDBITS_WebGL2RenderingContext uint = 0x0D52
const GREENBITS_WebGL2RenderingContext uint = 0x0D53
const BLUEBITS_WebGL2RenderingContext uint = 0x0D54
const ALPHABITS_WebGL2RenderingContext uint = 0x0D55
const DEPTHBITS_WebGL2RenderingContext uint = 0x0D56
const STENCILBITS_WebGL2RenderingContext uint = 0x0D57
const POLYGONOFFSETUNITS_WebGL2RenderingContext uint = 0x2A00
const POLYGONOFFSETFACTOR_WebGL2RenderingContext uint = 0x8038
const TEXTUREBINDING2D_WebGL2RenderingContext uint = 0x8069
const SAMPLEBUFFERS_WebGL2RenderingContext uint = 0x80A8
const SAMPLES_WebGL2RenderingContext uint = 0x80A9
const SAMPLECOVERAGEVALUE_WebGL2RenderingContext uint = 0x80AA
const SAMPLECOVERAGEINVERT_WebGL2RenderingContext uint = 0x80AB
const COMPRESSEDTEXTUREFORMATS_WebGL2RenderingContext uint = 0x86A3
const DONTCARE_WebGL2RenderingContext uint = 0x1100
const FASTEST_WebGL2RenderingContext uint = 0x1101
const NICEST_WebGL2RenderingContext uint = 0x1102
const GENERATEMIPMAPHINT_WebGL2RenderingContext uint = 0x8192
const BYTE_WebGL2RenderingContext uint = 0x1400
const UNSIGNEDBYTE_WebGL2RenderingContext uint = 0x1401
const SHORT_WebGL2RenderingContext uint = 0x1402
const UNSIGNEDSHORT_WebGL2RenderingContext uint = 0x1403
const INT_WebGL2RenderingContext uint = 0x1404
const UNSIGNEDINT_WebGL2RenderingContext uint = 0x1405
const FLOAT_WebGL2RenderingContext uint = 0x1406
const DEPTHCOMPONENT_WebGL2RenderingContext uint = 0x1902
const ALPHA_WebGL2RenderingContext uint = 0x1906
const RGB_WebGL2RenderingContext uint = 0x1907
const RGBA_WebGL2RenderingContext uint = 0x1908
const LUMINANCE_WebGL2RenderingContext uint = 0x1909
const LUMINANCEALPHA_WebGL2RenderingContext uint = 0x190A
const UNSIGNEDSHORT4444_WebGL2RenderingContext uint = 0x8033
const UNSIGNEDSHORT5551_WebGL2RenderingContext uint = 0x8034
const UNSIGNEDSHORT565_WebGL2RenderingContext uint = 0x8363
const FRAGMENTSHADER_WebGL2RenderingContext uint = 0x8B30
const VERTEXSHADER_WebGL2RenderingContext uint = 0x8B31
const MAXVERTEXATTRIBS_WebGL2RenderingContext uint = 0x8869
const MAXVERTEXUNIFORMVECTORS_WebGL2RenderingContext uint = 0x8DFB
const MAXVARYINGVECTORS_WebGL2RenderingContext uint = 0x8DFC
const MAXCOMBINEDTEXTUREIMAGEUNITS_WebGL2RenderingContext uint = 0x8B4D
const MAXVERTEXTEXTUREIMAGEUNITS_WebGL2RenderingContext uint = 0x8B4C
const MAXTEXTUREIMAGEUNITS_WebGL2RenderingContext uint = 0x8872
const MAXFRAGMENTUNIFORMVECTORS_WebGL2RenderingContext uint = 0x8DFD
const SHADERTYPE_WebGL2RenderingContext uint = 0x8B4F
const DELETESTATUS_WebGL2RenderingContext uint = 0x8B80
const LINKSTATUS_WebGL2RenderingContext uint = 0x8B82
const VALIDATESTATUS_WebGL2RenderingContext uint = 0x8B83
const ATTACHEDSHADERS_WebGL2RenderingContext uint = 0x8B85
const ACTIVEUNIFORMS_WebGL2RenderingContext uint = 0x8B86
const ACTIVEATTRIBUTES_WebGL2RenderingContext uint = 0x8B89
const SHADINGLANGUAGEVERSION_WebGL2RenderingContext uint = 0x8B8C
const CURRENTPROGRAM_WebGL2RenderingContext uint = 0x8B8D
const NEVER_WebGL2RenderingContext uint = 0x0200
const LESS_WebGL2RenderingContext uint = 0x0201
const EQUAL_WebGL2RenderingContext uint = 0x0202
const LEQUAL_WebGL2RenderingContext uint = 0x0203
const GREATER_WebGL2RenderingContext uint = 0x0204
const NOTEQUAL_WebGL2RenderingContext uint = 0x0205
const GEQUAL_WebGL2RenderingContext uint = 0x0206
const ALWAYS_WebGL2RenderingContext uint = 0x0207
const KEEP_WebGL2RenderingContext uint = 0x1E00
const REPLACE_WebGL2RenderingContext uint = 0x1E01
const INCR_WebGL2RenderingContext uint = 0x1E02
const DECR_WebGL2RenderingContext uint = 0x1E03
const INVERT_WebGL2RenderingContext uint = 0x150A
const INCRWRAP_WebGL2RenderingContext uint = 0x8507
const DECRWRAP_WebGL2RenderingContext uint = 0x8508
const VENDOR_WebGL2RenderingContext uint = 0x1F00
const RENDERER_WebGL2RenderingContext uint = 0x1F01
const VERSION_WebGL2RenderingContext uint = 0x1F02
const NEAREST_WebGL2RenderingContext uint = 0x2600
const LINEAR_WebGL2RenderingContext uint = 0x2601
const NEARESTMIPMAPNEAREST_WebGL2RenderingContext uint = 0x2700
const LINEARMIPMAPNEAREST_WebGL2RenderingContext uint = 0x2701
const NEARESTMIPMAPLINEAR_WebGL2RenderingContext uint = 0x2702
const LINEARMIPMAPLINEAR_WebGL2RenderingContext uint = 0x2703
const TEXTUREMAGFILTER_WebGL2RenderingContext uint = 0x2800
const TEXTUREMINFILTER_WebGL2RenderingContext uint = 0x2801
const TEXTUREWRAPS_WebGL2RenderingContext uint = 0x2802
const TEXTUREWRAPT_WebGL2RenderingContext uint = 0x2803
const TEXTURE2D_WebGL2RenderingContext uint = 0x0DE1
const TEXTURE_WebGL2RenderingContext uint = 0x1702
const TEXTURECUBEMAP_WebGL2RenderingContext uint = 0x8513
const TEXTUREBINDINGCUBEMAP_WebGL2RenderingContext uint = 0x8514
const TEXTURECUBEMAPPOSITIVEX_WebGL2RenderingContext uint = 0x8515
const TEXTURECUBEMAPNEGATIVEX_WebGL2RenderingContext uint = 0x8516
const TEXTURECUBEMAPPOSITIVEY_WebGL2RenderingContext uint = 0x8517
const TEXTURECUBEMAPNEGATIVEY_WebGL2RenderingContext uint = 0x8518
const TEXTURECUBEMAPPOSITIVEZ_WebGL2RenderingContext uint = 0x8519
const TEXTURECUBEMAPNEGATIVEZ_WebGL2RenderingContext uint = 0x851A
const MAXCUBEMAPTEXTURESIZE_WebGL2RenderingContext uint = 0x851C
const TEXTURE0_WebGL2RenderingContext uint = 0x84C0
const TEXTURE1_WebGL2RenderingContext uint = 0x84C1
const TEXTURE2_WebGL2RenderingContext uint = 0x84C2
const TEXTURE3_WebGL2RenderingContext uint = 0x84C3
const TEXTURE4_WebGL2RenderingContext uint = 0x84C4
const TEXTURE5_WebGL2RenderingContext uint = 0x84C5
const TEXTURE6_WebGL2RenderingContext uint = 0x84C6
const TEXTURE7_WebGL2RenderingContext uint = 0x84C7
const TEXTURE8_WebGL2RenderingContext uint = 0x84C8
const TEXTURE9_WebGL2RenderingContext uint = 0x84C9
const TEXTURE10_WebGL2RenderingContext uint = 0x84CA
const TEXTURE11_WebGL2RenderingContext uint = 0x84CB
const TEXTURE12_WebGL2RenderingContext uint = 0x84CC
const TEXTURE13_WebGL2RenderingContext uint = 0x84CD
const TEXTURE14_WebGL2RenderingContext uint = 0x84CE
const TEXTURE15_WebGL2RenderingContext uint = 0x84CF
const TEXTURE16_WebGL2RenderingContext uint = 0x84D0
const TEXTURE17_WebGL2RenderingContext uint = 0x84D1
const TEXTURE18_WebGL2RenderingContext uint = 0x84D2
const TEXTURE19_WebGL2RenderingContext uint = 0x84D3
const TEXTURE20_WebGL2RenderingContext uint = 0x84D4
const TEXTURE21_WebGL2RenderingContext uint = 0x84D5
const TEXTURE22_WebGL2RenderingContext uint = 0x84D6
const TEXTURE23_WebGL2RenderingContext uint = 0x84D7
const TEXTURE24_WebGL2RenderingContext uint = 0x84D8
const TEXTURE25_WebGL2RenderingContext uint = 0x84D9
const TEXTURE26_WebGL2RenderingContext uint = 0x84DA
const TEXTURE27_WebGL2RenderingContext uint = 0x84DB
const TEXTURE28_WebGL2RenderingContext uint = 0x84DC
const TEXTURE29_WebGL2RenderingContext uint = 0x84DD
const TEXTURE30_WebGL2RenderingContext uint = 0x84DE
const TEXTURE31_WebGL2RenderingContext uint = 0x84DF
const ACTIVETEXTURE_WebGL2RenderingContext uint = 0x84E0
const REPEAT_WebGL2RenderingContext uint = 0x2901
const CLAMPTOEDGE_WebGL2RenderingContext uint = 0x812F
const MIRROREDREPEAT_WebGL2RenderingContext uint = 0x8370
const FLOATVEC2_WebGL2RenderingContext uint = 0x8B50
const FLOATVEC3_WebGL2RenderingContext uint = 0x8B51
const FLOATVEC4_WebGL2RenderingContext uint = 0x8B52
const INTVEC2_WebGL2RenderingContext uint = 0x8B53
const INTVEC3_WebGL2RenderingContext uint = 0x8B54
const INTVEC4_WebGL2RenderingContext uint = 0x8B55
const BOOL_WebGL2RenderingContext uint = 0x8B56
const BOOLVEC2_WebGL2RenderingContext uint = 0x8B57
const BOOLVEC3_WebGL2RenderingContext uint = 0x8B58
const BOOLVEC4_WebGL2RenderingContext uint = 0x8B59
const FLOATMAT2_WebGL2RenderingContext uint = 0x8B5A
const FLOATMAT3_WebGL2RenderingContext uint = 0x8B5B
const FLOATMAT4_WebGL2RenderingContext uint = 0x8B5C
const SAMPLER2D_WebGL2RenderingContext uint = 0x8B5E
const SAMPLERCUBE_WebGL2RenderingContext uint = 0x8B60
const VERTEXATTRIBARRAYENABLED_WebGL2RenderingContext uint = 0x8622
const VERTEXATTRIBARRAYSIZE_WebGL2RenderingContext uint = 0x8623
const VERTEXATTRIBARRAYSTRIDE_WebGL2RenderingContext uint = 0x8624
const VERTEXATTRIBARRAYTYPE_WebGL2RenderingContext uint = 0x8625
const VERTEXATTRIBARRAYNORMALIZED_WebGL2RenderingContext uint = 0x886A
const VERTEXATTRIBARRAYPOINTER_WebGL2RenderingContext uint = 0x8645
const VERTEXATTRIBARRAYBUFFERBINDING_WebGL2RenderingContext uint = 0x889F
const IMPLEMENTATIONCOLORREADTYPE_WebGL2RenderingContext uint = 0x8B9A
const IMPLEMENTATIONCOLORREADFORMAT_WebGL2RenderingContext uint = 0x8B9B
const COMPILESTATUS_WebGL2RenderingContext uint = 0x8B81
const LOWFLOAT_WebGL2RenderingContext uint = 0x8DF0
const MEDIUMFLOAT_WebGL2RenderingContext uint = 0x8DF1
const HIGHFLOAT_WebGL2RenderingContext uint = 0x8DF2
const LOWINT_WebGL2RenderingContext uint = 0x8DF3
const MEDIUMINT_WebGL2RenderingContext uint = 0x8DF4
const HIGHINT_WebGL2RenderingContext uint = 0x8DF5
const FRAMEBUFFER_WebGL2RenderingContext uint = 0x8D40
const RENDERBUFFER_WebGL2RenderingContext uint = 0x8D41
const RGBA4_WebGL2RenderingContext uint = 0x8056
const RGB5A1_WebGL2RenderingContext uint = 0x8057
const RGB565_WebGL2RenderingContext uint = 0x8D62
const DEPTHCOMPONENT16_WebGL2RenderingContext uint = 0x81A5
const STENCILINDEX8_WebGL2RenderingContext uint = 0x8D48
const DEPTHSTENCIL_WebGL2RenderingContext uint = 0x84F9
const RENDERBUFFERWIDTH_WebGL2RenderingContext uint = 0x8D42
const RENDERBUFFERHEIGHT_WebGL2RenderingContext uint = 0x8D43
const RENDERBUFFERINTERNALFORMAT_WebGL2RenderingContext uint = 0x8D44
const RENDERBUFFERREDSIZE_WebGL2RenderingContext uint = 0x8D50
const RENDERBUFFERGREENSIZE_WebGL2RenderingContext uint = 0x8D51
const RENDERBUFFERBLUESIZE_WebGL2RenderingContext uint = 0x8D52
const RENDERBUFFERALPHASIZE_WebGL2RenderingContext uint = 0x8D53
const RENDERBUFFERDEPTHSIZE_WebGL2RenderingContext uint = 0x8D54
const RENDERBUFFERSTENCILSIZE_WebGL2RenderingContext uint = 0x8D55
const FRAMEBUFFERATTACHMENTOBJECTTYPE_WebGL2RenderingContext uint = 0x8CD0
const FRAMEBUFFERATTACHMENTOBJECTNAME_WebGL2RenderingContext uint = 0x8CD1
const FRAMEBUFFERATTACHMENTTEXTURELEVEL_WebGL2RenderingContext uint = 0x8CD2
const FRAMEBUFFERATTACHMENTTEXTURECUBEMAPFACE_WebGL2RenderingContext uint = 0x8CD3
const COLORATTACHMENT0_WebGL2RenderingContext uint = 0x8CE0
const DEPTHATTACHMENT_WebGL2RenderingContext uint = 0x8D00
const STENCILATTACHMENT_WebGL2RenderingContext uint = 0x8D20
const DEPTHSTENCILATTACHMENT_WebGL2RenderingContext uint = 0x821A
const NONE_WebGL2RenderingContext uint = 0
const FRAMEBUFFERCOMPLETE_WebGL2RenderingContext uint = 0x8CD5
const FRAMEBUFFERINCOMPLETEATTACHMENT_WebGL2RenderingContext uint = 0x8CD6
const FRAMEBUFFERINCOMPLETEMISSINGATTACHMENT_WebGL2RenderingContext uint = 0x8CD7
const FRAMEBUFFERINCOMPLETEDIMENSIONS_WebGL2RenderingContext uint = 0x8CD9
const FRAMEBUFFERUNSUPPORTED_WebGL2RenderingContext uint = 0x8CDD
const FRAMEBUFFERBINDING_WebGL2RenderingContext uint = 0x8CA6
const RENDERBUFFERBINDING_WebGL2RenderingContext uint = 0x8CA7
const MAXRENDERBUFFERSIZE_WebGL2RenderingContext uint = 0x84E8
const INVALIDFRAMEBUFFEROPERATION_WebGL2RenderingContext uint = 0x0506
const UNPACKFLIPYWEBGL_WebGL2RenderingContext uint = 0x9240
const UNPACKPREMULTIPLYALPHAWEBGL_WebGL2RenderingContext uint = 0x9241
const CONTEXTLOSTWEBGL_WebGL2RenderingContext uint = 0x9242
const UNPACKCOLORSPACECONVERSIONWEBGL_WebGL2RenderingContext uint = 0x9243
const BROWSERDEFAULTWEBGL_WebGL2RenderingContext uint = 0x9244
const READBUFFER_WebGL2RenderingContext uint = 0x0C02
const UNPACKROWLENGTH_WebGL2RenderingContext uint = 0x0CF2
const UNPACKSKIPROWS_WebGL2RenderingContext uint = 0x0CF3
const UNPACKSKIPPIXELS_WebGL2RenderingContext uint = 0x0CF4
const PACKROWLENGTH_WebGL2RenderingContext uint = 0x0D02
const PACKSKIPROWS_WebGL2RenderingContext uint = 0x0D03
const PACKSKIPPIXELS_WebGL2RenderingContext uint = 0x0D04
const COLOR_WebGL2RenderingContext uint = 0x1800
const DEPTH_WebGL2RenderingContext uint = 0x1801
const STENCIL_WebGL2RenderingContext uint = 0x1802
const RED_WebGL2RenderingContext uint = 0x1903
const RGB8_WebGL2RenderingContext uint = 0x8051
const RGBA8_WebGL2RenderingContext uint = 0x8058
const RGB10A2_WebGL2RenderingContext uint = 0x8059
const TEXTUREBINDING3D_WebGL2RenderingContext uint = 0x806A
const UNPACKSKIPIMAGES_WebGL2RenderingContext uint = 0x806D
const UNPACKIMAGEHEIGHT_WebGL2RenderingContext uint = 0x806E
const TEXTURE3D_WebGL2RenderingContext uint = 0x806F
const TEXTUREWRAPR_WebGL2RenderingContext uint = 0x8072
const MAX3DTEXTURESIZE_WebGL2RenderingContext uint = 0x8073
const UNSIGNEDINT2101010REV_WebGL2RenderingContext uint = 0x8368
const MAXELEMENTSVERTICES_WebGL2RenderingContext uint = 0x80E8
const MAXELEMENTSINDICES_WebGL2RenderingContext uint = 0x80E9
const TEXTUREMINLOD_WebGL2RenderingContext uint = 0x813A
const TEXTUREMAXLOD_WebGL2RenderingContext uint = 0x813B
const TEXTUREBASELEVEL_WebGL2RenderingContext uint = 0x813C
const TEXTUREMAXLEVEL_WebGL2RenderingContext uint = 0x813D
const MIN_WebGL2RenderingContext uint = 0x8007
const MAX_WebGL2RenderingContext uint = 0x8008
const DEPTHCOMPONENT24_WebGL2RenderingContext uint = 0x81A6
const MAXTEXTURELODBIAS_WebGL2RenderingContext uint = 0x84FD
const TEXTURECOMPAREMODE_WebGL2RenderingContext uint = 0x884C
const TEXTURECOMPAREFUNC_WebGL2RenderingContext uint = 0x884D
const CURRENTQUERY_WebGL2RenderingContext uint = 0x8865
const QUERYRESULT_WebGL2RenderingContext uint = 0x8866
const QUERYRESULTAVAILABLE_WebGL2RenderingContext uint = 0x8867
const STREAMREAD_WebGL2RenderingContext uint = 0x88E1
const STREAMCOPY_WebGL2RenderingContext uint = 0x88E2
const STATICREAD_WebGL2RenderingContext uint = 0x88E5
const STATICCOPY_WebGL2RenderingContext uint = 0x88E6
const DYNAMICREAD_WebGL2RenderingContext uint = 0x88E9
const DYNAMICCOPY_WebGL2RenderingContext uint = 0x88EA
const MAXDRAWBUFFERS_WebGL2RenderingContext uint = 0x8824
const DRAWBUFFER0_WebGL2RenderingContext uint = 0x8825
const DRAWBUFFER1_WebGL2RenderingContext uint = 0x8826
const DRAWBUFFER2_WebGL2RenderingContext uint = 0x8827
const DRAWBUFFER3_WebGL2RenderingContext uint = 0x8828
const DRAWBUFFER4_WebGL2RenderingContext uint = 0x8829
const DRAWBUFFER5_WebGL2RenderingContext uint = 0x882A
const DRAWBUFFER6_WebGL2RenderingContext uint = 0x882B
const DRAWBUFFER7_WebGL2RenderingContext uint = 0x882C
const DRAWBUFFER8_WebGL2RenderingContext uint = 0x882D
const DRAWBUFFER9_WebGL2RenderingContext uint = 0x882E
const DRAWBUFFER10_WebGL2RenderingContext uint = 0x882F
const DRAWBUFFER11_WebGL2RenderingContext uint = 0x8830
const DRAWBUFFER12_WebGL2RenderingContext uint = 0x8831
const DRAWBUFFER13_WebGL2RenderingContext uint = 0x8832
const DRAWBUFFER14_WebGL2RenderingContext uint = 0x8833
const DRAWBUFFER15_WebGL2RenderingContext uint = 0x8834
const MAXFRAGMENTUNIFORMCOMPONENTS_WebGL2RenderingContext uint = 0x8B49
const MAXVERTEXUNIFORMCOMPONENTS_WebGL2RenderingContext uint = 0x8B4A
const SAMPLER3D_WebGL2RenderingContext uint = 0x8B5F
const SAMPLER2DSHADOW_WebGL2RenderingContext uint = 0x8B62
const FRAGMENTSHADERDERIVATIVEHINT_WebGL2RenderingContext uint = 0x8B8B
const PIXELPACKBUFFER_WebGL2RenderingContext uint = 0x88EB
const PIXELUNPACKBUFFER_WebGL2RenderingContext uint = 0x88EC
const PIXELPACKBUFFERBINDING_WebGL2RenderingContext uint = 0x88ED
const PIXELUNPACKBUFFERBINDING_WebGL2RenderingContext uint = 0x88EF
const FLOATMAT2x3_WebGL2RenderingContext uint = 0x8B65
const FLOATMAT2x4_WebGL2RenderingContext uint = 0x8B66
const FLOATMAT3x2_WebGL2RenderingContext uint = 0x8B67
const FLOATMAT3x4_WebGL2RenderingContext uint = 0x8B68
const FLOATMAT4x2_WebGL2RenderingContext uint = 0x8B69
const FLOATMAT4x3_WebGL2RenderingContext uint = 0x8B6A
const SRGB_WebGL2RenderingContext uint = 0x8C40
const SRGB8_WebGL2RenderingContext uint = 0x8C41
const SRGB8ALPHA8_WebGL2RenderingContext uint = 0x8C43
const COMPAREREFTOTEXTURE_WebGL2RenderingContext uint = 0x884E
const RGBA32F_WebGL2RenderingContext uint = 0x8814
const RGB32F_WebGL2RenderingContext uint = 0x8815
const RGBA16F_WebGL2RenderingContext uint = 0x881A
const RGB16F_WebGL2RenderingContext uint = 0x881B
const VERTEXATTRIBARRAYINTEGER_WebGL2RenderingContext uint = 0x88FD
const MAXARRAYTEXTURELAYERS_WebGL2RenderingContext uint = 0x88FF
const MINPROGRAMTEXELOFFSET_WebGL2RenderingContext uint = 0x8904
const MAXPROGRAMTEXELOFFSET_WebGL2RenderingContext uint = 0x8905
const MAXVARYINGCOMPONENTS_WebGL2RenderingContext uint = 0x8B4B
const TEXTURE2DARRAY_WebGL2RenderingContext uint = 0x8C1A
const TEXTUREBINDING2DARRAY_WebGL2RenderingContext uint = 0x8C1D
const R11FG11FB10F_WebGL2RenderingContext uint = 0x8C3A
const UNSIGNEDINT10F11F11FREV_WebGL2RenderingContext uint = 0x8C3B
const RGB9E5_WebGL2RenderingContext uint = 0x8C3D
const UNSIGNEDINT5999REV_WebGL2RenderingContext uint = 0x8C3E
const TRANSFORMFEEDBACKBUFFERMODE_WebGL2RenderingContext uint = 0x8C7F
const MAXTRANSFORMFEEDBACKSEPARATECOMPONENTS_WebGL2RenderingContext uint = 0x8C80
const TRANSFORMFEEDBACKVARYINGS_WebGL2RenderingContext uint = 0x8C83
const TRANSFORMFEEDBACKBUFFERSTART_WebGL2RenderingContext uint = 0x8C84
const TRANSFORMFEEDBACKBUFFERSIZE_WebGL2RenderingContext uint = 0x8C85
const TRANSFORMFEEDBACKPRIMITIVESWRITTEN_WebGL2RenderingContext uint = 0x8C88
const RASTERIZERDISCARD_WebGL2RenderingContext uint = 0x8C89
const MAXTRANSFORMFEEDBACKINTERLEAVEDCOMPONENTS_WebGL2RenderingContext uint = 0x8C8A
const MAXTRANSFORMFEEDBACKSEPARATEATTRIBS_WebGL2RenderingContext uint = 0x8C8B
const INTERLEAVEDATTRIBS_WebGL2RenderingContext uint = 0x8C8C
const SEPARATEATTRIBS_WebGL2RenderingContext uint = 0x8C8D
const TRANSFORMFEEDBACKBUFFER_WebGL2RenderingContext uint = 0x8C8E
const TRANSFORMFEEDBACKBUFFERBINDING_WebGL2RenderingContext uint = 0x8C8F
const RGBA32UI_WebGL2RenderingContext uint = 0x8D70
const RGB32UI_WebGL2RenderingContext uint = 0x8D71
const RGBA16UI_WebGL2RenderingContext uint = 0x8D76
const RGB16UI_WebGL2RenderingContext uint = 0x8D77
const RGBA8UI_WebGL2RenderingContext uint = 0x8D7C
const RGB8UI_WebGL2RenderingContext uint = 0x8D7D
const RGBA32I_WebGL2RenderingContext uint = 0x8D82
const RGB32I_WebGL2RenderingContext uint = 0x8D83
const RGBA16I_WebGL2RenderingContext uint = 0x8D88
const RGB16I_WebGL2RenderingContext uint = 0x8D89
const RGBA8I_WebGL2RenderingContext uint = 0x8D8E
const RGB8I_WebGL2RenderingContext uint = 0x8D8F
const REDINTEGER_WebGL2RenderingContext uint = 0x8D94
const RGBINTEGER_WebGL2RenderingContext uint = 0x8D98
const RGBAINTEGER_WebGL2RenderingContext uint = 0x8D99
const SAMPLER2DARRAY_WebGL2RenderingContext uint = 0x8DC1
const SAMPLER2DARRAYSHADOW_WebGL2RenderingContext uint = 0x8DC4
const SAMPLERCUBESHADOW_WebGL2RenderingContext uint = 0x8DC5
const UNSIGNEDINTVEC2_WebGL2RenderingContext uint = 0x8DC6
const UNSIGNEDINTVEC3_WebGL2RenderingContext uint = 0x8DC7
const UNSIGNEDINTVEC4_WebGL2RenderingContext uint = 0x8DC8
const INTSAMPLER2D_WebGL2RenderingContext uint = 0x8DCA
const INTSAMPLER3D_WebGL2RenderingContext uint = 0x8DCB
const INTSAMPLERCUBE_WebGL2RenderingContext uint = 0x8DCC
const INTSAMPLER2DARRAY_WebGL2RenderingContext uint = 0x8DCF
const UNSIGNEDINTSAMPLER2D_WebGL2RenderingContext uint = 0x8DD2
const UNSIGNEDINTSAMPLER3D_WebGL2RenderingContext uint = 0x8DD3
const UNSIGNEDINTSAMPLERCUBE_WebGL2RenderingContext uint = 0x8DD4
const UNSIGNEDINTSAMPLER2DARRAY_WebGL2RenderingContext uint = 0x8DD7
const DEPTHCOMPONENT32F_WebGL2RenderingContext uint = 0x8CAC
const DEPTH32FSTENCIL8_WebGL2RenderingContext uint = 0x8CAD
const FLOAT32UNSIGNEDINT248REV_WebGL2RenderingContext uint = 0x8DAD
const FRAMEBUFFERATTACHMENTCOLORENCODING_WebGL2RenderingContext uint = 0x8210
const FRAMEBUFFERATTACHMENTCOMPONENTTYPE_WebGL2RenderingContext uint = 0x8211
const FRAMEBUFFERATTACHMENTREDSIZE_WebGL2RenderingContext uint = 0x8212
const FRAMEBUFFERATTACHMENTGREENSIZE_WebGL2RenderingContext uint = 0x8213
const FRAMEBUFFERATTACHMENTBLUESIZE_WebGL2RenderingContext uint = 0x8214
const FRAMEBUFFERATTACHMENTALPHASIZE_WebGL2RenderingContext uint = 0x8215
const FRAMEBUFFERATTACHMENTDEPTHSIZE_WebGL2RenderingContext uint = 0x8216
const FRAMEBUFFERATTACHMENTSTENCILSIZE_WebGL2RenderingContext uint = 0x8217
const FRAMEBUFFERDEFAULT_WebGL2RenderingContext uint = 0x8218
const UNSIGNEDINT248_WebGL2RenderingContext uint = 0x84FA
const DEPTH24STENCIL8_WebGL2RenderingContext uint = 0x88F0
const UNSIGNEDNORMALIZED_WebGL2RenderingContext uint = 0x8C17
const DRAWFRAMEBUFFERBINDING_WebGL2RenderingContext uint = 0x8CA6
const READFRAMEBUFFER_WebGL2RenderingContext uint = 0x8CA8
const DRAWFRAMEBUFFER_WebGL2RenderingContext uint = 0x8CA9
const READFRAMEBUFFERBINDING_WebGL2RenderingContext uint = 0x8CAA
const RENDERBUFFERSAMPLES_WebGL2RenderingContext uint = 0x8CAB
const FRAMEBUFFERATTACHMENTTEXTURELAYER_WebGL2RenderingContext uint = 0x8CD4
const MAXCOLORATTACHMENTS_WebGL2RenderingContext uint = 0x8CDF
const COLORATTACHMENT1_WebGL2RenderingContext uint = 0x8CE1
const COLORATTACHMENT2_WebGL2RenderingContext uint = 0x8CE2
const COLORATTACHMENT3_WebGL2RenderingContext uint = 0x8CE3
const COLORATTACHMENT4_WebGL2RenderingContext uint = 0x8CE4
const COLORATTACHMENT5_WebGL2RenderingContext uint = 0x8CE5
const COLORATTACHMENT6_WebGL2RenderingContext uint = 0x8CE6
const COLORATTACHMENT7_WebGL2RenderingContext uint = 0x8CE7
const COLORATTACHMENT8_WebGL2RenderingContext uint = 0x8CE8
const COLORATTACHMENT9_WebGL2RenderingContext uint = 0x8CE9
const COLORATTACHMENT10_WebGL2RenderingContext uint = 0x8CEA
const COLORATTACHMENT11_WebGL2RenderingContext uint = 0x8CEB
const COLORATTACHMENT12_WebGL2RenderingContext uint = 0x8CEC
const COLORATTACHMENT13_WebGL2RenderingContext uint = 0x8CED
const COLORATTACHMENT14_WebGL2RenderingContext uint = 0x8CEE
const COLORATTACHMENT15_WebGL2RenderingContext uint = 0x8CEF
const FRAMEBUFFERINCOMPLETEMULTISAMPLE_WebGL2RenderingContext uint = 0x8D56
const MAXSAMPLES_WebGL2RenderingContext uint = 0x8D57
const HALFFLOAT_WebGL2RenderingContext uint = 0x140B
const RG_WebGL2RenderingContext uint = 0x8227
const RGINTEGER_WebGL2RenderingContext uint = 0x8228
const R8_WebGL2RenderingContext uint = 0x8229
const RG8_WebGL2RenderingContext uint = 0x822B
const R16F_WebGL2RenderingContext uint = 0x822D
const R32F_WebGL2RenderingContext uint = 0x822E
const RG16F_WebGL2RenderingContext uint = 0x822F
const RG32F_WebGL2RenderingContext uint = 0x8230
const R8I_WebGL2RenderingContext uint = 0x8231
const R8UI_WebGL2RenderingContext uint = 0x8232
const R16I_WebGL2RenderingContext uint = 0x8233
const R16UI_WebGL2RenderingContext uint = 0x8234
const R32I_WebGL2RenderingContext uint = 0x8235
const R32UI_WebGL2RenderingContext uint = 0x8236
const RG8I_WebGL2RenderingContext uint = 0x8237
const RG8UI_WebGL2RenderingContext uint = 0x8238
const RG16I_WebGL2RenderingContext uint = 0x8239
const RG16UI_WebGL2RenderingContext uint = 0x823A
const RG32I_WebGL2RenderingContext uint = 0x823B
const RG32UI_WebGL2RenderingContext uint = 0x823C
const VERTEXARRAYBINDING_WebGL2RenderingContext uint = 0x85B5
const R8SNORM_WebGL2RenderingContext uint = 0x8F94
const RG8SNORM_WebGL2RenderingContext uint = 0x8F95
const RGB8SNORM_WebGL2RenderingContext uint = 0x8F96
const RGBA8SNORM_WebGL2RenderingContext uint = 0x8F97
const SIGNEDNORMALIZED_WebGL2RenderingContext uint = 0x8F9C
const COPYREADBUFFER_WebGL2RenderingContext uint = 0x8F36
const COPYWRITEBUFFER_WebGL2RenderingContext uint = 0x8F37
const COPYREADBUFFERBINDING_WebGL2RenderingContext uint = 0x8F36
const COPYWRITEBUFFERBINDING_WebGL2RenderingContext uint = 0x8F37
const UNIFORMBUFFER_WebGL2RenderingContext uint = 0x8A11
const UNIFORMBUFFERBINDING_WebGL2RenderingContext uint = 0x8A28
const UNIFORMBUFFERSTART_WebGL2RenderingContext uint = 0x8A29
const UNIFORMBUFFERSIZE_WebGL2RenderingContext uint = 0x8A2A
const MAXVERTEXUNIFORMBLOCKS_WebGL2RenderingContext uint = 0x8A2B
const MAXFRAGMENTUNIFORMBLOCKS_WebGL2RenderingContext uint = 0x8A2D
const MAXCOMBINEDUNIFORMBLOCKS_WebGL2RenderingContext uint = 0x8A2E
const MAXUNIFORMBUFFERBINDINGS_WebGL2RenderingContext uint = 0x8A2F
const MAXUNIFORMBLOCKSIZE_WebGL2RenderingContext uint = 0x8A30
const MAXCOMBINEDVERTEXUNIFORMCOMPONENTS_WebGL2RenderingContext uint = 0x8A31
const MAXCOMBINEDFRAGMENTUNIFORMCOMPONENTS_WebGL2RenderingContext uint = 0x8A33
const UNIFORMBUFFEROFFSETALIGNMENT_WebGL2RenderingContext uint = 0x8A34
const ACTIVEUNIFORMBLOCKS_WebGL2RenderingContext uint = 0x8A36
const UNIFORMTYPE_WebGL2RenderingContext uint = 0x8A37
const UNIFORMSIZE_WebGL2RenderingContext uint = 0x8A38
const UNIFORMBLOCKINDEX_WebGL2RenderingContext uint = 0x8A3A
const UNIFORMOFFSET_WebGL2RenderingContext uint = 0x8A3B
const UNIFORMARRAYSTRIDE_WebGL2RenderingContext uint = 0x8A3C
const UNIFORMMATRIXSTRIDE_WebGL2RenderingContext uint = 0x8A3D
const UNIFORMISROWMAJOR_WebGL2RenderingContext uint = 0x8A3E
const UNIFORMBLOCKBINDING_WebGL2RenderingContext uint = 0x8A3F
const UNIFORMBLOCKDATASIZE_WebGL2RenderingContext uint = 0x8A40
const UNIFORMBLOCKACTIVEUNIFORMS_WebGL2RenderingContext uint = 0x8A42
const UNIFORMBLOCKACTIVEUNIFORMINDICES_WebGL2RenderingContext uint = 0x8A43
const UNIFORMBLOCKREFERENCEDBYVERTEXSHADER_WebGL2RenderingContext uint = 0x8A44
const UNIFORMBLOCKREFERENCEDBYFRAGMENTSHADER_WebGL2RenderingContext uint = 0x8A46
const INVALIDINDEX_WebGL2RenderingContext uint = 0xFFFFFFFF
const MAXVERTEXOUTPUTCOMPONENTS_WebGL2RenderingContext uint = 0x9122
const MAXFRAGMENTINPUTCOMPONENTS_WebGL2RenderingContext uint = 0x9125
const MAXSERVERWAITTIMEOUT_WebGL2RenderingContext uint = 0x9111
const OBJECTTYPE_WebGL2RenderingContext uint = 0x9112
const SYNCCONDITION_WebGL2RenderingContext uint = 0x9113
const SYNCSTATUS_WebGL2RenderingContext uint = 0x9114
const SYNCFLAGS_WebGL2RenderingContext uint = 0x9115
const SYNCFENCE_WebGL2RenderingContext uint = 0x9116
const SYNCGPUCOMMANDSCOMPLETE_WebGL2RenderingContext uint = 0x9117
const UNSIGNALED_WebGL2RenderingContext uint = 0x9118
const SIGNALED_WebGL2RenderingContext uint = 0x9119
const ALREADYSIGNALED_WebGL2RenderingContext uint = 0x911A
const TIMEOUTEXPIRED_WebGL2RenderingContext uint = 0x911B
const CONDITIONSATISFIED_WebGL2RenderingContext uint = 0x911C
const WAITFAILED_WebGL2RenderingContext uint = 0x911D
const SYNCFLUSHCOMMANDSBIT_WebGL2RenderingContext uint = 0x00000001
const VERTEXATTRIBARRAYDIVISOR_WebGL2RenderingContext uint = 0x88FE
const ANYSAMPLESPASSED_WebGL2RenderingContext uint = 0x8C2F
const ANYSAMPLESPASSEDCONSERVATIVE_WebGL2RenderingContext uint = 0x8D6A
const SAMPLERBINDING_WebGL2RenderingContext uint = 0x8919
const RGB10A2UI_WebGL2RenderingContext uint = 0x906F
const INT2101010REV_WebGL2RenderingContext uint = 0x8D9F
const TRANSFORMFEEDBACK_WebGL2RenderingContext uint = 0x8E22
const TRANSFORMFEEDBACKPAUSED_WebGL2RenderingContext uint = 0x8E23
const TRANSFORMFEEDBACKACTIVE_WebGL2RenderingContext uint = 0x8E24
const TRANSFORMFEEDBACKBINDING_WebGL2RenderingContext uint = 0x8E25
const TEXTUREIMMUTABLEFORMAT_WebGL2RenderingContext uint = 0x912F
const MAXELEMENTINDEX_WebGL2RenderingContext uint = 0x8D6B
const TEXTUREIMMUTABLELEVELS_WebGL2RenderingContext uint = 0x82DF
const TIMEOUTIGNORED_WebGL2RenderingContext int = -1
const MAXCLIENTWAITTIMEOUTWEBGL_WebGL2RenderingContext uint = 0x9247

// Canvas returning attribute 'canvas' with
// type Union (idl: Union).
func (_this *WebGL2RenderingContext) Canvas() *Union {
	var ret *Union
	value := _this.Value_JS.Get("canvas")
	ret = UnionFromJS(value)
	return ret
}

// DrawingBufferWidth returning attribute 'drawingBufferWidth' with
// type int (idl: long).
func (_this *WebGL2RenderingContext) DrawingBufferWidth() int {
	var ret int
	value := _this.Value_JS.Get("drawingBufferWidth")
	ret = (value).Int()
	return ret
}

// DrawingBufferHeight returning attribute 'drawingBufferHeight' with
// type int (idl: long).
func (_this *WebGL2RenderingContext) DrawingBufferHeight() int {
	var ret int
	value := _this.Value_JS.Get("drawingBufferHeight")
	ret = (value).Int()
	return ret
}

func (_this *WebGL2RenderingContext) GetContextAttributes() (_result *webgl.WebGLContextAttributes) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getContextAttributes", _args[0:_end]...)
	var (
		_converted *webgl.WebGLContextAttributes // javascript: WebGLContextAttributes _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.WebGLContextAttributesFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) IsContextLost() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("isContextLost", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetSupportedExtensions() (_result []string) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSupportedExtensions", _args[0:_end]...)
	var (
		_converted []string // javascript: sequence<DOMString> _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__length0 := _returned.Length()
		__array0 := make([]string, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 string
			__seq_in0 := _returned.Index(__idx0)
			__seq_out0 = (__seq_in0).String()
			__array0[__idx0] = __seq_out0
		}
		_converted = __array0
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetExtension(name string) (_result *javascript.Object) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getExtension", _args[0:_end]...)
	var (
		_converted *javascript.Object // javascript: object _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = javascript.ObjectFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) ActiveTexture(texture uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := texture
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("activeTexture", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) AttachShader(program *webgl.WebGLProgram, shader *webgl.WebGLShader) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := shader.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("attachShader", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BindAttribLocation(program *webgl.WebGLProgram, index uint, name string) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_p2 := name
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bindAttribLocation", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BindBuffer(target uint, buffer *webgl.WebGLBuffer) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := buffer.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindBuffer", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BindFramebuffer(target uint, framebuffer *webgl.WebGLFramebuffer) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := framebuffer.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindFramebuffer", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BindRenderbuffer(target uint, renderbuffer *webgl.WebGLRenderbuffer) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := renderbuffer.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindRenderbuffer", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BindTexture(target uint, texture *webgl.WebGLTexture) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := texture.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindTexture", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BlendColor(red float32, green float32, blue float32, alpha float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := red
	_args[0] = _p0
	_end++
	_p1 := green
	_args[1] = _p1
	_end++
	_p2 := blue
	_args[2] = _p2
	_end++
	_p3 := alpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("blendColor", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BlendEquation(mode uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("blendEquation", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BlendEquationSeparate(modeRGB uint, modeAlpha uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := modeRGB
	_args[0] = _p0
	_end++
	_p1 := modeAlpha
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("blendEquationSeparate", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BlendFunc(sfactor uint, dfactor uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := sfactor
	_args[0] = _p0
	_end++
	_p1 := dfactor
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("blendFunc", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BlendFuncSeparate(srcRGB uint, dstRGB uint, srcAlpha uint, dstAlpha uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := srcRGB
	_args[0] = _p0
	_end++
	_p1 := dstRGB
	_args[1] = _p1
	_end++
	_p2 := srcAlpha
	_args[2] = _p2
	_end++
	_p3 := dstAlpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("blendFuncSeparate", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BufferData(target uint, size int, usage uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := size
	_args[1] = _p1
	_end++
	_p2 := usage
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferData", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BufferData2(target uint, data *Union, usage uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	_p2 := usage
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferData", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BufferSubData(target uint, offset int, data *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := offset
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferSubData", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CheckFramebufferStatus(target uint) (_result uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("checkFramebufferStatus", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) Clear(mask uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mask
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ClearColor(red float32, green float32, blue float32, alpha float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := red
	_args[0] = _p0
	_end++
	_p1 := green
	_args[1] = _p1
	_end++
	_p2 := blue
	_args[2] = _p2
	_end++
	_p3 := alpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("clearColor", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ClearDepth(depth float32) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := depth
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("clearDepth", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ClearStencil(s int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := s
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("clearStencil", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ColorMask(red bool, green bool, blue bool, alpha bool) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := red
	_args[0] = _p0
	_end++
	_p1 := green
	_args[1] = _p1
	_end++
	_p2 := blue
	_args[2] = _p2
	_end++
	_p3 := alpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("colorMask", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CompileShader(shader *webgl.WebGLShader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("compileShader", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CompressedTexImage2D(target uint, level int, internalformat uint, width int, height int, border int, data *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := data.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("compressedTexImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CompressedTexSubImage2D(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, data *Union) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := data.JSValue()
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("compressedTexSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CopyTexImage2D(target uint, level int, internalformat uint, x int, y int, width int, height int, border int) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := x
	_args[3] = _p3
	_end++
	_p4 := y
	_args[4] = _p4
	_end++
	_p5 := width
	_args[5] = _p5
	_end++
	_p6 := height
	_args[6] = _p6
	_end++
	_p7 := border
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("copyTexImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CopyTexSubImage2D(target uint, level int, xoffset int, yoffset int, x int, y int, width int, height int) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := x
	_args[4] = _p4
	_end++
	_p5 := y
	_args[5] = _p5
	_end++
	_p6 := width
	_args[6] = _p6
	_end++
	_p7 := height
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("copyTexSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CreateBuffer() (_result *webgl.WebGLBuffer) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createBuffer", _args[0:_end]...)
	var (
		_converted *webgl.WebGLBuffer // javascript: WebGLBuffer _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.WebGLBufferFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) CreateFramebuffer() (_result *webgl.WebGLFramebuffer) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createFramebuffer", _args[0:_end]...)
	var (
		_converted *webgl.WebGLFramebuffer // javascript: WebGLFramebuffer _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.WebGLFramebufferFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) CreateProgram() (_result *webgl.WebGLProgram) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createProgram", _args[0:_end]...)
	var (
		_converted *webgl.WebGLProgram // javascript: WebGLProgram _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.WebGLProgramFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) CreateRenderbuffer() (_result *webgl.WebGLRenderbuffer) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createRenderbuffer", _args[0:_end]...)
	var (
		_converted *webgl.WebGLRenderbuffer // javascript: WebGLRenderbuffer _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.WebGLRenderbufferFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) CreateShader(_type uint) (_result *webgl.WebGLShader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createShader", _args[0:_end]...)
	var (
		_converted *webgl.WebGLShader // javascript: WebGLShader _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.WebGLShaderFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) CreateTexture() (_result *webgl.WebGLTexture) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createTexture", _args[0:_end]...)
	var (
		_converted *webgl.WebGLTexture // javascript: WebGLTexture _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.WebGLTextureFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) CullFace(mode uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("cullFace", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DeleteBuffer(buffer *webgl.WebGLBuffer) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := buffer.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteBuffer", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DeleteFramebuffer(framebuffer *webgl.WebGLFramebuffer) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := framebuffer.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteFramebuffer", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DeleteProgram(program *webgl.WebGLProgram) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteProgram", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DeleteRenderbuffer(renderbuffer *webgl.WebGLRenderbuffer) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := renderbuffer.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteRenderbuffer", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DeleteShader(shader *webgl.WebGLShader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteShader", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DeleteTexture(texture *webgl.WebGLTexture) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := texture.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteTexture", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DepthFunc(_func uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _func
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("depthFunc", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DepthMask(flag bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := flag
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("depthMask", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DepthRange(zNear float32, zFar float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := zNear
	_args[0] = _p0
	_end++
	_p1 := zFar
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("depthRange", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DetachShader(program *webgl.WebGLProgram, shader *webgl.WebGLShader) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := shader.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("detachShader", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Disable(cap uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := cap
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("disable", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DisableVertexAttribArray(index uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("disableVertexAttribArray", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DrawArrays(mode uint, first int, count int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_p1 := first
	_args[1] = _p1
	_end++
	_p2 := count
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("drawArrays", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DrawElements(mode uint, count int, _type uint, offset int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_p1 := count
	_args[1] = _p1
	_end++
	_p2 := _type
	_args[2] = _p2
	_end++
	_p3 := offset
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("drawElements", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Enable(cap uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := cap
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("enable", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) EnableVertexAttribArray(index uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("enableVertexAttribArray", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Finish() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("finish", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Flush() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("flush", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) FramebufferRenderbuffer(target uint, attachment uint, renderbuffertarget uint, renderbuffer *webgl.WebGLRenderbuffer) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := attachment
	_args[1] = _p1
	_end++
	_p2 := renderbuffertarget
	_args[2] = _p2
	_end++
	_p3 := renderbuffer.JSValue()
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("framebufferRenderbuffer", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) FramebufferTexture2D(target uint, attachment uint, textarget uint, texture *webgl.WebGLTexture, level int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := attachment
	_args[1] = _p1
	_end++
	_p2 := textarget
	_args[2] = _p2
	_end++
	_p3 := texture.JSValue()
	_args[3] = _p3
	_end++
	_p4 := level
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("framebufferTexture2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) FrontFace(mode uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("frontFace", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) GenerateMipmap(target uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("generateMipmap", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) GetActiveAttrib(program *webgl.WebGLProgram, index uint) (_result *webgl.WebGLActiveInfo) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getActiveAttrib", _args[0:_end]...)
	var (
		_converted *webgl.WebGLActiveInfo // javascript: WebGLActiveInfo _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.WebGLActiveInfoFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetActiveUniform(program *webgl.WebGLProgram, index uint) (_result *webgl.WebGLActiveInfo) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getActiveUniform", _args[0:_end]...)
	var (
		_converted *webgl.WebGLActiveInfo // javascript: WebGLActiveInfo _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.WebGLActiveInfoFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetAttachedShaders(program *webgl.WebGLProgram) (_result []*webgl.WebGLShader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getAttachedShaders", _args[0:_end]...)
	var (
		_converted []*webgl.WebGLShader // javascript: sequence<WebGLShader> _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__length0 := _returned.Length()
		__array0 := make([]*webgl.WebGLShader, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 *webgl.WebGLShader
			__seq_in0 := _returned.Index(__idx0)
			__seq_out0 = webgl.WebGLShaderFromJS(__seq_in0)
			__array0[__idx0] = __seq_out0
		}
		_converted = __array0
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetAttribLocation(program *webgl.WebGLProgram, name string) (_result int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := name
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getAttribLocation", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetBufferParameter(target uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getBufferParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetParameter(pname uint) (_result js.Value) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := pname
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetError() (_result uint) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getError", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetFramebufferAttachmentParameter(target uint, attachment uint, pname uint) (_result js.Value) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := attachment
	_args[1] = _p1
	_end++
	_p2 := pname
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("getFramebufferAttachmentParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetProgramParameter(program *webgl.WebGLProgram, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getProgramParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetProgramInfoLog(program *webgl.WebGLProgram) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getProgramInfoLog", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetRenderbufferParameter(target uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getRenderbufferParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetShaderParameter(shader *webgl.WebGLShader, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getShaderParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetShaderPrecisionFormat(shadertype uint, precisiontype uint) (_result *webgl.WebGLShaderPrecisionFormat) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := shadertype
	_args[0] = _p0
	_end++
	_p1 := precisiontype
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getShaderPrecisionFormat", _args[0:_end]...)
	var (
		_converted *webgl.WebGLShaderPrecisionFormat // javascript: WebGLShaderPrecisionFormat _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.WebGLShaderPrecisionFormatFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetShaderInfoLog(shader *webgl.WebGLShader) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getShaderInfoLog", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetShaderSource(shader *webgl.WebGLShader) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getShaderSource", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetTexParameter(target uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getTexParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetUniform(program *webgl.WebGLProgram, location *webgl.WebGLUniformLocation) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := location.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getUniform", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetUniformLocation(program *webgl.WebGLProgram, name string) (_result *webgl.WebGLUniformLocation) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := name
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getUniformLocation", _args[0:_end]...)
	var (
		_converted *webgl.WebGLUniformLocation // javascript: WebGLUniformLocation _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.WebGLUniformLocationFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetVertexAttrib(index uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getVertexAttrib", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetVertexAttribOffset(index uint, pname uint) (_result int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getVertexAttribOffset", _args[0:_end]...)
	var (
		_converted int // javascript: long long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) Hint(target uint, mode uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := mode
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("hint", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) IsBuffer(buffer *webgl.WebGLBuffer) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := buffer.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isBuffer", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) IsEnabled(cap uint) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := cap
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isEnabled", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) IsFramebuffer(framebuffer *webgl.WebGLFramebuffer) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := framebuffer.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isFramebuffer", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) IsProgram(program *webgl.WebGLProgram) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isProgram", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) IsRenderbuffer(renderbuffer *webgl.WebGLRenderbuffer) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := renderbuffer.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isRenderbuffer", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) IsShader(shader *webgl.WebGLShader) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isShader", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) IsTexture(texture *webgl.WebGLTexture) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := texture.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isTexture", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) LineWidth(width float32) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := width
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("lineWidth", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) LinkProgram(program *webgl.WebGLProgram) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("linkProgram", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) PixelStorei(pname uint, param int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := pname
	_args[0] = _p0
	_end++
	_p1 := param
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("pixelStorei", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) PolygonOffset(factor float32, units float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := factor
	_args[0] = _p0
	_end++
	_p1 := units
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("polygonOffset", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ReadPixels(x int, y int, width int, height int, format uint, _type uint, pixels *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := pixels.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("readPixels", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) RenderbufferStorage(target uint, internalformat uint, width int, height int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := internalformat
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("renderbufferStorage", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) SampleCoverage(value float32, invert bool) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := value
	_args[0] = _p0
	_end++
	_p1 := invert
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("sampleCoverage", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Scissor(x int, y int, width int, height int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("scissor", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ShaderSource(shader *webgl.WebGLShader, source string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_p1 := source
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("shaderSource", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) StencilFunc(_func uint, ref int, mask uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := _func
	_args[0] = _p0
	_end++
	_p1 := ref
	_args[1] = _p1
	_end++
	_p2 := mask
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("stencilFunc", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) StencilFuncSeparate(face uint, _func uint, ref int, mask uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := face
	_args[0] = _p0
	_end++
	_p1 := _func
	_args[1] = _p1
	_end++
	_p2 := ref
	_args[2] = _p2
	_end++
	_p3 := mask
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("stencilFuncSeparate", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) StencilMask(mask uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mask
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("stencilMask", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) StencilMaskSeparate(face uint, mask uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := face
	_args[0] = _p0
	_end++
	_p1 := mask
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("stencilMaskSeparate", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) StencilOp(fail uint, zfail uint, zpass uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := fail
	_args[0] = _p0
	_end++
	_p1 := zfail
	_args[1] = _p1
	_end++
	_p2 := zpass
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("stencilOp", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) StencilOpSeparate(face uint, fail uint, zfail uint, zpass uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := face
	_args[0] = _p0
	_end++
	_p1 := fail
	_args[1] = _p1
	_end++
	_p2 := zfail
	_args[2] = _p2
	_end++
	_p3 := zpass
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("stencilOpSeparate", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexImage2D(target uint, level int, internalformat int, width int, height int, border int, format uint, _type uint, pixels *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pixels.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexImage2D2(target uint, level int, internalformat int, format uint, _type uint, source *Union) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := format
	_args[3] = _p3
	_end++
	_p4 := _type
	_args[4] = _p4
	_end++
	_p5 := source.JSValue()
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexParameterf(target uint, pname uint, param float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_p2 := param
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("texParameterf", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexParameteri(target uint, pname uint, param int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_p2 := param
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("texParameteri", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexSubImage2D(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, _type uint, pixels *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pixels.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexSubImage2D2(target uint, level int, xoffset int, yoffset int, format uint, _type uint, source *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := source.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform1f(location *webgl.WebGLUniformLocation, x float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1f", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform2f(location *webgl.WebGLUniformLocation, x float32, y float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniform2f", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform3f(location *webgl.WebGLUniformLocation, x float32, y float32, z float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("uniform3f", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform4f(location *webgl.WebGLUniformLocation, x float32, y float32, z float32, w float32) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("uniform4f", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform1i(location *webgl.WebGLUniformLocation, x int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1i", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform2i(location *webgl.WebGLUniformLocation, x int, y int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniform2i", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform3i(location *webgl.WebGLUniformLocation, x int, y int, z int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("uniform3i", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform4i(location *webgl.WebGLUniformLocation, x int, y int, z int, w int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("uniform4i", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform1fv(location *webgl.WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform2fv(location *webgl.WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform2fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform3fv(location *webgl.WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform3fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform4fv(location *webgl.WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform4fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform1iv(location *webgl.WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1iv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform2iv(location *webgl.WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform2iv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform3iv(location *webgl.WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform3iv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform4iv(location *webgl.WebGLUniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform4iv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) UniformMatrix2fv(location *webgl.WebGLUniformLocation, transpose bool, value *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := value.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniformMatrix2fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) UniformMatrix3fv(location *webgl.WebGLUniformLocation, transpose bool, value *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := value.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniformMatrix3fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) UniformMatrix4fv(location *webgl.WebGLUniformLocation, transpose bool, value *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := value.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniformMatrix4fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) UseProgram(program *webgl.WebGLProgram) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("useProgram", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ValidateProgram(program *webgl.WebGLProgram) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("validateProgram", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttrib1f(index uint, x float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib1f", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttrib2f(index uint, x float32, y float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("vertexAttrib2f", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttrib3f(index uint, x float32, y float32, z float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("vertexAttrib3f", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttrib4f(index uint, x float32, y float32, z float32, w float32) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("vertexAttrib4f", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttrib1fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib1fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttrib2fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib2fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttrib3fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib3fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttrib4fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib4fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttribPointer(index uint, size int, _type uint, normalized bool, stride int, offset int) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := size
	_args[1] = _p1
	_end++
	_p2 := _type
	_args[2] = _p2
	_end++
	_p3 := normalized
	_args[3] = _p3
	_end++
	_p4 := stride
	_args[4] = _p4
	_end++
	_p5 := offset
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("vertexAttribPointer", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Viewport(x int, y int, width int, height int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("viewport", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BufferData3(target uint, size int, usage uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := size
	_args[1] = _p1
	_end++
	_p2 := usage
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferData", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BufferData4(target uint, srcData *Union, usage uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := srcData.JSValue()
	_args[1] = _p1
	_end++
	_p2 := usage
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferData", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BufferSubData2(target uint, dstByteOffset int, srcData *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := dstByteOffset
	_args[1] = _p1
	_end++
	_p2 := srcData.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferSubData", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BufferData5(target uint, srcData *Union, usage uint, srcOffset uint, length *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := srcData.JSValue()
	_args[1] = _p1
	_end++
	_p2 := usage
	_args[2] = _p2
	_end++
	_p3 := srcOffset
	_args[3] = _p3
	_end++
	if length != nil {
		_p4 := length
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("bufferData", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BufferSubData3(target uint, dstByteOffset int, srcData *Union, srcOffset uint, length *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := dstByteOffset
	_args[1] = _p1
	_end++
	_p2 := srcData.JSValue()
	_args[2] = _p2
	_end++
	_p3 := srcOffset
	_args[3] = _p3
	_end++
	if length != nil {
		_p4 := length
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("bufferSubData", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CopyBufferSubData(readTarget uint, writeTarget uint, readOffset int, writeOffset int, size int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := readTarget
	_args[0] = _p0
	_end++
	_p1 := writeTarget
	_args[1] = _p1
	_end++
	_p2 := readOffset
	_args[2] = _p2
	_end++
	_p3 := writeOffset
	_args[3] = _p3
	_end++
	_p4 := size
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("copyBufferSubData", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) GetBufferSubData(target uint, srcByteOffset int, dstBuffer *Union, dstOffset *uint, length *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := srcByteOffset
	_args[1] = _p1
	_end++
	_p2 := dstBuffer.JSValue()
	_args[2] = _p2
	_end++
	if dstOffset != nil {
		_p3 := dstOffset
		_args[3] = _p3
		_end++
	}
	if length != nil {
		_p4 := length
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("getBufferSubData", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BlitFramebuffer(srcX0 int, srcY0 int, srcX1 int, srcY1 int, dstX0 int, dstY0 int, dstX1 int, dstY1 int, mask uint, filter uint) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := srcX0
	_args[0] = _p0
	_end++
	_p1 := srcY0
	_args[1] = _p1
	_end++
	_p2 := srcX1
	_args[2] = _p2
	_end++
	_p3 := srcY1
	_args[3] = _p3
	_end++
	_p4 := dstX0
	_args[4] = _p4
	_end++
	_p5 := dstY0
	_args[5] = _p5
	_end++
	_p6 := dstX1
	_args[6] = _p6
	_end++
	_p7 := dstY1
	_args[7] = _p7
	_end++
	_p8 := mask
	_args[8] = _p8
	_end++
	_p9 := filter
	_args[9] = _p9
	_end++
	_this.Value_JS.Call("blitFramebuffer", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) FramebufferTextureLayer(target uint, attachment uint, texture *webgl.WebGLTexture, level int, layer int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := attachment
	_args[1] = _p1
	_end++
	_p2 := texture.JSValue()
	_args[2] = _p2
	_end++
	_p3 := level
	_args[3] = _p3
	_end++
	_p4 := layer
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("framebufferTextureLayer", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) InvalidateFramebuffer(target uint, attachments []uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(attachments))
	for __idx1, __seq_in1 := range attachments {
		__seq_out1 := __seq_in1
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("invalidateFramebuffer", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) InvalidateSubFramebuffer(target uint, attachments []uint, x int, y int, width int, height int) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(attachments))
	for __idx1, __seq_in1 := range attachments {
		__seq_out1 := __seq_in1
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_p2 := x
	_args[2] = _p2
	_end++
	_p3 := y
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("invalidateSubFramebuffer", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ReadBuffer(src uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := src
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("readBuffer", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) GetInternalformatParameter(target uint, internalformat uint, pname uint) (_result js.Value) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := internalformat
	_args[1] = _p1
	_end++
	_p2 := pname
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("getInternalformatParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) RenderbufferStorageMultisample(target uint, samples int, internalformat uint, width int, height int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := samples
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("renderbufferStorageMultisample", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexStorage2D(target uint, levels int, internalformat uint, width int, height int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := levels
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("texStorage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexStorage3D(target uint, levels int, internalformat uint, width int, height int, depth int) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := levels
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := depth
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("texStorage3D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexImage2D3(target uint, level int, internalformat int, width int, height int, border int, format uint, _type uint, pixels *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pixels.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexImage2D4(target uint, level int, internalformat int, format uint, _type uint, source *Union) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := format
	_args[3] = _p3
	_end++
	_p4 := _type
	_args[4] = _p4
	_end++
	_p5 := source.JSValue()
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexSubImage2D3(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, _type uint, pixels *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pixels.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexSubImage2D4(target uint, level int, xoffset int, yoffset int, format uint, _type uint, source *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := source.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexImage2D5(target uint, level int, internalformat int, width int, height int, border int, format uint, _type uint, pboOffset int) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pboOffset
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexImage2D6(target uint, level int, internalformat int, width int, height int, border int, format uint, _type uint, source *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := source.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexImage2D7(target uint, level int, internalformat int, width int, height int, border int, format uint, _type uint, srcData *Union, srcOffset uint) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := srcData.JSValue()
	_args[8] = _p8
	_end++
	_p9 := srcOffset
	_args[9] = _p9
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexImage3D(target uint, level int, internalformat int, width int, height int, depth int, border int, format uint, _type uint, pboOffset int) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := depth
	_args[5] = _p5
	_end++
	_p6 := border
	_args[6] = _p6
	_end++
	_p7 := format
	_args[7] = _p7
	_end++
	_p8 := _type
	_args[8] = _p8
	_end++
	_p9 := pboOffset
	_args[9] = _p9
	_end++
	_this.Value_JS.Call("texImage3D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexImage3D2(target uint, level int, internalformat int, width int, height int, depth int, border int, format uint, _type uint, source *Union) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := depth
	_args[5] = _p5
	_end++
	_p6 := border
	_args[6] = _p6
	_end++
	_p7 := format
	_args[7] = _p7
	_end++
	_p8 := _type
	_args[8] = _p8
	_end++
	_p9 := source.JSValue()
	_args[9] = _p9
	_end++
	_this.Value_JS.Call("texImage3D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexImage3D3(target uint, level int, internalformat int, width int, height int, depth int, border int, format uint, _type uint, srcData *Union) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := depth
	_args[5] = _p5
	_end++
	_p6 := border
	_args[6] = _p6
	_end++
	_p7 := format
	_args[7] = _p7
	_end++
	_p8 := _type
	_args[8] = _p8
	_end++
	_p9 := srcData.JSValue()
	_args[9] = _p9
	_end++
	_this.Value_JS.Call("texImage3D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexImage3D4(target uint, level int, internalformat int, width int, height int, depth int, border int, format uint, _type uint, srcData *Union, srcOffset uint) {
	var (
		_args [11]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := depth
	_args[5] = _p5
	_end++
	_p6 := border
	_args[6] = _p6
	_end++
	_p7 := format
	_args[7] = _p7
	_end++
	_p8 := _type
	_args[8] = _p8
	_end++
	_p9 := srcData.JSValue()
	_args[9] = _p9
	_end++
	_p10 := srcOffset
	_args[10] = _p10
	_end++
	_this.Value_JS.Call("texImage3D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexSubImage2D5(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, _type uint, pboOffset int) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pboOffset
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexSubImage2D6(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, _type uint, source *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := source.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexSubImage2D7(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, _type uint, srcData *Union, srcOffset uint) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := srcData.JSValue()
	_args[8] = _p8
	_end++
	_p9 := srcOffset
	_args[9] = _p9
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexSubImage3D(target uint, level int, xoffset int, yoffset int, zoffset int, width int, height int, depth int, format uint, _type uint, pboOffset int) {
	var (
		_args [11]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := zoffset
	_args[4] = _p4
	_end++
	_p5 := width
	_args[5] = _p5
	_end++
	_p6 := height
	_args[6] = _p6
	_end++
	_p7 := depth
	_args[7] = _p7
	_end++
	_p8 := format
	_args[8] = _p8
	_end++
	_p9 := _type
	_args[9] = _p9
	_end++
	_p10 := pboOffset
	_args[10] = _p10
	_end++
	_this.Value_JS.Call("texSubImage3D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexSubImage3D2(target uint, level int, xoffset int, yoffset int, zoffset int, width int, height int, depth int, format uint, _type uint, source *Union) {
	var (
		_args [11]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := zoffset
	_args[4] = _p4
	_end++
	_p5 := width
	_args[5] = _p5
	_end++
	_p6 := height
	_args[6] = _p6
	_end++
	_p7 := depth
	_args[7] = _p7
	_end++
	_p8 := format
	_args[8] = _p8
	_end++
	_p9 := _type
	_args[9] = _p9
	_end++
	_p10 := source.JSValue()
	_args[10] = _p10
	_end++
	_this.Value_JS.Call("texSubImage3D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TexSubImage3D3(target uint, level int, xoffset int, yoffset int, zoffset int, width int, height int, depth int, format uint, _type uint, srcData *Union, srcOffset *uint) {
	var (
		_args [12]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := zoffset
	_args[4] = _p4
	_end++
	_p5 := width
	_args[5] = _p5
	_end++
	_p6 := height
	_args[6] = _p6
	_end++
	_p7 := depth
	_args[7] = _p7
	_end++
	_p8 := format
	_args[8] = _p8
	_end++
	_p9 := _type
	_args[9] = _p9
	_end++
	_p10 := srcData.JSValue()
	_args[10] = _p10
	_end++
	if srcOffset != nil {
		_p11 := srcOffset
		_args[11] = _p11
		_end++
	}
	_this.Value_JS.Call("texSubImage3D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CopyTexSubImage3D(target uint, level int, xoffset int, yoffset int, zoffset int, x int, y int, width int, height int) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := zoffset
	_args[4] = _p4
	_end++
	_p5 := x
	_args[5] = _p5
	_end++
	_p6 := y
	_args[6] = _p6
	_end++
	_p7 := width
	_args[7] = _p7
	_end++
	_p8 := height
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("copyTexSubImage3D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CompressedTexImage2D2(target uint, level int, internalformat uint, width int, height int, border int, imageSize int, offset int) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := imageSize
	_args[6] = _p6
	_end++
	_p7 := offset
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("compressedTexImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CompressedTexImage2D3(target uint, level int, internalformat uint, width int, height int, border int, srcData *Union, srcOffset *uint, srcLengthOverride *uint) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := srcData.JSValue()
	_args[6] = _p6
	_end++
	if srcOffset != nil {
		_p7 := srcOffset
		_args[7] = _p7
		_end++
	}
	if srcLengthOverride != nil {
		_p8 := srcLengthOverride
		_args[8] = _p8
		_end++
	}
	_this.Value_JS.Call("compressedTexImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CompressedTexImage3D(target uint, level int, internalformat uint, width int, height int, depth int, border int, imageSize int, offset int) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := depth
	_args[5] = _p5
	_end++
	_p6 := border
	_args[6] = _p6
	_end++
	_p7 := imageSize
	_args[7] = _p7
	_end++
	_p8 := offset
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("compressedTexImage3D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CompressedTexImage3D2(target uint, level int, internalformat uint, width int, height int, depth int, border int, srcData *Union, srcOffset *uint, srcLengthOverride *uint) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := depth
	_args[5] = _p5
	_end++
	_p6 := border
	_args[6] = _p6
	_end++
	_p7 := srcData.JSValue()
	_args[7] = _p7
	_end++
	if srcOffset != nil {
		_p8 := srcOffset
		_args[8] = _p8
		_end++
	}
	if srcLengthOverride != nil {
		_p9 := srcLengthOverride
		_args[9] = _p9
		_end++
	}
	_this.Value_JS.Call("compressedTexImage3D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CompressedTexSubImage2D2(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, imageSize int, offset int) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := imageSize
	_args[7] = _p7
	_end++
	_p8 := offset
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("compressedTexSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CompressedTexSubImage2D3(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, srcData *Union, srcOffset *uint, srcLengthOverride *uint) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := srcData.JSValue()
	_args[7] = _p7
	_end++
	if srcOffset != nil {
		_p8 := srcOffset
		_args[8] = _p8
		_end++
	}
	if srcLengthOverride != nil {
		_p9 := srcLengthOverride
		_args[9] = _p9
		_end++
	}
	_this.Value_JS.Call("compressedTexSubImage2D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CompressedTexSubImage3D(target uint, level int, xoffset int, yoffset int, zoffset int, width int, height int, depth int, format uint, imageSize int, offset int) {
	var (
		_args [11]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := zoffset
	_args[4] = _p4
	_end++
	_p5 := width
	_args[5] = _p5
	_end++
	_p6 := height
	_args[6] = _p6
	_end++
	_p7 := depth
	_args[7] = _p7
	_end++
	_p8 := format
	_args[8] = _p8
	_end++
	_p9 := imageSize
	_args[9] = _p9
	_end++
	_p10 := offset
	_args[10] = _p10
	_end++
	_this.Value_JS.Call("compressedTexSubImage3D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CompressedTexSubImage3D2(target uint, level int, xoffset int, yoffset int, zoffset int, width int, height int, depth int, format uint, srcData *Union, srcOffset *uint, srcLengthOverride *uint) {
	var (
		_args [12]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := zoffset
	_args[4] = _p4
	_end++
	_p5 := width
	_args[5] = _p5
	_end++
	_p6 := height
	_args[6] = _p6
	_end++
	_p7 := depth
	_args[7] = _p7
	_end++
	_p8 := format
	_args[8] = _p8
	_end++
	_p9 := srcData.JSValue()
	_args[9] = _p9
	_end++
	if srcOffset != nil {
		_p10 := srcOffset
		_args[10] = _p10
		_end++
	}
	if srcLengthOverride != nil {
		_p11 := srcLengthOverride
		_args[11] = _p11
		_end++
	}
	_this.Value_JS.Call("compressedTexSubImage3D", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) GetFragDataLocation(program *webgl.WebGLProgram, name string) (_result int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := name
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getFragDataLocation", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) Uniform1ui(location *webgl.WebGLUniformLocation, v0 uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v0
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1ui", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform2ui(location *webgl.WebGLUniformLocation, v0 uint, v1 uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v0
	_args[1] = _p1
	_end++
	_p2 := v1
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniform2ui", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform3ui(location *webgl.WebGLUniformLocation, v0 uint, v1 uint, v2 uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v0
	_args[1] = _p1
	_end++
	_p2 := v1
	_args[2] = _p2
	_end++
	_p3 := v2
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("uniform3ui", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform4ui(location *webgl.WebGLUniformLocation, v0 uint, v1 uint, v2 uint, v3 uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v0
	_args[1] = _p1
	_end++
	_p2 := v1
	_args[2] = _p2
	_end++
	_p3 := v2
	_args[3] = _p3
	_end++
	_p4 := v3
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("uniform4ui", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform1fv2(location *webgl.WebGLUniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform1fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform2fv2(location *webgl.WebGLUniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform2fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform3fv2(location *webgl.WebGLUniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform3fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform4fv2(location *webgl.WebGLUniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform4fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform1iv2(location *webgl.WebGLUniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform1iv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform2iv2(location *webgl.WebGLUniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform2iv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform3iv2(location *webgl.WebGLUniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform3iv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform4iv2(location *webgl.WebGLUniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform4iv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform1uiv(location *webgl.WebGLUniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform1uiv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform2uiv(location *webgl.WebGLUniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform2uiv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform3uiv(location *webgl.WebGLUniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform3uiv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) Uniform4uiv(location *webgl.WebGLUniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform4uiv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) UniformMatrix2fv2(location *webgl.WebGLUniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix2fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) UniformMatrix3x2fv(location *webgl.WebGLUniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix3x2fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) UniformMatrix4x2fv(location *webgl.WebGLUniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix4x2fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) UniformMatrix2x3fv(location *webgl.WebGLUniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix2x3fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) UniformMatrix3fv2(location *webgl.WebGLUniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix3fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) UniformMatrix4x3fv(location *webgl.WebGLUniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix4x3fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) UniformMatrix2x4fv(location *webgl.WebGLUniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix2x4fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) UniformMatrix3x4fv(location *webgl.WebGLUniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix3x4fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) UniformMatrix4fv2(location *webgl.WebGLUniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix4fv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttribI4i(index uint, x int, y int, z int, w int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("vertexAttribI4i", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttribI4iv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttribI4iv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttribI4ui(index uint, x uint, y uint, z uint, w uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("vertexAttribI4ui", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttribI4uiv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttribI4uiv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttribIPointer(index uint, size int, _type uint, stride int, offset int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := size
	_args[1] = _p1
	_end++
	_p2 := _type
	_args[2] = _p2
	_end++
	_p3 := stride
	_args[3] = _p3
	_end++
	_p4 := offset
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("vertexAttribIPointer", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) VertexAttribDivisor(index uint, divisor uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := divisor
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttribDivisor", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DrawArraysInstanced(mode uint, first int, count int, instanceCount int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_p1 := first
	_args[1] = _p1
	_end++
	_p2 := count
	_args[2] = _p2
	_end++
	_p3 := instanceCount
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("drawArraysInstanced", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DrawElementsInstanced(mode uint, count int, _type uint, offset int, instanceCount int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_p1 := count
	_args[1] = _p1
	_end++
	_p2 := _type
	_args[2] = _p2
	_end++
	_p3 := offset
	_args[3] = _p3
	_end++
	_p4 := instanceCount
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("drawElementsInstanced", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DrawRangeElements(mode uint, start uint, end uint, count int, _type uint, offset int) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_p1 := start
	_args[1] = _p1
	_end++
	_p2 := end
	_args[2] = _p2
	_end++
	_p3 := count
	_args[3] = _p3
	_end++
	_p4 := _type
	_args[4] = _p4
	_end++
	_p5 := offset
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("drawRangeElements", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ReadPixels2(x int, y int, width int, height int, format uint, _type uint, dstData *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := dstData.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("readPixels", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ReadPixels3(x int, y int, width int, height int, format uint, _type uint, offset int) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := offset
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("readPixels", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ReadPixels4(x int, y int, width int, height int, format uint, _type uint, dstData *Union, dstOffset uint) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := dstData.JSValue()
	_args[6] = _p6
	_end++
	_p7 := dstOffset
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("readPixels", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) DrawBuffers(buffers []uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := js.Global().Get("Array").New(len(buffers))
	for __idx0, __seq_in0 := range buffers {
		__seq_out0 := __seq_in0
		_p0.SetIndex(__idx0, __seq_out0)
	}
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("drawBuffers", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ClearBufferfv(buffer uint, drawbuffer int, values *Union, srcOffset *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := buffer
	_args[0] = _p0
	_end++
	_p1 := drawbuffer
	_args[1] = _p1
	_end++
	_p2 := values.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("clearBufferfv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ClearBufferiv(buffer uint, drawbuffer int, values *Union, srcOffset *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := buffer
	_args[0] = _p0
	_end++
	_p1 := drawbuffer
	_args[1] = _p1
	_end++
	_p2 := values.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("clearBufferiv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ClearBufferuiv(buffer uint, drawbuffer int, values *Union, srcOffset *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := buffer
	_args[0] = _p0
	_end++
	_p1 := drawbuffer
	_args[1] = _p1
	_end++
	_p2 := values.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("clearBufferuiv", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ClearBufferfi(buffer uint, drawbuffer int, depth float32, stencil int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := buffer
	_args[0] = _p0
	_end++
	_p1 := drawbuffer
	_args[1] = _p1
	_end++
	_p2 := depth
	_args[2] = _p2
	_end++
	_p3 := stencil
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("clearBufferfi", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CreateQuery() (_result *WebGLQuery) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createQuery", _args[0:_end]...)
	var (
		_converted *WebGLQuery // javascript: WebGLQuery _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLQueryFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) DeleteQuery(query *WebGLQuery) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := query.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteQuery", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) IsQuery(query *WebGLQuery) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := query.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isQuery", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) BeginQuery(target uint, query *WebGLQuery) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := query.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("beginQuery", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) EndQuery(target uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("endQuery", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) GetQuery(target uint, pname uint) (_result *WebGLQuery) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getQuery", _args[0:_end]...)
	var (
		_converted *WebGLQuery // javascript: WebGLQuery _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLQueryFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetQueryParameter(query *WebGLQuery, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := query.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getQueryParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) CreateSampler() (_result *WebGLSampler) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSampler", _args[0:_end]...)
	var (
		_converted *WebGLSampler // javascript: WebGLSampler _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLSamplerFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) DeleteSampler(sampler *WebGLSampler) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := sampler.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteSampler", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) IsSampler(sampler *WebGLSampler) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := sampler.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isSampler", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) BindSampler(unit uint, sampler *WebGLSampler) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := unit
	_args[0] = _p0
	_end++
	_p1 := sampler.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindSampler", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) SamplerParameteri(sampler *WebGLSampler, pname uint, param int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := sampler.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_p2 := param
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("samplerParameteri", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) SamplerParameterf(sampler *WebGLSampler, pname uint, param float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := sampler.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_p2 := param
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("samplerParameterf", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) GetSamplerParameter(sampler *WebGLSampler, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := sampler.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getSamplerParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) FenceSync(condition uint, flags uint) (_result *WebGLSync) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := condition
	_args[0] = _p0
	_end++
	_p1 := flags
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("fenceSync", _args[0:_end]...)
	var (
		_converted *WebGLSync // javascript: WebGLSync _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLSyncFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) IsSync(sync *WebGLSync) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := sync.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isSync", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) DeleteSync(sync *WebGLSync) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := sync.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteSync", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ClientWaitSync(sync *WebGLSync, flags uint, timeout int) (_result uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := sync.JSValue()
	_args[0] = _p0
	_end++
	_p1 := flags
	_args[1] = _p1
	_end++
	_p2 := timeout
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("clientWaitSync", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) WaitSync(sync *WebGLSync, flags uint, timeout int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := sync.JSValue()
	_args[0] = _p0
	_end++
	_p1 := flags
	_args[1] = _p1
	_end++
	_p2 := timeout
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("waitSync", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) GetSyncParameter(sync *WebGLSync, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := sync.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getSyncParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) CreateTransformFeedback() (_result *WebGLTransformFeedback) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createTransformFeedback", _args[0:_end]...)
	var (
		_converted *WebGLTransformFeedback // javascript: WebGLTransformFeedback _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLTransformFeedbackFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) DeleteTransformFeedback(tf *WebGLTransformFeedback) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := tf.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteTransformFeedback", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) IsTransformFeedback(tf *WebGLTransformFeedback) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := tf.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isTransformFeedback", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) BindTransformFeedback(target uint, tf *WebGLTransformFeedback) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := tf.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindTransformFeedback", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BeginTransformFeedback(primitiveMode uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := primitiveMode
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("beginTransformFeedback", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) EndTransformFeedback() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("endTransformFeedback", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) TransformFeedbackVaryings(program *webgl.WebGLProgram, varyings []string, bufferMode uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(varyings))
	for __idx1, __seq_in1 := range varyings {
		__seq_out1 := __seq_in1
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_p2 := bufferMode
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("transformFeedbackVaryings", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) GetTransformFeedbackVarying(program *webgl.WebGLProgram, index uint) (_result *webgl.WebGLActiveInfo) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getTransformFeedbackVarying", _args[0:_end]...)
	var (
		_converted *webgl.WebGLActiveInfo // javascript: WebGLActiveInfo _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.WebGLActiveInfoFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) PauseTransformFeedback() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("pauseTransformFeedback", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) ResumeTransformFeedback() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("resumeTransformFeedback", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BindBufferBase(target uint, index uint, buffer *webgl.WebGLBuffer) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_p2 := buffer.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bindBufferBase", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) BindBufferRange(target uint, index uint, buffer *webgl.WebGLBuffer, offset int, size int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_p2 := buffer.JSValue()
	_args[2] = _p2
	_end++
	_p3 := offset
	_args[3] = _p3
	_end++
	_p4 := size
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("bindBufferRange", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) GetIndexedParameter(target uint, index uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getIndexedParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetUniformIndices(program *webgl.WebGLProgram, uniformNames []string) (_result []uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(uniformNames))
	for __idx1, __seq_in1 := range uniformNames {
		__seq_out1 := __seq_in1
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getUniformIndices", _args[0:_end]...)
	var (
		_converted []uint // javascript: sequence<unsigned long> _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__length0 := _returned.Length()
		__array0 := make([]uint, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 uint
			__seq_in0 := _returned.Index(__idx0)
			__seq_out0 = (uint)((__seq_in0).Int())
			__array0[__idx0] = __seq_out0
		}
		_converted = __array0
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetActiveUniforms(program *webgl.WebGLProgram, uniformIndices []uint, pname uint) (_result js.Value) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(uniformIndices))
	for __idx1, __seq_in1 := range uniformIndices {
		__seq_out1 := __seq_in1
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_p2 := pname
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("getActiveUniforms", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetUniformBlockIndex(program *webgl.WebGLProgram, uniformBlockName string) (_result uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := uniformBlockName
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getUniformBlockIndex", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetActiveUniformBlockParameter(program *webgl.WebGLProgram, uniformBlockIndex uint, pname uint) (_result js.Value) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := uniformBlockIndex
	_args[1] = _p1
	_end++
	_p2 := pname
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("getActiveUniformBlockParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) GetActiveUniformBlockName(program *webgl.WebGLProgram, uniformBlockIndex uint) (_result *string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := uniformBlockIndex
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getActiveUniformBlockName", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) UniformBlockBinding(program *webgl.WebGLProgram, uniformBlockIndex uint, uniformBlockBinding uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := uniformBlockIndex
	_args[1] = _p1
	_end++
	_p2 := uniformBlockBinding
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniformBlockBinding", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) CreateVertexArray() (_result *WebGLVertexArrayObject) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createVertexArray", _args[0:_end]...)
	var (
		_converted *WebGLVertexArrayObject // javascript: WebGLVertexArrayObject _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = WebGLVertexArrayObjectFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) DeleteVertexArray(vertexArray *WebGLVertexArrayObject) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := vertexArray.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteVertexArray", _args[0:_end]...)
	return
}

func (_this *WebGL2RenderingContext) IsVertexArray(vertexArray *WebGLVertexArrayObject) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := vertexArray.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isVertexArray", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *WebGL2RenderingContext) BindVertexArray(array *WebGLVertexArrayObject) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := array.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("bindVertexArray", _args[0:_end]...)
	return
}

// interface: WebGLQuery
type WebGLQuery struct {
	webgl.WebGLObject
}

// WebGLQueryFromJS is casting a js.Wrapper into WebGLQuery.
func WebGLQueryFromJS(value js.Wrapper) *WebGLQuery {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLQuery{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLSampler
type WebGLSampler struct {
	webgl.WebGLObject
}

// WebGLSamplerFromJS is casting a js.Wrapper into WebGLSampler.
func WebGLSamplerFromJS(value js.Wrapper) *WebGLSampler {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLSampler{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLSync
type WebGLSync struct {
	webgl.WebGLObject
}

// WebGLSyncFromJS is casting a js.Wrapper into WebGLSync.
func WebGLSyncFromJS(value js.Wrapper) *WebGLSync {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLSync{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLTransformFeedback
type WebGLTransformFeedback struct {
	webgl.WebGLObject
}

// WebGLTransformFeedbackFromJS is casting a js.Wrapper into WebGLTransformFeedback.
func WebGLTransformFeedbackFromJS(value js.Wrapper) *WebGLTransformFeedback {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLTransformFeedback{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLVertexArrayObject
type WebGLVertexArrayObject struct {
	webgl.WebGLObject
}

// WebGLVertexArrayObjectFromJS is casting a js.Wrapper into WebGLVertexArrayObject.
func WebGLVertexArrayObjectFromJS(value js.Wrapper) *WebGLVertexArrayObject {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WebGLVertexArrayObject{}
	ret.Value_JS = input
	return ret
}
