// Code generated by webidl-bind. DO NOT EDIT.

package streams

import "syscall/js"

import (
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/javascript"
	"github.com/gowebapi/webapi/media/capture/depth"
	"github.com/gowebapi/webapi/patch"
)

// using following types:
// depth.DistortionCoefficients
// depth.Transformation
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// javascript.Object
// javascript.Promise
// patch.OverconstrainedError

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: MediaDeviceKind
type MediaDeviceKind int

const (
	AudioinputMediaDeviceKind MediaDeviceKind = iota
	AudiooutputMediaDeviceKind
	VideoinputMediaDeviceKind
)

var mediaDeviceKindToWasmTable = []string{
	"audioinput", "audiooutput", "videoinput",
}

var mediaDeviceKindFromWasmTable = map[string]MediaDeviceKind{
	"audioinput": AudioinputMediaDeviceKind, "audiooutput": AudiooutputMediaDeviceKind, "videoinput": VideoinputMediaDeviceKind,
}

// JSValue is converting this enum into a java object
func (this *MediaDeviceKind) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this MediaDeviceKind) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(mediaDeviceKindToWasmTable) {
		return mediaDeviceKindToWasmTable[idx]
	}
	panic("unknown input value")
}

// MediaDeviceKindFromJS is converting a javascript value into
// a MediaDeviceKind enum value.
func MediaDeviceKindFromJS(value js.Value) MediaDeviceKind {
	key := value.String()
	conv, ok := mediaDeviceKindFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: MediaStreamTrackState
type MediaStreamTrackState int

const (
	LiveMediaStreamTrackState MediaStreamTrackState = iota
	EndedMediaStreamTrackState
)

var mediaStreamTrackStateToWasmTable = []string{
	"live", "ended",
}

var mediaStreamTrackStateFromWasmTable = map[string]MediaStreamTrackState{
	"live": LiveMediaStreamTrackState, "ended": EndedMediaStreamTrackState,
}

// JSValue is converting this enum into a java object
func (this *MediaStreamTrackState) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this MediaStreamTrackState) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(mediaStreamTrackStateToWasmTable) {
		return mediaStreamTrackStateToWasmTable[idx]
	}
	panic("unknown input value")
}

// MediaStreamTrackStateFromJS is converting a javascript value into
// a MediaStreamTrackState enum value.
func MediaStreamTrackStateFromJS(value js.Value) MediaStreamTrackState {
	key := value.String()
	conv, ok := mediaStreamTrackStateFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// callback: NavigatorUserMediaErrorCallback
type NavigatorUserMediaErrorCallbackFunc func(_error *javascript.Object)

// NavigatorUserMediaErrorCallback is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type NavigatorUserMediaErrorCallback js.Func

func NavigatorUserMediaErrorCallbackToJS(callback NavigatorUserMediaErrorCallbackFunc) *NavigatorUserMediaErrorCallback {
	if callback == nil {
		return nil
	}
	ret := NavigatorUserMediaErrorCallback(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *javascript.Object // javascript: object _error
		)
		_p0 = javascript.ObjectFromJS(args[0])
		callback(_p0)
		// returning no return value
		return nil
	}))
	return &ret
}

func NavigatorUserMediaErrorCallbackFromJS(_value js.Value) NavigatorUserMediaErrorCallbackFunc {
	return func(_error *javascript.Object) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := _error.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: NavigatorUserMediaSuccessCallback
type NavigatorUserMediaSuccessCallbackFunc func(stream *MediaStream)

// NavigatorUserMediaSuccessCallback is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type NavigatorUserMediaSuccessCallback js.Func

func NavigatorUserMediaSuccessCallbackToJS(callback NavigatorUserMediaSuccessCallbackFunc) *NavigatorUserMediaSuccessCallback {
	if callback == nil {
		return nil
	}
	ret := NavigatorUserMediaSuccessCallback(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *MediaStream // javascript: MediaStream stream
		)
		_p0 = MediaStreamFromJS(args[0])
		callback(_p0)
		// returning no return value
		return nil
	}))
	return &ret
}

func NavigatorUserMediaSuccessCallbackFromJS(_value js.Value) NavigatorUserMediaSuccessCallbackFunc {
	return func(stream *MediaStream) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := stream.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// dictionary: Capabilities
type Capabilities struct {
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *Capabilities) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	return out
}

// CapabilitiesFromJS is allocating a new
// Capabilities object and copy all values from
// input javascript object
func CapabilitiesFromJS(value js.Wrapper) *Capabilities {
	var out Capabilities
	var ()
	return &out
}

// dictionary: ConstrainBooleanParameters
type ConstrainBooleanParameters struct {
	Exact bool
	Ideal bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *ConstrainBooleanParameters) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Exact
	out.Set("exact", value0)
	value1 := _this.Ideal
	out.Set("ideal", value1)
	return out
}

// ConstrainBooleanParametersFromJS is allocating a new
// ConstrainBooleanParameters object and copy all values from
// input javascript object
func ConstrainBooleanParametersFromJS(value js.Wrapper) *ConstrainBooleanParameters {
	input := value.JSValue()
	var out ConstrainBooleanParameters
	var (
		value0 bool // javascript: boolean {exact Exact exact}
		value1 bool // javascript: boolean {ideal Ideal ideal}
	)
	value0 = (input.Get("exact")).Bool()
	out.Exact = value0
	value1 = (input.Get("ideal")).Bool()
	out.Ideal = value1
	return &out
}

// dictionary: ConstrainDOMStringParameters
type ConstrainDOMStringParameters struct {
	Exact *Union
	Ideal *Union
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *ConstrainDOMStringParameters) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Exact.JSValue()
	out.Set("exact", value0)
	value1 := _this.Ideal.JSValue()
	out.Set("ideal", value1)
	return out
}

// ConstrainDOMStringParametersFromJS is allocating a new
// ConstrainDOMStringParameters object and copy all values from
// input javascript object
func ConstrainDOMStringParametersFromJS(value js.Wrapper) *ConstrainDOMStringParameters {
	input := value.JSValue()
	var out ConstrainDOMStringParameters
	var (
		value0 *Union // javascript: Union {exact Exact exact}
		value1 *Union // javascript: Union {ideal Ideal ideal}
	)
	value0 = UnionFromJS(input.Get("exact"))
	out.Exact = value0
	value1 = UnionFromJS(input.Get("ideal"))
	out.Ideal = value1
	return &out
}

// dictionary: ConstrainDoubleRange
type ConstrainDoubleRange struct {
	Max   float64
	Min   float64
	Exact float64
	Ideal float64
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *ConstrainDoubleRange) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Max
	out.Set("max", value0)
	value1 := _this.Min
	out.Set("min", value1)
	value2 := _this.Exact
	out.Set("exact", value2)
	value3 := _this.Ideal
	out.Set("ideal", value3)
	return out
}

// ConstrainDoubleRangeFromJS is allocating a new
// ConstrainDoubleRange object and copy all values from
// input javascript object
func ConstrainDoubleRangeFromJS(value js.Wrapper) *ConstrainDoubleRange {
	input := value.JSValue()
	var out ConstrainDoubleRange
	var (
		value0 float64 // javascript: double {max Max max}
		value1 float64 // javascript: double {min Min min}
		value2 float64 // javascript: double {exact Exact exact}
		value3 float64 // javascript: double {ideal Ideal ideal}
	)
	value0 = (input.Get("max")).Float()
	out.Max = value0
	value1 = (input.Get("min")).Float()
	out.Min = value1
	value2 = (input.Get("exact")).Float()
	out.Exact = value2
	value3 = (input.Get("ideal")).Float()
	out.Ideal = value3
	return &out
}

// dictionary: ConstrainULongRange
type ConstrainULongRange struct {
	Max   uint
	Min   uint
	Exact uint
	Ideal uint
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *ConstrainULongRange) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Max
	out.Set("max", value0)
	value1 := _this.Min
	out.Set("min", value1)
	value2 := _this.Exact
	out.Set("exact", value2)
	value3 := _this.Ideal
	out.Set("ideal", value3)
	return out
}

// ConstrainULongRangeFromJS is allocating a new
// ConstrainULongRange object and copy all values from
// input javascript object
func ConstrainULongRangeFromJS(value js.Wrapper) *ConstrainULongRange {
	input := value.JSValue()
	var out ConstrainULongRange
	var (
		value0 uint // javascript: unsigned long {max Max max}
		value1 uint // javascript: unsigned long {min Min min}
		value2 uint // javascript: unsigned long {exact Exact exact}
		value3 uint // javascript: unsigned long {ideal Ideal ideal}
	)
	value0 = (uint)((input.Get("max")).Int())
	out.Max = value0
	value1 = (uint)((input.Get("min")).Int())
	out.Min = value1
	value2 = (uint)((input.Get("exact")).Int())
	out.Exact = value2
	value3 = (uint)((input.Get("ideal")).Int())
	out.Ideal = value3
	return &out
}

// dictionary: ConstraintSet
type ConstraintSet struct {
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *ConstraintSet) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	return out
}

// ConstraintSetFromJS is allocating a new
// ConstraintSet object and copy all values from
// input javascript object
func ConstraintSetFromJS(value js.Wrapper) *ConstraintSet {
	var out ConstraintSet
	var ()
	return &out
}

// dictionary: Constraints
type Constraints struct {
	Advanced []*ConstraintSet
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *Constraints) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.Advanced))
	for __idx0, __seq_in0 := range _this.Advanced {
		__seq_out0 := __seq_in0.JSValue()
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("advanced", value0)
	return out
}

// ConstraintsFromJS is allocating a new
// Constraints object and copy all values from
// input javascript object
func ConstraintsFromJS(value js.Wrapper) *Constraints {
	input := value.JSValue()
	var out Constraints
	var (
		value0 []*ConstraintSet // javascript: sequence<ConstraintSet> {advanced Advanced advanced}
	)
	__length0 := input.Get("advanced").Length()
	__array0 := make([]*ConstraintSet, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *ConstraintSet
		__seq_in0 := input.Get("advanced").Index(__idx0)
		__seq_out0 = ConstraintSetFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.Advanced = value0
	return &out
}

// dictionary: DoubleRange
type DoubleRange struct {
	Max float64
	Min float64
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *DoubleRange) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Max
	out.Set("max", value0)
	value1 := _this.Min
	out.Set("min", value1)
	return out
}

// DoubleRangeFromJS is allocating a new
// DoubleRange object and copy all values from
// input javascript object
func DoubleRangeFromJS(value js.Wrapper) *DoubleRange {
	input := value.JSValue()
	var out DoubleRange
	var (
		value0 float64 // javascript: double {max Max max}
		value1 float64 // javascript: double {min Min min}
	)
	value0 = (input.Get("max")).Float()
	out.Max = value0
	value1 = (input.Get("min")).Float()
	out.Min = value1
	return &out
}

// dictionary: MediaStreamConstraints
type MediaStreamConstraints struct {
	Video *Union
	Audio *Union
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MediaStreamConstraints) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Video.JSValue()
	out.Set("video", value0)
	value1 := _this.Audio.JSValue()
	out.Set("audio", value1)
	return out
}

// MediaStreamConstraintsFromJS is allocating a new
// MediaStreamConstraints object and copy all values from
// input javascript object
func MediaStreamConstraintsFromJS(value js.Wrapper) *MediaStreamConstraints {
	input := value.JSValue()
	var out MediaStreamConstraints
	var (
		value0 *Union // javascript: Union {video Video video}
		value1 *Union // javascript: Union {audio Audio audio}
	)
	value0 = UnionFromJS(input.Get("video"))
	out.Video = value0
	value1 = UnionFromJS(input.Get("audio"))
	out.Audio = value1
	return &out
}

// dictionary: MediaStreamTrackEventInit
type MediaStreamTrackEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Track      *MediaStreamTrack
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MediaStreamTrackEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Track.JSValue()
	out.Set("track", value3)
	return out
}

// MediaStreamTrackEventInitFromJS is allocating a new
// MediaStreamTrackEventInit object and copy all values from
// input javascript object
func MediaStreamTrackEventInitFromJS(value js.Wrapper) *MediaStreamTrackEventInit {
	input := value.JSValue()
	var out MediaStreamTrackEventInit
	var (
		value0 bool              // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool              // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool              // javascript: boolean {composed Composed composed}
		value3 *MediaStreamTrack // javascript: MediaStreamTrack {track Track track}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = MediaStreamTrackFromJS(input.Get("track"))
	out.Track = value3
	return &out
}

// dictionary: MediaTrackCapabilities
type MediaTrackCapabilities struct {
	Width                              *ULongRange
	Height                             *ULongRange
	AspectRatio                        *DoubleRange
	FrameRate                          *DoubleRange
	FacingMode                         []string
	ResizeMode                         []string
	Volume                             *DoubleRange
	SampleRate                         *ULongRange
	SampleSize                         *ULongRange
	EchoCancellation                   []bool
	AutoGainControl                    []bool
	NoiseSuppression                   []bool
	Latency                            *DoubleRange
	ChannelCount                       *ULongRange
	DeviceId                           string
	GroupId                            string
	VideoKind                          string
	FocalLengthX                       *Union
	FocalLengthY                       *Union
	PrincipalPointX                    *Union
	PrincipalPointY                    *Union
	DeprojectionDistortionCoefficients bool
	ProjectionDistortionCoefficients   bool
	DepthNear                          *Union
	DepthFar                           *Union
	DepthToVideoTransform              bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MediaTrackCapabilities) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Width.JSValue()
	out.Set("width", value0)
	value1 := _this.Height.JSValue()
	out.Set("height", value1)
	value2 := _this.AspectRatio.JSValue()
	out.Set("aspectRatio", value2)
	value3 := _this.FrameRate.JSValue()
	out.Set("frameRate", value3)
	value4 := js.Global().Get("Array").New(len(_this.FacingMode))
	for __idx4, __seq_in4 := range _this.FacingMode {
		__seq_out4 := __seq_in4
		value4.SetIndex(__idx4, __seq_out4)
	}
	out.Set("facingMode", value4)
	value5 := js.Global().Get("Array").New(len(_this.ResizeMode))
	for __idx5, __seq_in5 := range _this.ResizeMode {
		__seq_out5 := __seq_in5
		value5.SetIndex(__idx5, __seq_out5)
	}
	out.Set("resizeMode", value5)
	value6 := _this.Volume.JSValue()
	out.Set("volume", value6)
	value7 := _this.SampleRate.JSValue()
	out.Set("sampleRate", value7)
	value8 := _this.SampleSize.JSValue()
	out.Set("sampleSize", value8)
	value9 := js.Global().Get("Array").New(len(_this.EchoCancellation))
	for __idx9, __seq_in9 := range _this.EchoCancellation {
		__seq_out9 := __seq_in9
		value9.SetIndex(__idx9, __seq_out9)
	}
	out.Set("echoCancellation", value9)
	value10 := js.Global().Get("Array").New(len(_this.AutoGainControl))
	for __idx10, __seq_in10 := range _this.AutoGainControl {
		__seq_out10 := __seq_in10
		value10.SetIndex(__idx10, __seq_out10)
	}
	out.Set("autoGainControl", value10)
	value11 := js.Global().Get("Array").New(len(_this.NoiseSuppression))
	for __idx11, __seq_in11 := range _this.NoiseSuppression {
		__seq_out11 := __seq_in11
		value11.SetIndex(__idx11, __seq_out11)
	}
	out.Set("noiseSuppression", value11)
	value12 := _this.Latency.JSValue()
	out.Set("latency", value12)
	value13 := _this.ChannelCount.JSValue()
	out.Set("channelCount", value13)
	value14 := _this.DeviceId
	out.Set("deviceId", value14)
	value15 := _this.GroupId
	out.Set("groupId", value15)
	value16 := _this.VideoKind
	out.Set("videoKind", value16)
	value17 := _this.FocalLengthX.JSValue()
	out.Set("focalLengthX", value17)
	value18 := _this.FocalLengthY.JSValue()
	out.Set("focalLengthY", value18)
	value19 := _this.PrincipalPointX.JSValue()
	out.Set("principalPointX", value19)
	value20 := _this.PrincipalPointY.JSValue()
	out.Set("principalPointY", value20)
	value21 := _this.DeprojectionDistortionCoefficients
	out.Set("deprojectionDistortionCoefficients", value21)
	value22 := _this.ProjectionDistortionCoefficients
	out.Set("projectionDistortionCoefficients", value22)
	value23 := _this.DepthNear.JSValue()
	out.Set("depthNear", value23)
	value24 := _this.DepthFar.JSValue()
	out.Set("depthFar", value24)
	value25 := _this.DepthToVideoTransform
	out.Set("depthToVideoTransform", value25)
	return out
}

// MediaTrackCapabilitiesFromJS is allocating a new
// MediaTrackCapabilities object and copy all values from
// input javascript object
func MediaTrackCapabilitiesFromJS(value js.Wrapper) *MediaTrackCapabilities {
	input := value.JSValue()
	var out MediaTrackCapabilities
	var (
		value0  *ULongRange  // javascript: ULongRange {width Width width}
		value1  *ULongRange  // javascript: ULongRange {height Height height}
		value2  *DoubleRange // javascript: DoubleRange {aspectRatio AspectRatio aspectRatio}
		value3  *DoubleRange // javascript: DoubleRange {frameRate FrameRate frameRate}
		value4  []string     // javascript: sequence<DOMString> {facingMode FacingMode facingMode}
		value5  []string     // javascript: sequence<DOMString> {resizeMode ResizeMode resizeMode}
		value6  *DoubleRange // javascript: DoubleRange {volume Volume volume}
		value7  *ULongRange  // javascript: ULongRange {sampleRate SampleRate sampleRate}
		value8  *ULongRange  // javascript: ULongRange {sampleSize SampleSize sampleSize}
		value9  []bool       // javascript: sequence<boolean> {echoCancellation EchoCancellation echoCancellation}
		value10 []bool       // javascript: sequence<boolean> {autoGainControl AutoGainControl autoGainControl}
		value11 []bool       // javascript: sequence<boolean> {noiseSuppression NoiseSuppression noiseSuppression}
		value12 *DoubleRange // javascript: DoubleRange {latency Latency latency}
		value13 *ULongRange  // javascript: ULongRange {channelCount ChannelCount channelCount}
		value14 string       // javascript: DOMString {deviceId DeviceId deviceId}
		value15 string       // javascript: DOMString {groupId GroupId groupId}
		value16 string       // javascript: DOMString {videoKind VideoKind videoKind}
		value17 *Union       // javascript: Union {focalLengthX FocalLengthX focalLengthX}
		value18 *Union       // javascript: Union {focalLengthY FocalLengthY focalLengthY}
		value19 *Union       // javascript: Union {principalPointX PrincipalPointX principalPointX}
		value20 *Union       // javascript: Union {principalPointY PrincipalPointY principalPointY}
		value21 bool         // javascript: boolean {deprojectionDistortionCoefficients DeprojectionDistortionCoefficients deprojectionDistortionCoefficients}
		value22 bool         // javascript: boolean {projectionDistortionCoefficients ProjectionDistortionCoefficients projectionDistortionCoefficients}
		value23 *Union       // javascript: Union {depthNear DepthNear depthNear}
		value24 *Union       // javascript: Union {depthFar DepthFar depthFar}
		value25 bool         // javascript: boolean {depthToVideoTransform DepthToVideoTransform depthToVideoTransform}
	)
	value0 = ULongRangeFromJS(input.Get("width"))
	out.Width = value0
	value1 = ULongRangeFromJS(input.Get("height"))
	out.Height = value1
	value2 = DoubleRangeFromJS(input.Get("aspectRatio"))
	out.AspectRatio = value2
	value3 = DoubleRangeFromJS(input.Get("frameRate"))
	out.FrameRate = value3
	__length4 := input.Get("facingMode").Length()
	__array4 := make([]string, __length4, __length4)
	for __idx4 := 0; __idx4 < __length4; __idx4++ {
		var __seq_out4 string
		__seq_in4 := input.Get("facingMode").Index(__idx4)
		__seq_out4 = (__seq_in4).String()
		__array4[__idx4] = __seq_out4
	}
	value4 = __array4
	out.FacingMode = value4
	__length5 := input.Get("resizeMode").Length()
	__array5 := make([]string, __length5, __length5)
	for __idx5 := 0; __idx5 < __length5; __idx5++ {
		var __seq_out5 string
		__seq_in5 := input.Get("resizeMode").Index(__idx5)
		__seq_out5 = (__seq_in5).String()
		__array5[__idx5] = __seq_out5
	}
	value5 = __array5
	out.ResizeMode = value5
	value6 = DoubleRangeFromJS(input.Get("volume"))
	out.Volume = value6
	value7 = ULongRangeFromJS(input.Get("sampleRate"))
	out.SampleRate = value7
	value8 = ULongRangeFromJS(input.Get("sampleSize"))
	out.SampleSize = value8
	__length9 := input.Get("echoCancellation").Length()
	__array9 := make([]bool, __length9, __length9)
	for __idx9 := 0; __idx9 < __length9; __idx9++ {
		var __seq_out9 bool
		__seq_in9 := input.Get("echoCancellation").Index(__idx9)
		__seq_out9 = (__seq_in9).Bool()
		__array9[__idx9] = __seq_out9
	}
	value9 = __array9
	out.EchoCancellation = value9
	__length10 := input.Get("autoGainControl").Length()
	__array10 := make([]bool, __length10, __length10)
	for __idx10 := 0; __idx10 < __length10; __idx10++ {
		var __seq_out10 bool
		__seq_in10 := input.Get("autoGainControl").Index(__idx10)
		__seq_out10 = (__seq_in10).Bool()
		__array10[__idx10] = __seq_out10
	}
	value10 = __array10
	out.AutoGainControl = value10
	__length11 := input.Get("noiseSuppression").Length()
	__array11 := make([]bool, __length11, __length11)
	for __idx11 := 0; __idx11 < __length11; __idx11++ {
		var __seq_out11 bool
		__seq_in11 := input.Get("noiseSuppression").Index(__idx11)
		__seq_out11 = (__seq_in11).Bool()
		__array11[__idx11] = __seq_out11
	}
	value11 = __array11
	out.NoiseSuppression = value11
	value12 = DoubleRangeFromJS(input.Get("latency"))
	out.Latency = value12
	value13 = ULongRangeFromJS(input.Get("channelCount"))
	out.ChannelCount = value13
	value14 = (input.Get("deviceId")).String()
	out.DeviceId = value14
	value15 = (input.Get("groupId")).String()
	out.GroupId = value15
	value16 = (input.Get("videoKind")).String()
	out.VideoKind = value16
	value17 = UnionFromJS(input.Get("focalLengthX"))
	out.FocalLengthX = value17
	value18 = UnionFromJS(input.Get("focalLengthY"))
	out.FocalLengthY = value18
	value19 = UnionFromJS(input.Get("principalPointX"))
	out.PrincipalPointX = value19
	value20 = UnionFromJS(input.Get("principalPointY"))
	out.PrincipalPointY = value20
	value21 = (input.Get("deprojectionDistortionCoefficients")).Bool()
	out.DeprojectionDistortionCoefficients = value21
	value22 = (input.Get("projectionDistortionCoefficients")).Bool()
	out.ProjectionDistortionCoefficients = value22
	value23 = UnionFromJS(input.Get("depthNear"))
	out.DepthNear = value23
	value24 = UnionFromJS(input.Get("depthFar"))
	out.DepthFar = value24
	value25 = (input.Get("depthToVideoTransform")).Bool()
	out.DepthToVideoTransform = value25
	return &out
}

// dictionary: MediaTrackConstraintSet
type MediaTrackConstraintSet struct {
	Width                              *Union
	Height                             *Union
	AspectRatio                        *Union
	FrameRate                          *Union
	FacingMode                         *Union
	ResizeMode                         *Union
	Volume                             *Union
	SampleRate                         *Union
	SampleSize                         *Union
	EchoCancellation                   *Union
	AutoGainControl                    *Union
	NoiseSuppression                   *Union
	Latency                            *Union
	ChannelCount                       *Union
	DeviceId                           *Union
	GroupId                            *Union
	VideoKind                          *Union
	FocalLengthX                       *Union
	FocalLengthY                       *Union
	PrincipalPointX                    *Union
	PrincipalPointY                    *Union
	DeprojectionDistortionCoefficients *Union
	ProjectionDistortionCoefficients   *Union
	DepthNear                          *Union
	DepthFar                           *Union
	DepthToVideoTransform              *Union
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MediaTrackConstraintSet) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Width.JSValue()
	out.Set("width", value0)
	value1 := _this.Height.JSValue()
	out.Set("height", value1)
	value2 := _this.AspectRatio.JSValue()
	out.Set("aspectRatio", value2)
	value3 := _this.FrameRate.JSValue()
	out.Set("frameRate", value3)
	value4 := _this.FacingMode.JSValue()
	out.Set("facingMode", value4)
	value5 := _this.ResizeMode.JSValue()
	out.Set("resizeMode", value5)
	value6 := _this.Volume.JSValue()
	out.Set("volume", value6)
	value7 := _this.SampleRate.JSValue()
	out.Set("sampleRate", value7)
	value8 := _this.SampleSize.JSValue()
	out.Set("sampleSize", value8)
	value9 := _this.EchoCancellation.JSValue()
	out.Set("echoCancellation", value9)
	value10 := _this.AutoGainControl.JSValue()
	out.Set("autoGainControl", value10)
	value11 := _this.NoiseSuppression.JSValue()
	out.Set("noiseSuppression", value11)
	value12 := _this.Latency.JSValue()
	out.Set("latency", value12)
	value13 := _this.ChannelCount.JSValue()
	out.Set("channelCount", value13)
	value14 := _this.DeviceId.JSValue()
	out.Set("deviceId", value14)
	value15 := _this.GroupId.JSValue()
	out.Set("groupId", value15)
	value16 := _this.VideoKind.JSValue()
	out.Set("videoKind", value16)
	value17 := _this.FocalLengthX.JSValue()
	out.Set("focalLengthX", value17)
	value18 := _this.FocalLengthY.JSValue()
	out.Set("focalLengthY", value18)
	value19 := _this.PrincipalPointX.JSValue()
	out.Set("principalPointX", value19)
	value20 := _this.PrincipalPointY.JSValue()
	out.Set("principalPointY", value20)
	value21 := _this.DeprojectionDistortionCoefficients.JSValue()
	out.Set("deprojectionDistortionCoefficients", value21)
	value22 := _this.ProjectionDistortionCoefficients.JSValue()
	out.Set("projectionDistortionCoefficients", value22)
	value23 := _this.DepthNear.JSValue()
	out.Set("depthNear", value23)
	value24 := _this.DepthFar.JSValue()
	out.Set("depthFar", value24)
	value25 := _this.DepthToVideoTransform.JSValue()
	out.Set("depthToVideoTransform", value25)
	return out
}

// MediaTrackConstraintSetFromJS is allocating a new
// MediaTrackConstraintSet object and copy all values from
// input javascript object
func MediaTrackConstraintSetFromJS(value js.Wrapper) *MediaTrackConstraintSet {
	input := value.JSValue()
	var out MediaTrackConstraintSet
	var (
		value0  *Union // javascript: Union {width Width width}
		value1  *Union // javascript: Union {height Height height}
		value2  *Union // javascript: Union {aspectRatio AspectRatio aspectRatio}
		value3  *Union // javascript: Union {frameRate FrameRate frameRate}
		value4  *Union // javascript: Union {facingMode FacingMode facingMode}
		value5  *Union // javascript: Union {resizeMode ResizeMode resizeMode}
		value6  *Union // javascript: Union {volume Volume volume}
		value7  *Union // javascript: Union {sampleRate SampleRate sampleRate}
		value8  *Union // javascript: Union {sampleSize SampleSize sampleSize}
		value9  *Union // javascript: Union {echoCancellation EchoCancellation echoCancellation}
		value10 *Union // javascript: Union {autoGainControl AutoGainControl autoGainControl}
		value11 *Union // javascript: Union {noiseSuppression NoiseSuppression noiseSuppression}
		value12 *Union // javascript: Union {latency Latency latency}
		value13 *Union // javascript: Union {channelCount ChannelCount channelCount}
		value14 *Union // javascript: Union {deviceId DeviceId deviceId}
		value15 *Union // javascript: Union {groupId GroupId groupId}
		value16 *Union // javascript: Union {videoKind VideoKind videoKind}
		value17 *Union // javascript: Union {focalLengthX FocalLengthX focalLengthX}
		value18 *Union // javascript: Union {focalLengthY FocalLengthY focalLengthY}
		value19 *Union // javascript: Union {principalPointX PrincipalPointX principalPointX}
		value20 *Union // javascript: Union {principalPointY PrincipalPointY principalPointY}
		value21 *Union // javascript: Union {deprojectionDistortionCoefficients DeprojectionDistortionCoefficients deprojectionDistortionCoefficients}
		value22 *Union // javascript: Union {projectionDistortionCoefficients ProjectionDistortionCoefficients projectionDistortionCoefficients}
		value23 *Union // javascript: Union {depthNear DepthNear depthNear}
		value24 *Union // javascript: Union {depthFar DepthFar depthFar}
		value25 *Union // javascript: Union {depthToVideoTransform DepthToVideoTransform depthToVideoTransform}
	)
	value0 = UnionFromJS(input.Get("width"))
	out.Width = value0
	value1 = UnionFromJS(input.Get("height"))
	out.Height = value1
	value2 = UnionFromJS(input.Get("aspectRatio"))
	out.AspectRatio = value2
	value3 = UnionFromJS(input.Get("frameRate"))
	out.FrameRate = value3
	value4 = UnionFromJS(input.Get("facingMode"))
	out.FacingMode = value4
	value5 = UnionFromJS(input.Get("resizeMode"))
	out.ResizeMode = value5
	value6 = UnionFromJS(input.Get("volume"))
	out.Volume = value6
	value7 = UnionFromJS(input.Get("sampleRate"))
	out.SampleRate = value7
	value8 = UnionFromJS(input.Get("sampleSize"))
	out.SampleSize = value8
	value9 = UnionFromJS(input.Get("echoCancellation"))
	out.EchoCancellation = value9
	value10 = UnionFromJS(input.Get("autoGainControl"))
	out.AutoGainControl = value10
	value11 = UnionFromJS(input.Get("noiseSuppression"))
	out.NoiseSuppression = value11
	value12 = UnionFromJS(input.Get("latency"))
	out.Latency = value12
	value13 = UnionFromJS(input.Get("channelCount"))
	out.ChannelCount = value13
	value14 = UnionFromJS(input.Get("deviceId"))
	out.DeviceId = value14
	value15 = UnionFromJS(input.Get("groupId"))
	out.GroupId = value15
	value16 = UnionFromJS(input.Get("videoKind"))
	out.VideoKind = value16
	value17 = UnionFromJS(input.Get("focalLengthX"))
	out.FocalLengthX = value17
	value18 = UnionFromJS(input.Get("focalLengthY"))
	out.FocalLengthY = value18
	value19 = UnionFromJS(input.Get("principalPointX"))
	out.PrincipalPointX = value19
	value20 = UnionFromJS(input.Get("principalPointY"))
	out.PrincipalPointY = value20
	value21 = UnionFromJS(input.Get("deprojectionDistortionCoefficients"))
	out.DeprojectionDistortionCoefficients = value21
	value22 = UnionFromJS(input.Get("projectionDistortionCoefficients"))
	out.ProjectionDistortionCoefficients = value22
	value23 = UnionFromJS(input.Get("depthNear"))
	out.DepthNear = value23
	value24 = UnionFromJS(input.Get("depthFar"))
	out.DepthFar = value24
	value25 = UnionFromJS(input.Get("depthToVideoTransform"))
	out.DepthToVideoTransform = value25
	return &out
}

// dictionary: MediaTrackConstraints
type MediaTrackConstraints struct {
	Width                              *Union
	Height                             *Union
	AspectRatio                        *Union
	FrameRate                          *Union
	FacingMode                         *Union
	ResizeMode                         *Union
	Volume                             *Union
	SampleRate                         *Union
	SampleSize                         *Union
	EchoCancellation                   *Union
	AutoGainControl                    *Union
	NoiseSuppression                   *Union
	Latency                            *Union
	ChannelCount                       *Union
	DeviceId                           *Union
	GroupId                            *Union
	VideoKind                          *Union
	FocalLengthX                       *Union
	FocalLengthY                       *Union
	PrincipalPointX                    *Union
	PrincipalPointY                    *Union
	DeprojectionDistortionCoefficients *Union
	ProjectionDistortionCoefficients   *Union
	DepthNear                          *Union
	DepthFar                           *Union
	DepthToVideoTransform              *Union
	Advanced                           []*MediaTrackConstraintSet
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MediaTrackConstraints) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Width.JSValue()
	out.Set("width", value0)
	value1 := _this.Height.JSValue()
	out.Set("height", value1)
	value2 := _this.AspectRatio.JSValue()
	out.Set("aspectRatio", value2)
	value3 := _this.FrameRate.JSValue()
	out.Set("frameRate", value3)
	value4 := _this.FacingMode.JSValue()
	out.Set("facingMode", value4)
	value5 := _this.ResizeMode.JSValue()
	out.Set("resizeMode", value5)
	value6 := _this.Volume.JSValue()
	out.Set("volume", value6)
	value7 := _this.SampleRate.JSValue()
	out.Set("sampleRate", value7)
	value8 := _this.SampleSize.JSValue()
	out.Set("sampleSize", value8)
	value9 := _this.EchoCancellation.JSValue()
	out.Set("echoCancellation", value9)
	value10 := _this.AutoGainControl.JSValue()
	out.Set("autoGainControl", value10)
	value11 := _this.NoiseSuppression.JSValue()
	out.Set("noiseSuppression", value11)
	value12 := _this.Latency.JSValue()
	out.Set("latency", value12)
	value13 := _this.ChannelCount.JSValue()
	out.Set("channelCount", value13)
	value14 := _this.DeviceId.JSValue()
	out.Set("deviceId", value14)
	value15 := _this.GroupId.JSValue()
	out.Set("groupId", value15)
	value16 := _this.VideoKind.JSValue()
	out.Set("videoKind", value16)
	value17 := _this.FocalLengthX.JSValue()
	out.Set("focalLengthX", value17)
	value18 := _this.FocalLengthY.JSValue()
	out.Set("focalLengthY", value18)
	value19 := _this.PrincipalPointX.JSValue()
	out.Set("principalPointX", value19)
	value20 := _this.PrincipalPointY.JSValue()
	out.Set("principalPointY", value20)
	value21 := _this.DeprojectionDistortionCoefficients.JSValue()
	out.Set("deprojectionDistortionCoefficients", value21)
	value22 := _this.ProjectionDistortionCoefficients.JSValue()
	out.Set("projectionDistortionCoefficients", value22)
	value23 := _this.DepthNear.JSValue()
	out.Set("depthNear", value23)
	value24 := _this.DepthFar.JSValue()
	out.Set("depthFar", value24)
	value25 := _this.DepthToVideoTransform.JSValue()
	out.Set("depthToVideoTransform", value25)
	value26 := js.Global().Get("Array").New(len(_this.Advanced))
	for __idx26, __seq_in26 := range _this.Advanced {
		__seq_out26 := __seq_in26.JSValue()
		value26.SetIndex(__idx26, __seq_out26)
	}
	out.Set("advanced", value26)
	return out
}

// MediaTrackConstraintsFromJS is allocating a new
// MediaTrackConstraints object and copy all values from
// input javascript object
func MediaTrackConstraintsFromJS(value js.Wrapper) *MediaTrackConstraints {
	input := value.JSValue()
	var out MediaTrackConstraints
	var (
		value0  *Union                     // javascript: Union {width Width width}
		value1  *Union                     // javascript: Union {height Height height}
		value2  *Union                     // javascript: Union {aspectRatio AspectRatio aspectRatio}
		value3  *Union                     // javascript: Union {frameRate FrameRate frameRate}
		value4  *Union                     // javascript: Union {facingMode FacingMode facingMode}
		value5  *Union                     // javascript: Union {resizeMode ResizeMode resizeMode}
		value6  *Union                     // javascript: Union {volume Volume volume}
		value7  *Union                     // javascript: Union {sampleRate SampleRate sampleRate}
		value8  *Union                     // javascript: Union {sampleSize SampleSize sampleSize}
		value9  *Union                     // javascript: Union {echoCancellation EchoCancellation echoCancellation}
		value10 *Union                     // javascript: Union {autoGainControl AutoGainControl autoGainControl}
		value11 *Union                     // javascript: Union {noiseSuppression NoiseSuppression noiseSuppression}
		value12 *Union                     // javascript: Union {latency Latency latency}
		value13 *Union                     // javascript: Union {channelCount ChannelCount channelCount}
		value14 *Union                     // javascript: Union {deviceId DeviceId deviceId}
		value15 *Union                     // javascript: Union {groupId GroupId groupId}
		value16 *Union                     // javascript: Union {videoKind VideoKind videoKind}
		value17 *Union                     // javascript: Union {focalLengthX FocalLengthX focalLengthX}
		value18 *Union                     // javascript: Union {focalLengthY FocalLengthY focalLengthY}
		value19 *Union                     // javascript: Union {principalPointX PrincipalPointX principalPointX}
		value20 *Union                     // javascript: Union {principalPointY PrincipalPointY principalPointY}
		value21 *Union                     // javascript: Union {deprojectionDistortionCoefficients DeprojectionDistortionCoefficients deprojectionDistortionCoefficients}
		value22 *Union                     // javascript: Union {projectionDistortionCoefficients ProjectionDistortionCoefficients projectionDistortionCoefficients}
		value23 *Union                     // javascript: Union {depthNear DepthNear depthNear}
		value24 *Union                     // javascript: Union {depthFar DepthFar depthFar}
		value25 *Union                     // javascript: Union {depthToVideoTransform DepthToVideoTransform depthToVideoTransform}
		value26 []*MediaTrackConstraintSet // javascript: sequence<MediaTrackConstraintSet> {advanced Advanced advanced}
	)
	value0 = UnionFromJS(input.Get("width"))
	out.Width = value0
	value1 = UnionFromJS(input.Get("height"))
	out.Height = value1
	value2 = UnionFromJS(input.Get("aspectRatio"))
	out.AspectRatio = value2
	value3 = UnionFromJS(input.Get("frameRate"))
	out.FrameRate = value3
	value4 = UnionFromJS(input.Get("facingMode"))
	out.FacingMode = value4
	value5 = UnionFromJS(input.Get("resizeMode"))
	out.ResizeMode = value5
	value6 = UnionFromJS(input.Get("volume"))
	out.Volume = value6
	value7 = UnionFromJS(input.Get("sampleRate"))
	out.SampleRate = value7
	value8 = UnionFromJS(input.Get("sampleSize"))
	out.SampleSize = value8
	value9 = UnionFromJS(input.Get("echoCancellation"))
	out.EchoCancellation = value9
	value10 = UnionFromJS(input.Get("autoGainControl"))
	out.AutoGainControl = value10
	value11 = UnionFromJS(input.Get("noiseSuppression"))
	out.NoiseSuppression = value11
	value12 = UnionFromJS(input.Get("latency"))
	out.Latency = value12
	value13 = UnionFromJS(input.Get("channelCount"))
	out.ChannelCount = value13
	value14 = UnionFromJS(input.Get("deviceId"))
	out.DeviceId = value14
	value15 = UnionFromJS(input.Get("groupId"))
	out.GroupId = value15
	value16 = UnionFromJS(input.Get("videoKind"))
	out.VideoKind = value16
	value17 = UnionFromJS(input.Get("focalLengthX"))
	out.FocalLengthX = value17
	value18 = UnionFromJS(input.Get("focalLengthY"))
	out.FocalLengthY = value18
	value19 = UnionFromJS(input.Get("principalPointX"))
	out.PrincipalPointX = value19
	value20 = UnionFromJS(input.Get("principalPointY"))
	out.PrincipalPointY = value20
	value21 = UnionFromJS(input.Get("deprojectionDistortionCoefficients"))
	out.DeprojectionDistortionCoefficients = value21
	value22 = UnionFromJS(input.Get("projectionDistortionCoefficients"))
	out.ProjectionDistortionCoefficients = value22
	value23 = UnionFromJS(input.Get("depthNear"))
	out.DepthNear = value23
	value24 = UnionFromJS(input.Get("depthFar"))
	out.DepthFar = value24
	value25 = UnionFromJS(input.Get("depthToVideoTransform"))
	out.DepthToVideoTransform = value25
	__length26 := input.Get("advanced").Length()
	__array26 := make([]*MediaTrackConstraintSet, __length26, __length26)
	for __idx26 := 0; __idx26 < __length26; __idx26++ {
		var __seq_out26 *MediaTrackConstraintSet
		__seq_in26 := input.Get("advanced").Index(__idx26)
		__seq_out26 = MediaTrackConstraintSetFromJS(__seq_in26)
		__array26[__idx26] = __seq_out26
	}
	value26 = __array26
	out.Advanced = value26
	return &out
}

// dictionary: MediaTrackSettings
type MediaTrackSettings struct {
	Width                              int
	Height                             int
	AspectRatio                        float64
	FrameRate                          float64
	FacingMode                         string
	ResizeMode                         string
	Volume                             float64
	SampleRate                         int
	SampleSize                         int
	EchoCancellation                   bool
	AutoGainControl                    bool
	NoiseSuppression                   bool
	Latency                            float64
	ChannelCount                       int
	DeviceId                           string
	GroupId                            string
	VideoKind                          string
	FocalLengthX                       float64
	FocalLengthY                       float64
	PrincipalPointX                    float64
	PrincipalPointY                    float64
	DeprojectionDistortionCoefficients *depth.DistortionCoefficients
	ProjectionDistortionCoefficients   *depth.DistortionCoefficients
	DepthNear                          float64
	DepthFar                           float64
	DepthToVideoTransform              *depth.Transformation
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MediaTrackSettings) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Width
	out.Set("width", value0)
	value1 := _this.Height
	out.Set("height", value1)
	value2 := _this.AspectRatio
	out.Set("aspectRatio", value2)
	value3 := _this.FrameRate
	out.Set("frameRate", value3)
	value4 := _this.FacingMode
	out.Set("facingMode", value4)
	value5 := _this.ResizeMode
	out.Set("resizeMode", value5)
	value6 := _this.Volume
	out.Set("volume", value6)
	value7 := _this.SampleRate
	out.Set("sampleRate", value7)
	value8 := _this.SampleSize
	out.Set("sampleSize", value8)
	value9 := _this.EchoCancellation
	out.Set("echoCancellation", value9)
	value10 := _this.AutoGainControl
	out.Set("autoGainControl", value10)
	value11 := _this.NoiseSuppression
	out.Set("noiseSuppression", value11)
	value12 := _this.Latency
	out.Set("latency", value12)
	value13 := _this.ChannelCount
	out.Set("channelCount", value13)
	value14 := _this.DeviceId
	out.Set("deviceId", value14)
	value15 := _this.GroupId
	out.Set("groupId", value15)
	value16 := _this.VideoKind
	out.Set("videoKind", value16)
	value17 := _this.FocalLengthX
	out.Set("focalLengthX", value17)
	value18 := _this.FocalLengthY
	out.Set("focalLengthY", value18)
	value19 := _this.PrincipalPointX
	out.Set("principalPointX", value19)
	value20 := _this.PrincipalPointY
	out.Set("principalPointY", value20)
	value21 := _this.DeprojectionDistortionCoefficients.JSValue()
	out.Set("deprojectionDistortionCoefficients", value21)
	value22 := _this.ProjectionDistortionCoefficients.JSValue()
	out.Set("projectionDistortionCoefficients", value22)
	value23 := _this.DepthNear
	out.Set("depthNear", value23)
	value24 := _this.DepthFar
	out.Set("depthFar", value24)
	value25 := _this.DepthToVideoTransform.JSValue()
	out.Set("depthToVideoTransform", value25)
	return out
}

// MediaTrackSettingsFromJS is allocating a new
// MediaTrackSettings object and copy all values from
// input javascript object
func MediaTrackSettingsFromJS(value js.Wrapper) *MediaTrackSettings {
	input := value.JSValue()
	var out MediaTrackSettings
	var (
		value0  int                           // javascript: long {width Width width}
		value1  int                           // javascript: long {height Height height}
		value2  float64                       // javascript: double {aspectRatio AspectRatio aspectRatio}
		value3  float64                       // javascript: double {frameRate FrameRate frameRate}
		value4  string                        // javascript: DOMString {facingMode FacingMode facingMode}
		value5  string                        // javascript: DOMString {resizeMode ResizeMode resizeMode}
		value6  float64                       // javascript: double {volume Volume volume}
		value7  int                           // javascript: long {sampleRate SampleRate sampleRate}
		value8  int                           // javascript: long {sampleSize SampleSize sampleSize}
		value9  bool                          // javascript: boolean {echoCancellation EchoCancellation echoCancellation}
		value10 bool                          // javascript: boolean {autoGainControl AutoGainControl autoGainControl}
		value11 bool                          // javascript: boolean {noiseSuppression NoiseSuppression noiseSuppression}
		value12 float64                       // javascript: double {latency Latency latency}
		value13 int                           // javascript: long {channelCount ChannelCount channelCount}
		value14 string                        // javascript: DOMString {deviceId DeviceId deviceId}
		value15 string                        // javascript: DOMString {groupId GroupId groupId}
		value16 string                        // javascript: DOMString {videoKind VideoKind videoKind}
		value17 float64                       // javascript: double {focalLengthX FocalLengthX focalLengthX}
		value18 float64                       // javascript: double {focalLengthY FocalLengthY focalLengthY}
		value19 float64                       // javascript: double {principalPointX PrincipalPointX principalPointX}
		value20 float64                       // javascript: double {principalPointY PrincipalPointY principalPointY}
		value21 *depth.DistortionCoefficients // javascript: DistortionCoefficients {deprojectionDistortionCoefficients DeprojectionDistortionCoefficients deprojectionDistortionCoefficients}
		value22 *depth.DistortionCoefficients // javascript: DistortionCoefficients {projectionDistortionCoefficients ProjectionDistortionCoefficients projectionDistortionCoefficients}
		value23 float64                       // javascript: double {depthNear DepthNear depthNear}
		value24 float64                       // javascript: double {depthFar DepthFar depthFar}
		value25 *depth.Transformation         // javascript: Transformation {depthToVideoTransform DepthToVideoTransform depthToVideoTransform}
	)
	value0 = (input.Get("width")).Int()
	out.Width = value0
	value1 = (input.Get("height")).Int()
	out.Height = value1
	value2 = (input.Get("aspectRatio")).Float()
	out.AspectRatio = value2
	value3 = (input.Get("frameRate")).Float()
	out.FrameRate = value3
	value4 = (input.Get("facingMode")).String()
	out.FacingMode = value4
	value5 = (input.Get("resizeMode")).String()
	out.ResizeMode = value5
	value6 = (input.Get("volume")).Float()
	out.Volume = value6
	value7 = (input.Get("sampleRate")).Int()
	out.SampleRate = value7
	value8 = (input.Get("sampleSize")).Int()
	out.SampleSize = value8
	value9 = (input.Get("echoCancellation")).Bool()
	out.EchoCancellation = value9
	value10 = (input.Get("autoGainControl")).Bool()
	out.AutoGainControl = value10
	value11 = (input.Get("noiseSuppression")).Bool()
	out.NoiseSuppression = value11
	value12 = (input.Get("latency")).Float()
	out.Latency = value12
	value13 = (input.Get("channelCount")).Int()
	out.ChannelCount = value13
	value14 = (input.Get("deviceId")).String()
	out.DeviceId = value14
	value15 = (input.Get("groupId")).String()
	out.GroupId = value15
	value16 = (input.Get("videoKind")).String()
	out.VideoKind = value16
	value17 = (input.Get("focalLengthX")).Float()
	out.FocalLengthX = value17
	value18 = (input.Get("focalLengthY")).Float()
	out.FocalLengthY = value18
	value19 = (input.Get("principalPointX")).Float()
	out.PrincipalPointX = value19
	value20 = (input.Get("principalPointY")).Float()
	out.PrincipalPointY = value20
	value21 = depth.DistortionCoefficientsFromJS(input.Get("deprojectionDistortionCoefficients"))
	out.DeprojectionDistortionCoefficients = value21
	value22 = depth.DistortionCoefficientsFromJS(input.Get("projectionDistortionCoefficients"))
	out.ProjectionDistortionCoefficients = value22
	value23 = (input.Get("depthNear")).Float()
	out.DepthNear = value23
	value24 = (input.Get("depthFar")).Float()
	out.DepthFar = value24
	value25 = depth.TransformationFromJS(input.Get("depthToVideoTransform"))
	out.DepthToVideoTransform = value25
	return &out
}

// dictionary: MediaTrackSupportedConstraints
type MediaTrackSupportedConstraints struct {
	Width                              bool
	Height                             bool
	AspectRatio                        bool
	FrameRate                          bool
	FacingMode                         bool
	ResizeMode                         bool
	Volume                             bool
	SampleRate                         bool
	SampleSize                         bool
	EchoCancellation                   bool
	AutoGainControl                    bool
	NoiseSuppression                   bool
	Latency                            bool
	ChannelCount                       bool
	DeviceId                           bool
	GroupId                            bool
	VideoKind                          bool
	FocalLengthX                       bool
	FocalLengthY                       bool
	PrincipalPointX                    bool
	PrincipalPointY                    bool
	DeprojectionDistortionCoefficients bool
	ProjectionDistortionCoefficients   bool
	DepthNear                          bool
	DepthFar                           bool
	DepthToVideoTransform              bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MediaTrackSupportedConstraints) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Width
	out.Set("width", value0)
	value1 := _this.Height
	out.Set("height", value1)
	value2 := _this.AspectRatio
	out.Set("aspectRatio", value2)
	value3 := _this.FrameRate
	out.Set("frameRate", value3)
	value4 := _this.FacingMode
	out.Set("facingMode", value4)
	value5 := _this.ResizeMode
	out.Set("resizeMode", value5)
	value6 := _this.Volume
	out.Set("volume", value6)
	value7 := _this.SampleRate
	out.Set("sampleRate", value7)
	value8 := _this.SampleSize
	out.Set("sampleSize", value8)
	value9 := _this.EchoCancellation
	out.Set("echoCancellation", value9)
	value10 := _this.AutoGainControl
	out.Set("autoGainControl", value10)
	value11 := _this.NoiseSuppression
	out.Set("noiseSuppression", value11)
	value12 := _this.Latency
	out.Set("latency", value12)
	value13 := _this.ChannelCount
	out.Set("channelCount", value13)
	value14 := _this.DeviceId
	out.Set("deviceId", value14)
	value15 := _this.GroupId
	out.Set("groupId", value15)
	value16 := _this.VideoKind
	out.Set("videoKind", value16)
	value17 := _this.FocalLengthX
	out.Set("focalLengthX", value17)
	value18 := _this.FocalLengthY
	out.Set("focalLengthY", value18)
	value19 := _this.PrincipalPointX
	out.Set("principalPointX", value19)
	value20 := _this.PrincipalPointY
	out.Set("principalPointY", value20)
	value21 := _this.DeprojectionDistortionCoefficients
	out.Set("deprojectionDistortionCoefficients", value21)
	value22 := _this.ProjectionDistortionCoefficients
	out.Set("projectionDistortionCoefficients", value22)
	value23 := _this.DepthNear
	out.Set("depthNear", value23)
	value24 := _this.DepthFar
	out.Set("depthFar", value24)
	value25 := _this.DepthToVideoTransform
	out.Set("depthToVideoTransform", value25)
	return out
}

// MediaTrackSupportedConstraintsFromJS is allocating a new
// MediaTrackSupportedConstraints object and copy all values from
// input javascript object
func MediaTrackSupportedConstraintsFromJS(value js.Wrapper) *MediaTrackSupportedConstraints {
	input := value.JSValue()
	var out MediaTrackSupportedConstraints
	var (
		value0  bool // javascript: boolean {width Width width}
		value1  bool // javascript: boolean {height Height height}
		value2  bool // javascript: boolean {aspectRatio AspectRatio aspectRatio}
		value3  bool // javascript: boolean {frameRate FrameRate frameRate}
		value4  bool // javascript: boolean {facingMode FacingMode facingMode}
		value5  bool // javascript: boolean {resizeMode ResizeMode resizeMode}
		value6  bool // javascript: boolean {volume Volume volume}
		value7  bool // javascript: boolean {sampleRate SampleRate sampleRate}
		value8  bool // javascript: boolean {sampleSize SampleSize sampleSize}
		value9  bool // javascript: boolean {echoCancellation EchoCancellation echoCancellation}
		value10 bool // javascript: boolean {autoGainControl AutoGainControl autoGainControl}
		value11 bool // javascript: boolean {noiseSuppression NoiseSuppression noiseSuppression}
		value12 bool // javascript: boolean {latency Latency latency}
		value13 bool // javascript: boolean {channelCount ChannelCount channelCount}
		value14 bool // javascript: boolean {deviceId DeviceId deviceId}
		value15 bool // javascript: boolean {groupId GroupId groupId}
		value16 bool // javascript: boolean {videoKind VideoKind videoKind}
		value17 bool // javascript: boolean {focalLengthX FocalLengthX focalLengthX}
		value18 bool // javascript: boolean {focalLengthY FocalLengthY focalLengthY}
		value19 bool // javascript: boolean {principalPointX PrincipalPointX principalPointX}
		value20 bool // javascript: boolean {principalPointY PrincipalPointY principalPointY}
		value21 bool // javascript: boolean {deprojectionDistortionCoefficients DeprojectionDistortionCoefficients deprojectionDistortionCoefficients}
		value22 bool // javascript: boolean {projectionDistortionCoefficients ProjectionDistortionCoefficients projectionDistortionCoefficients}
		value23 bool // javascript: boolean {depthNear DepthNear depthNear}
		value24 bool // javascript: boolean {depthFar DepthFar depthFar}
		value25 bool // javascript: boolean {depthToVideoTransform DepthToVideoTransform depthToVideoTransform}
	)
	value0 = (input.Get("width")).Bool()
	out.Width = value0
	value1 = (input.Get("height")).Bool()
	out.Height = value1
	value2 = (input.Get("aspectRatio")).Bool()
	out.AspectRatio = value2
	value3 = (input.Get("frameRate")).Bool()
	out.FrameRate = value3
	value4 = (input.Get("facingMode")).Bool()
	out.FacingMode = value4
	value5 = (input.Get("resizeMode")).Bool()
	out.ResizeMode = value5
	value6 = (input.Get("volume")).Bool()
	out.Volume = value6
	value7 = (input.Get("sampleRate")).Bool()
	out.SampleRate = value7
	value8 = (input.Get("sampleSize")).Bool()
	out.SampleSize = value8
	value9 = (input.Get("echoCancellation")).Bool()
	out.EchoCancellation = value9
	value10 = (input.Get("autoGainControl")).Bool()
	out.AutoGainControl = value10
	value11 = (input.Get("noiseSuppression")).Bool()
	out.NoiseSuppression = value11
	value12 = (input.Get("latency")).Bool()
	out.Latency = value12
	value13 = (input.Get("channelCount")).Bool()
	out.ChannelCount = value13
	value14 = (input.Get("deviceId")).Bool()
	out.DeviceId = value14
	value15 = (input.Get("groupId")).Bool()
	out.GroupId = value15
	value16 = (input.Get("videoKind")).Bool()
	out.VideoKind = value16
	value17 = (input.Get("focalLengthX")).Bool()
	out.FocalLengthX = value17
	value18 = (input.Get("focalLengthY")).Bool()
	out.FocalLengthY = value18
	value19 = (input.Get("principalPointX")).Bool()
	out.PrincipalPointX = value19
	value20 = (input.Get("principalPointY")).Bool()
	out.PrincipalPointY = value20
	value21 = (input.Get("deprojectionDistortionCoefficients")).Bool()
	out.DeprojectionDistortionCoefficients = value21
	value22 = (input.Get("projectionDistortionCoefficients")).Bool()
	out.ProjectionDistortionCoefficients = value22
	value23 = (input.Get("depthNear")).Bool()
	out.DepthNear = value23
	value24 = (input.Get("depthFar")).Bool()
	out.DepthFar = value24
	value25 = (input.Get("depthToVideoTransform")).Bool()
	out.DepthToVideoTransform = value25
	return &out
}

// dictionary: OverconstrainedErrorEventInit
type OverconstrainedErrorEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Error      *patch.OverconstrainedError
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *OverconstrainedErrorEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Error.JSValue()
	out.Set("error", value3)
	return out
}

// OverconstrainedErrorEventInitFromJS is allocating a new
// OverconstrainedErrorEventInit object and copy all values from
// input javascript object
func OverconstrainedErrorEventInitFromJS(value js.Wrapper) *OverconstrainedErrorEventInit {
	input := value.JSValue()
	var out OverconstrainedErrorEventInit
	var (
		value0 bool                        // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool                        // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool                        // javascript: boolean {composed Composed composed}
		value3 *patch.OverconstrainedError // javascript: OverconstrainedError {error Error _error}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	if input.Get("error").Type() != js.TypeNull {
		value3 = patch.OverconstrainedErrorFromJS(input.Get("error"))
	}
	out.Error = value3
	return &out
}

// dictionary: Settings
type Settings struct {
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *Settings) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	return out
}

// SettingsFromJS is allocating a new
// Settings object and copy all values from
// input javascript object
func SettingsFromJS(value js.Wrapper) *Settings {
	var out Settings
	var ()
	return &out
}

// dictionary: ULongRange
type ULongRange struct {
	Max uint
	Min uint
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *ULongRange) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Max
	out.Set("max", value0)
	value1 := _this.Min
	out.Set("min", value1)
	return out
}

// ULongRangeFromJS is allocating a new
// ULongRange object and copy all values from
// input javascript object
func ULongRangeFromJS(value js.Wrapper) *ULongRange {
	input := value.JSValue()
	var out ULongRange
	var (
		value0 uint // javascript: unsigned long {max Max max}
		value1 uint // javascript: unsigned long {min Min min}
	)
	value0 = (uint)((input.Get("max")).Int())
	out.Max = value0
	value1 = (uint)((input.Get("min")).Int())
	out.Min = value1
	return &out
}

// interface: ConstrainablePattern
type ConstrainablePattern struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *ConstrainablePattern) JSValue() js.Value {
	return _this.Value_JS
}

// ConstrainablePatternFromJS is casting a js.Wrapper into ConstrainablePattern.
func ConstrainablePatternFromJS(value js.Wrapper) *ConstrainablePattern {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &ConstrainablePattern{}
	ret.Value_JS = input
	return ret
}

// Onoverconstrained returning attribute 'onoverconstrained' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ConstrainablePattern) Onoverconstrained() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onoverconstrained")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnoverconstrained setting attribute 'onoverconstrained' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ConstrainablePattern) SetOnoverconstrained(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onoverconstrained", input)
}

func (_this *ConstrainablePattern) GetCapabilities() (_result *Capabilities) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getCapabilities", _args[0:_end]...)
	var (
		_converted *Capabilities // javascript: Capabilities _what_return_name
	)
	_converted = CapabilitiesFromJS(_returned)
	_result = _converted
	return
}

func (_this *ConstrainablePattern) GetConstraints() (_result *Constraints) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getConstraints", _args[0:_end]...)
	var (
		_converted *Constraints // javascript: Constraints _what_return_name
	)
	_converted = ConstraintsFromJS(_returned)
	_result = _converted
	return
}

func (_this *ConstrainablePattern) GetSettings() (_result *Settings) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSettings", _args[0:_end]...)
	var (
		_converted *Settings // javascript: Settings _what_return_name
	)
	_converted = SettingsFromJS(_returned)
	_result = _converted
	return
}

func (_this *ConstrainablePattern) ApplyConstraints(constraints *Constraints) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	if constraints != nil {
		_p0 := constraints.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("applyConstraints", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

// interface: InputDeviceInfo
type InputDeviceInfo struct {
	MediaDeviceInfo
}

// InputDeviceInfoFromJS is casting a js.Wrapper into InputDeviceInfo.
func InputDeviceInfoFromJS(value js.Wrapper) *InputDeviceInfo {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &InputDeviceInfo{}
	ret.Value_JS = input
	return ret
}

func (_this *InputDeviceInfo) GetCapabilities() (_result *MediaTrackCapabilities) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getCapabilities", _args[0:_end]...)
	var (
		_converted *MediaTrackCapabilities // javascript: MediaTrackCapabilities _what_return_name
	)
	_converted = MediaTrackCapabilitiesFromJS(_returned)
	_result = _converted
	return
}

// interface: MediaDeviceInfo
type MediaDeviceInfo struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *MediaDeviceInfo) JSValue() js.Value {
	return _this.Value_JS
}

// MediaDeviceInfoFromJS is casting a js.Wrapper into MediaDeviceInfo.
func MediaDeviceInfoFromJS(value js.Wrapper) *MediaDeviceInfo {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaDeviceInfo{}
	ret.Value_JS = input
	return ret
}

// DeviceId returning attribute 'deviceId' with
// type string (idl: DOMString).
func (_this *MediaDeviceInfo) DeviceId() string {
	var ret string
	value := _this.Value_JS.Get("deviceId")
	ret = (value).String()
	return ret
}

// Kind returning attribute 'kind' with
// type MediaDeviceKind (idl: MediaDeviceKind).
func (_this *MediaDeviceInfo) Kind() MediaDeviceKind {
	var ret MediaDeviceKind
	value := _this.Value_JS.Get("kind")
	ret = MediaDeviceKindFromJS(value)
	return ret
}

// Label returning attribute 'label' with
// type string (idl: DOMString).
func (_this *MediaDeviceInfo) Label() string {
	var ret string
	value := _this.Value_JS.Get("label")
	ret = (value).String()
	return ret
}

// GroupId returning attribute 'groupId' with
// type string (idl: DOMString).
func (_this *MediaDeviceInfo) GroupId() string {
	var ret string
	value := _this.Value_JS.Get("groupId")
	ret = (value).String()
	return ret
}

func (_this *MediaDeviceInfo) ToJSON() (_result *javascript.Object) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("toJSON", _args[0:_end]...)
	var (
		_converted *javascript.Object // javascript: object _what_return_name
	)
	_converted = javascript.ObjectFromJS(_returned)
	_result = _converted
	return
}

// interface: MediaDevices
type MediaDevices struct {
	domcore.EventTarget
}

// MediaDevicesFromJS is casting a js.Wrapper into MediaDevices.
func MediaDevicesFromJS(value js.Wrapper) *MediaDevices {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaDevices{}
	ret.Value_JS = input
	return ret
}

// Ondevicechange returning attribute 'ondevicechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaDevices) Ondevicechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondevicechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndevicechange setting attribute 'ondevicechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaDevices) SetOndevicechange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ondevicechange", input)
}

func (_this *MediaDevices) EnumerateDevices() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("enumerateDevices", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *MediaDevices) GetSupportedConstraints() (_result *MediaTrackSupportedConstraints) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSupportedConstraints", _args[0:_end]...)
	var (
		_converted *MediaTrackSupportedConstraints // javascript: MediaTrackSupportedConstraints _what_return_name
	)
	_converted = MediaTrackSupportedConstraintsFromJS(_returned)
	_result = _converted
	return
}

func (_this *MediaDevices) GetUserMedia(constraints *MediaStreamConstraints) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	if constraints != nil {
		_p0 := constraints.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("getUserMedia", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

// interface: MediaStream
type MediaStream struct {
	domcore.EventTarget
}

// MediaStreamFromJS is casting a js.Wrapper into MediaStream.
func MediaStreamFromJS(value js.Wrapper) *MediaStream {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaStream{}
	ret.Value_JS = input
	return ret
}

func NewMediaStream(tracks []*MediaStreamTrack) (_result *MediaStream) {
	_klass := js.Global().Get("MediaStream")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := js.Global().Get("Array").New(len(tracks))
	for __idx0, __seq_in0 := range tracks {
		__seq_out0 := __seq_in0.JSValue()
		_p0.SetIndex(__idx0, __seq_out0)
	}
	_args[0] = _p0
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *MediaStream // javascript: MediaStream _what_return_name
	)
	_converted = MediaStreamFromJS(_returned)
	_result = _converted
	return
}

// Id returning attribute 'id' with
// type string (idl: DOMString).
func (_this *MediaStream) Id() string {
	var ret string
	value := _this.Value_JS.Get("id")
	ret = (value).String()
	return ret
}

// Active returning attribute 'active' with
// type bool (idl: boolean).
func (_this *MediaStream) Active() bool {
	var ret bool
	value := _this.Value_JS.Get("active")
	ret = (value).Bool()
	return ret
}

// Onaddtrack returning attribute 'onaddtrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaStream) Onaddtrack() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onaddtrack")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnaddtrack setting attribute 'onaddtrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaStream) SetOnaddtrack(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onaddtrack", input)
}

// Onremovetrack returning attribute 'onremovetrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaStream) Onremovetrack() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onremovetrack")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnremovetrack setting attribute 'onremovetrack' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaStream) SetOnremovetrack(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onremovetrack", input)
}

func (_this *MediaStream) GetAudioTracks() (_result []*MediaStreamTrack) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getAudioTracks", _args[0:_end]...)
	var (
		_converted []*MediaStreamTrack // javascript: sequence<MediaStreamTrack> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*MediaStreamTrack, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *MediaStreamTrack
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = MediaStreamTrackFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

func (_this *MediaStream) GetVideoTracks() (_result []*MediaStreamTrack) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getVideoTracks", _args[0:_end]...)
	var (
		_converted []*MediaStreamTrack // javascript: sequence<MediaStreamTrack> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*MediaStreamTrack, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *MediaStreamTrack
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = MediaStreamTrackFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

func (_this *MediaStream) GetTracks() (_result []*MediaStreamTrack) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getTracks", _args[0:_end]...)
	var (
		_converted []*MediaStreamTrack // javascript: sequence<MediaStreamTrack> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*MediaStreamTrack, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *MediaStreamTrack
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = MediaStreamTrackFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

func (_this *MediaStream) GetTrackById(trackId string) (_result *MediaStreamTrack) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := trackId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getTrackById", _args[0:_end]...)
	var (
		_converted *MediaStreamTrack // javascript: MediaStreamTrack _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = MediaStreamTrackFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *MediaStream) AddTrack(track *MediaStreamTrack) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := track.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("addTrack", _args[0:_end]...)
	return
}

func (_this *MediaStream) RemoveTrack(track *MediaStreamTrack) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := track.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("removeTrack", _args[0:_end]...)
	return
}

func (_this *MediaStream) Clone() (_result *MediaStream) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("clone", _args[0:_end]...)
	var (
		_converted *MediaStream // javascript: MediaStream _what_return_name
	)
	_converted = MediaStreamFromJS(_returned)
	_result = _converted
	return
}

// interface: MediaStreamTrack
type MediaStreamTrack struct {
	domcore.EventTarget
}

// MediaStreamTrackFromJS is casting a js.Wrapper into MediaStreamTrack.
func MediaStreamTrackFromJS(value js.Wrapper) *MediaStreamTrack {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaStreamTrack{}
	ret.Value_JS = input
	return ret
}

// Kind returning attribute 'kind' with
// type string (idl: DOMString).
func (_this *MediaStreamTrack) Kind() string {
	var ret string
	value := _this.Value_JS.Get("kind")
	ret = (value).String()
	return ret
}

// Id returning attribute 'id' with
// type string (idl: DOMString).
func (_this *MediaStreamTrack) Id() string {
	var ret string
	value := _this.Value_JS.Get("id")
	ret = (value).String()
	return ret
}

// Label returning attribute 'label' with
// type string (idl: DOMString).
func (_this *MediaStreamTrack) Label() string {
	var ret string
	value := _this.Value_JS.Get("label")
	ret = (value).String()
	return ret
}

// Enabled returning attribute 'enabled' with
// type bool (idl: boolean).
func (_this *MediaStreamTrack) Enabled() bool {
	var ret bool
	value := _this.Value_JS.Get("enabled")
	ret = (value).Bool()
	return ret
}

// SetEnabled setting attribute 'enabled' with
// type bool (idl: boolean).
func (_this *MediaStreamTrack) SetEnabled(value bool) {
	input := value
	_this.Value_JS.Set("enabled", input)
}

// Muted returning attribute 'muted' with
// type bool (idl: boolean).
func (_this *MediaStreamTrack) Muted() bool {
	var ret bool
	value := _this.Value_JS.Get("muted")
	ret = (value).Bool()
	return ret
}

// Onmute returning attribute 'onmute' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaStreamTrack) Onmute() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmute")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmute setting attribute 'onmute' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaStreamTrack) SetOnmute(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmute", input)
}

// Onunmute returning attribute 'onunmute' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaStreamTrack) Onunmute() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunmute")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnunmute setting attribute 'onunmute' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaStreamTrack) SetOnunmute(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onunmute", input)
}

// ReadyState returning attribute 'readyState' with
// type MediaStreamTrackState (idl: MediaStreamTrackState).
func (_this *MediaStreamTrack) ReadyState() MediaStreamTrackState {
	var ret MediaStreamTrackState
	value := _this.Value_JS.Get("readyState")
	ret = MediaStreamTrackStateFromJS(value)
	return ret
}

// Onended returning attribute 'onended' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaStreamTrack) Onended() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onended")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnended setting attribute 'onended' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaStreamTrack) SetOnended(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onended", input)
}

// Onoverconstrained returning attribute 'onoverconstrained' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaStreamTrack) Onoverconstrained() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onoverconstrained")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnoverconstrained setting attribute 'onoverconstrained' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaStreamTrack) SetOnoverconstrained(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onoverconstrained", input)
}

func (_this *MediaStreamTrack) Clone() (_result *MediaStreamTrack) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("clone", _args[0:_end]...)
	var (
		_converted *MediaStreamTrack // javascript: MediaStreamTrack _what_return_name
	)
	_converted = MediaStreamTrackFromJS(_returned)
	_result = _converted
	return
}

func (_this *MediaStreamTrack) Stop() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("stop", _args[0:_end]...)
	return
}

func (_this *MediaStreamTrack) GetCapabilities() (_result *MediaTrackCapabilities) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getCapabilities", _args[0:_end]...)
	var (
		_converted *MediaTrackCapabilities // javascript: MediaTrackCapabilities _what_return_name
	)
	_converted = MediaTrackCapabilitiesFromJS(_returned)
	_result = _converted
	return
}

func (_this *MediaStreamTrack) GetConstraints() (_result *MediaTrackConstraints) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getConstraints", _args[0:_end]...)
	var (
		_converted *MediaTrackConstraints // javascript: MediaTrackConstraints _what_return_name
	)
	_converted = MediaTrackConstraintsFromJS(_returned)
	_result = _converted
	return
}

func (_this *MediaStreamTrack) GetSettings() (_result *MediaTrackSettings) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSettings", _args[0:_end]...)
	var (
		_converted *MediaTrackSettings // javascript: MediaTrackSettings _what_return_name
	)
	_converted = MediaTrackSettingsFromJS(_returned)
	_result = _converted
	return
}

func (_this *MediaStreamTrack) ApplyConstraints(constraints *MediaTrackConstraints) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	if constraints != nil {
		_p0 := constraints.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("applyConstraints", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

// interface: MediaStreamTrackEvent
type MediaStreamTrackEvent struct {
	domcore.Event
}

// MediaStreamTrackEventFromJS is casting a js.Wrapper into MediaStreamTrackEvent.
func MediaStreamTrackEventFromJS(value js.Wrapper) *MediaStreamTrackEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaStreamTrackEvent{}
	ret.Value_JS = input
	return ret
}

func NewMediaStreamTrackEvent(_type string, eventInitDict *MediaStreamTrackEventInit) (_result *MediaStreamTrackEvent) {
	_klass := js.Global().Get("MediaStreamTrackEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_p1 := eventInitDict.JSValue()
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *MediaStreamTrackEvent // javascript: MediaStreamTrackEvent _what_return_name
	)
	_converted = MediaStreamTrackEventFromJS(_returned)
	_result = _converted
	return
}

// Track returning attribute 'track' with
// type MediaStreamTrack (idl: MediaStreamTrack).
func (_this *MediaStreamTrackEvent) Track() *MediaStreamTrack {
	var ret *MediaStreamTrack
	value := _this.Value_JS.Get("track")
	ret = MediaStreamTrackFromJS(value)
	return ret
}

// interface: OverconstrainedErrorEvent
type OverconstrainedErrorEvent struct {
	domcore.Event
}

// OverconstrainedErrorEventFromJS is casting a js.Wrapper into OverconstrainedErrorEvent.
func OverconstrainedErrorEventFromJS(value js.Wrapper) *OverconstrainedErrorEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &OverconstrainedErrorEvent{}
	ret.Value_JS = input
	return ret
}

func NewOverconstrainedErrorEvent(_type string, eventInitDict *OverconstrainedErrorEventInit) (_result *OverconstrainedErrorEvent) {
	_klass := js.Global().Get("OverconstrainedErrorEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_p1 := eventInitDict.JSValue()
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *OverconstrainedErrorEvent // javascript: OverconstrainedErrorEvent _what_return_name
	)
	_converted = OverconstrainedErrorEventFromJS(_returned)
	_result = _converted
	return
}

// Error returning attribute 'error' with
// type patch.OverconstrainedError (idl: OverconstrainedError).
func (_this *OverconstrainedErrorEvent) Error() *patch.OverconstrainedError {
	var ret *patch.OverconstrainedError
	value := _this.Value_JS.Get("error")
	if value.Type() != js.TypeNull {
		ret = patch.OverconstrainedErrorFromJS(value)
	}
	return ret
}
